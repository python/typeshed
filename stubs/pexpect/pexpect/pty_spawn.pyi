from _typeshed import Incomplete

from ptyprocess.ptyprocess import use_native_pty_fork

from .spawnbase import SpawnBase

PY3: Incomplete

class spawn(SpawnBase):
    use_native_pty_fork = use_native_pty_fork
    STDIN_FILENO: Incomplete
    STDOUT_FILENO: Incomplete
    STDERR_FILENO: Incomplete
    str_last_chars: int
    cwd: Incomplete
    env: Incomplete
    echo: Incomplete
    ignore_sighup: Incomplete
    command: Incomplete
    args: Incomplete
    name: str
    use_poll: Incomplete
    def __init__(
        self,
        command,
        args=[],
        timeout: int = 30,
        maxread: int = 2000,
        searchwindowsize: Incomplete | None = None,
        logfile: Incomplete | None = None,
        cwd: Incomplete | None = None,
        env: Incomplete | None = None,
        ignore_sighup: bool = False,
        echo: bool = True,
        preexec_fn: Incomplete | None = None,
        encoding: Incomplete | None = None,
        codec_errors: str = "strict",
        dimensions: Incomplete | None = None,
        use_poll: bool = False,
    ) -> None: ...
    child_fd: int
    closed: bool
    def close(self, force: bool = True) -> None: ...
    def isatty(self): ...
    def waitnoecho(self, timeout: int = -1): ...
    def getecho(self): ...
    def setecho(self, state): ...
    def read_nonblocking(self, size: int = 1, timeout: int = -1): ...
    def write(self, s) -> None: ...
    def writelines(self, sequence) -> None: ...
    def send(self, s): ...
    def sendline(self, s: str = ""): ...
    def sendcontrol(self, char): ...
    def sendeof(self) -> None: ...
    def sendintr(self) -> None: ...
    @property
    def flag_eof(self): ...
    @flag_eof.setter
    def flag_eof(self, value) -> None: ...
    def eof(self): ...
    def terminate(self, force: bool = False): ...
    status: Incomplete
    exitstatus: Incomplete
    signalstatus: Incomplete
    terminated: bool
    def wait(self): ...
    def isalive(self): ...
    def kill(self, sig) -> None: ...
    def getwinsize(self): ...
    def setwinsize(self, rows, cols): ...
    def interact(
        self, escape_character="\x1d", input_filter: Incomplete | None = None, output_filter: Incomplete | None = None
    ) -> None: ...

def spawnu(*args, **kwargs): ...
