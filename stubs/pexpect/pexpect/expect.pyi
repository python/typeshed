from _typeshed import Incomplete

class Expecter:
    spawn: Incomplete
    searcher: Incomplete
    searchwindowsize: Incomplete
    lookback: Incomplete
    def __init__(self, spawn, searcher, searchwindowsize: int = -1) -> None: ...
    def do_search(self, window, freshlen): ...
    def existing_data(self): ...
    def new_data(self, data): ...
    def eof(self, err: Incomplete | None = None): ...
    def timeout(self, err: Incomplete | None = None): ...
    def errored(self) -> None: ...
    def expect_loop(self, timeout: int = -1): ...

class searcher_string:
    eof_index: int
    timeout_index: int
    longest_string: int
    def __init__(self, strings) -> None: ...
    match: Incomplete
    start: Incomplete
    end: Incomplete
    def search(self, buffer, freshlen, searchwindowsize: Incomplete | None = None): ...

class searcher_re:
    eof_index: int
    timeout_index: int
    def __init__(self, patterns) -> None: ...
    start: Incomplete
    match: Incomplete
    end: Incomplete
    def search(self, buffer, freshlen, searchwindowsize: Incomplete | None = None): ...
