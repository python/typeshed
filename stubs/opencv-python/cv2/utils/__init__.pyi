from _typeshed import Incomplete
from collections.abc import Sequence
from typing import NamedTuple, Union, overload
from typing_extensions import TypeAlias

from cv2.cv2 import AsyncArray, _Boolean, _Mat, _NumericScalar, _Point, _PointFloat, _Range, _Rect, _SizeFloat, _TUMat, _UMat

# #5768
# import numpy
_NDArray: TypeAlias = Incomplete
_RotatedRect: TypeAlias = Union[tuple[_PointFloat, _SizeFloat, float], Sequence[_PointFloat | _SizeFloat | float]]
_RotatedRectResult: TypeAlias = tuple[tuple[float, float], tuple[float, float], float]
_TermCriteria: TypeAlias = Union[tuple[int, int, float], Sequence[float]]

class NativeMethodPatchedResult(NamedTuple):
    py: int
    native: int

def testOverwriteNativeMethod(arg: int) -> NativeMethodPatchedResult: ...
def dumpBool(argument: _Boolean) -> str: ...
def dumpCString(argument: str) -> str: ...
def dumpDouble(argument: float | None) -> str: ...
def dumpFloat(argument: float | None) -> str: ...
def dumpInputArray(argument: _UMat) -> str: ...
def dumpInputArrayOfArrays(argument: Sequence[_UMat] | None) -> str: ...
def dumpInputOutputArray(argument: _TUMat) -> tuple[str, _TUMat]: ...
def dumpInputOutputArrayOfArrays(argument: Sequence[_TUMat] | None) -> tuple[str, tuple[_TUMat, ...]]: ...
def dumpInt(argument: int) -> str: ...
def dumpRange(argument: _Range | None) -> str: ...
def dumpRect(argument: _Rect | None) -> str: ...
def dumpRotatedRect(argument: _RotatedRect) -> str: ...
def dumpSizeT(argument: int | None) -> str: ...
def dumpString(argument: str | None) -> str: ...
def dumpTermCriteria(argument: _TermCriteria | None) -> str: ...
def dumpVectorOfDouble(vec: Sequence[float | None] | None) -> str: ...
def dumpVectorOfInt(vec: Sequence[int | None] | None) -> str: ...
def dumpVectorOfRect(vec: Sequence[_Rect | None] | None) -> str: ...
def generateVectorOfInt(len: int) -> _NDArray: ...
def generateVectorOfMat(
    len: int, rows: int, cols: int, dtype: int, vec: Sequence[_Mat | _NumericScalar] = ...
) -> tuple[_Mat, ...]: ...
def generateVectorOfRect(len: int) -> _NDArray: ...
def testAsyncArray(argument: _UMat) -> AsyncArray: ...
def testAsyncException() -> AsyncArray: ...
@overload
def testOverloadResolution(rect: _Rect | None) -> str: ...
@overload
def testOverloadResolution(value: int | None, point: _Point | None = ...) -> str: ...
def testRaiseGeneralException() -> None: ...
def testReservedKeywordConversion(positional_argument: int | None, lambda_: int | None = ..., from_: int | None = ...) -> str: ...
def testRotatedRect(
    x: float | None, y: float | None, w: float | None, h: float | None, angle: float | None
) -> _RotatedRectResult: ...
def testRotatedRectVector(
    x: float | None, y: float | None, w: float | None, h: float | None, angle: float | None
) -> tuple[
    _RotatedRectResult,
    _RotatedRectResult,
    _RotatedRectResult,
    _RotatedRectResult,
    _RotatedRectResult,
    _RotatedRectResult,
    _RotatedRectResult,
    _RotatedRectResult,
    _RotatedRectResult,
    _RotatedRectResult,
]: ...
