import abc
import collections
import json
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from enum import Enum
from typing import Any, Literal

from boto3.session import Session as Session

logger: Incomplete

class _JSONEncoder(json.JSONEncoder):
    def default(self, o): ...

class _DefaultToRequestDict: ...
class _DefaultFromDict: ...

class _DescriptorBase(ABC, metaclass=abc.ABCMeta):
    private_name: Incomplete
    def __set_name__(self, owner: type, name: str): ...
    def __get__(self, obj, objtype: type | None = None): ...
    def __set__(self, obj: object, value: Any): ...
    @abstractmethod
    def validate(self, value): ...
    @abstractmethod
    def require_decode(self, value: dict[Any, Any]): ...
    @abstractmethod
    def decode(self, value: dict[Any, Any]): ...

class _OneOf(_DescriptorBase):
    options: Incomplete
    enumerator: Incomplete
    enumerator_reverse: Incomplete
    def __init__(self, enumerator: Enum) -> None: ...
    def validate(self, value) -> None: ...
    def require_decode(self, value: Enum | str): ...
    def decode(self, value: str): ...

class _IsList(_DescriptorBase):
    item_type: Incomplete
    max_size: Incomplete
    def __init__(self, item_type: object, max_size: int | None = None) -> None: ...
    def validate(self, value: list[Any]): ...
    def require_decode(self, value: list[Any]) -> Literal[True]: ...
    def decode(self, value: list[Any]) -> _MaxSizeArray: ...

class _IsModelCardObject(_DescriptorBase):
    custom_class: Incomplete
    def __init__(self, custom_class: object) -> None: ...
    def validate(self, value: dict[Any, Any] | object): ...
    def require_decode(self, value: dict[Any, Any] | object) -> bool: ...
    def decode(self, value: dict[Any, Any]): ...

class _MaxSizeArray(collections.abc.MutableSequence):
    list: Incomplete
    def __init__(self, max_size: int, item_type: Any, array: list[Any] | None = None) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index): ...
    def __delitem__(self, index) -> None: ...
    def __setitem__(self, index: int, value: Any): ...
    def __eq__(self, other: _MaxSizeArray): ...
    def check(self, value: Any): ...
    def insert(self, index, value) -> None: ...
    def to_map(self, key_attribute: str): ...
