from _typeshed import Incomplete
from collections.abc import Generator

from sagemaker.deserializers import SimpleBaseDeserializer
from sagemaker.serializers import SimpleBaseSerializer

class RecordSerializer(SimpleBaseSerializer):
    def __init__(self, content_type: str = "application/x-recordio-protobuf") -> None: ...
    def serialize(self, data): ...

class RecordDeserializer(SimpleBaseDeserializer):
    def __init__(self, accept: str = "application/x-recordio-protobuf") -> None: ...
    def deserialize(self, data, content_type): ...

def write_numpy_to_dense_tensor(file, array, labels: Incomplete | None = None) -> None: ...
def write_spmatrix_to_sparse_tensor(file, array, labels: Incomplete | None = None) -> None: ...
def read_records(file): ...

padding: Incomplete

def read_recordio(f) -> Generator[Incomplete, None, None]: ...

numpy_to_record_serializer: Incomplete
record_deserializer: Incomplete
