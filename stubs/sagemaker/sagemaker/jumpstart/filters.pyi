from _typeshed import Incomplete
from enum import Enum
from typing import Any, Dict, List, Union

from sagemaker.jumpstart.types import JumpStartDataHolderType

class BooleanValues(str, Enum):
    TRUE: str
    FALSE: str
    UNKNOWN: str
    UNEVALUATED: str

class FilterOperators(str, Enum):
    EQUALS: str
    NOT_EQUALS: str
    IN: str
    NOT_IN: str

class SpecialSupportedFilterKeys(str, Enum):
    TASK: str
    FRAMEWORK: str
    SUPPORTED_MODEL: str

FILTER_OPERATOR_STRING_MAPPINGS: Incomplete
ACCEPTABLE_OPERATORS_IN_PARSE_ORDER: Incomplete
SPECIAL_SUPPORTED_FILTER_KEYS: Incomplete

class Operand:
    unresolved_value: Incomplete
    def __init__(self, unresolved_value: Any, resolved_value: BooleanValues = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def eval(self) -> None: ...
    @property
    def resolved_value(self) -> BooleanValues: ...
    @resolved_value.setter
    def resolved_value(self, new_resolved_value: Any) -> None: ...
    @staticmethod
    def validate_operand(operand: Any) -> Any: ...

class Operator(Operand):
    def __init__(self, resolved_value: BooleanValues = ..., unresolved_value: Any = None) -> None: ...
    def eval(self) -> None: ...
    def __iter__(self) -> Any: ...

class And(Operator):
    operands: Incomplete
    def __init__(self, *operands: Union[Operand, str]) -> None: ...
    resolved_value: Incomplete
    def eval(self) -> None: ...
    def __iter__(self) -> Any: ...

class Constant(Operator):
    def __init__(self, constant: BooleanValues) -> None: ...
    def eval(self) -> None: ...
    def __iter__(self) -> Any: ...

class Identity(Operator):
    operand: Incomplete
    def __init__(self, operand: Union[Operand, str]) -> None: ...
    def __iter__(self) -> Any: ...
    resolved_value: Incomplete
    def eval(self) -> None: ...

class Or(Operator):
    operands: Incomplete
    def __init__(self, *operands: Union[Operand, str]) -> None: ...
    resolved_value: Incomplete
    def eval(self) -> None: ...
    def __iter__(self) -> Any: ...

class Not(Operator):
    operand: Incomplete
    def __init__(self, operand: Union[Operand, str]) -> None: ...
    resolved_value: Incomplete
    def eval(self) -> None: ...
    def __iter__(self) -> Any: ...

class ModelFilter(JumpStartDataHolderType):
    key: Incomplete
    value: Incomplete
    operator: Incomplete
    def __init__(self, key: str, value: str, operator: str) -> None: ...

def parse_filter_string(filter_string: str) -> ModelFilter: ...
def evaluate_filter_expression(
    model_filter: ModelFilter, cached_model_value: Union[str, bool, int, float, Dict[str, Any], List[Any]]
) -> BooleanValues: ...
