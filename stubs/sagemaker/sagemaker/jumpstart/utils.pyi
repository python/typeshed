from _typeshed import Incomplete
from typing import Any

from sagemaker.jumpstart import enums
from sagemaker.jumpstart.types import JumpStartModelHeader, JumpStartModelSpecs, JumpStartVersionedModelId
from sagemaker.session import Session

LOGGER: Incomplete

def get_jumpstart_launched_regions_message() -> str: ...
def get_jumpstart_content_bucket(region: str = "eu-west-1") -> str: ...
def get_formatted_manifest(manifest: list[dict]) -> dict[JumpStartVersionedModelId, JumpStartModelHeader]: ...
def get_sagemaker_version() -> str: ...
def parse_sagemaker_version() -> str: ...
def is_jumpstart_model_input(model_id: str | None, version: str | None) -> bool: ...
def is_jumpstart_model_uri(uri: str | None) -> bool: ...
def tag_key_in_array(tag_key: str, tag_array: list[dict[str, str]]) -> bool: ...
def get_tag_value(tag_key: str, tag_array: list[dict[str, str]]) -> str: ...
def add_single_jumpstart_tag(uri: str, tag_key: enums.JumpStartTag, curr_tags: list[dict[str, str]] | None) -> list | None: ...
def get_jumpstart_base_name_if_jumpstart_model(*uris: str | None) -> str | None: ...
def add_jumpstart_tags(
    tags: list[dict[str, str]] | None = None,
    inference_model_uri: str | None = None,
    inference_script_uri: str | None = None,
    training_model_uri: str | None = None,
    training_script_uri: str | None = None,
) -> list[dict[str, str]] | None: ...
def update_inference_tags_with_jumpstart_training_tags(
    inference_tags: list[dict[str, str]] | None, training_tags: list[dict[str, str]] | None
) -> list[dict[str, str]] | None: ...
def verify_model_region_and_return_specs(
    model_id: str | None,
    version: str | None,
    scope: str | None,
    region: str,
    tolerate_vulnerable_model: bool = False,
    tolerate_deprecated_model: bool = False,
) -> JumpStartModelSpecs: ...
def update_dict_if_key_not_present(dict_to_update: dict, key_to_add: Any, value_to_add: Any) -> dict: ...
def resolve_model_sagemaker_config_field(
    field_name: str, field_val: Any | None, sagemaker_session: Session, default_value: str | None = None
) -> Any: ...
def resolve_estimator_sagemaker_config_field(
    field_name: str, field_val: Any | None, sagemaker_session: Session, default_value: str | None = None
) -> Any: ...
def is_valid_model_id(
    model_id: str | None, region: str | None = None, model_version: str | None = None, script: enums.JumpStartScriptScope = ...
) -> bool: ...
