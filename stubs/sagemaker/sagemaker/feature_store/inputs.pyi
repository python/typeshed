import abc
from enum import Enum
from typing import Any, Dict, List

class Config(abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def to_dict(self) -> Dict[str, Any]: ...
    @classmethod
    def construct_dict(cls, **kwargs) -> Dict[str, Any]: ...

class OnlineStoreSecurityConfig(Config):
    kms_key_id: str
    def to_dict(self) -> Dict[str, Any]: ...
    def __init__(self, kms_key_id) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class OnlineStoreConfig(Config):
    enable_online_store: bool
    online_store_security_config: OnlineStoreSecurityConfig
    def to_dict(self) -> Dict[str, Any]: ...
    def __init__(self, enable_online_store, online_store_security_config) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class S3StorageConfig(Config):
    s3_uri: str
    kms_key_id: str
    def to_dict(self) -> Dict[str, Any]: ...
    def __init__(self, s3_uri, kms_key_id) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class DataCatalogConfig(Config):
    table_name: str
    catalog: str
    database: str
    def to_dict(self) -> Dict[str, Any]: ...
    def __init__(self, table_name, catalog, database) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class TableFormatEnum(Enum):
    GLUE: str
    ICEBERG: str

class OfflineStoreConfig(Config):
    s3_storage_config: S3StorageConfig
    disable_glue_table_creation: bool
    data_catalog_config: DataCatalogConfig
    table_format: TableFormatEnum
    def to_dict(self) -> Dict[str, Any]: ...
    def __init__(self, s3_storage_config, disable_glue_table_creation, data_catalog_config, table_format) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class FeatureValue(Config):
    feature_name: str
    value_as_string: str
    def to_dict(self) -> Dict[str, Any]: ...
    def __init__(self, feature_name, value_as_string) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class FeatureParameter(Config):
    key: str
    value: str
    def to_dict(self) -> Dict[str, Any]: ...
    def __init__(self, key, value) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class ResourceEnum(Enum):
    FEATURE_GROUP: str
    FEATURE_METADATA: str

class SearchOperatorEnum(Enum):
    AND: str
    OR: str

class SortOrderEnum(Enum):
    ASCENDING: str
    DESCENDING: str

class FilterOperatorEnum(Enum):
    EQUALS: str
    NOT_EQUALS: str
    GREATER_THAN: str
    GREATER_THAN_OR_EQUAL_TO: str
    LESS_THAN: str
    LESS_THAN_OR_EQUAL_TO: str
    CONTAINS: str
    EXISTS: str
    NOT_EXISTS: str
    IN: str

class Filter(Config):
    name: str
    value: str
    operator: FilterOperatorEnum
    def to_dict(self) -> Dict[str, Any]: ...
    def __init__(self, name, value, operator) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class Identifier(Config):
    feature_group_name: str
    record_identifiers_value_as_string: List[str]
    feature_names: List[str]
    def to_dict(self) -> Dict[str, Any]: ...
    def __init__(self, feature_group_name, record_identifiers_value_as_string, feature_names) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class DeletionModeEnum(Enum):
    SOFT_DELETE: str
    HARD_DELETE: str
