from _typeshed import Incomplete
from typing import List, Sequence, Set, Union

from sagemaker.workflow.entities import Entity, RequestType as RequestType
from sagemaker.workflow.pipeline_context import _StepArguments
from sagemaker.workflow.step_collections import StepCollection

logger: Incomplete
BUF_SIZE: int

def list_to_request(entities: Sequence[Union[Entity, "StepCollection"]]) -> List[RequestType]: ...
def build_steps(steps: Sequence[Entity], pipeline_name: str): ...
def get_code_hash(step: Entity) -> str: ...
def get_processing_dependencies(dependency_args: List[List[str]]) -> List[str]: ...
def get_processing_code_hash(code: str, source_dir: str, dependencies: List[str]) -> str: ...
def get_training_code_hash(entry_point: str, source_dir: str, dependencies: List[str]) -> str: ...
def get_config_hash(step: Entity): ...
def hash_object(obj) -> str: ...
def hash_file(path: str) -> str: ...
def hash_files_or_dirs(paths: List[str]) -> str: ...
def validate_step_args_input(step_args: _StepArguments, expected_caller: Set[str], error_message: str): ...
def override_pipeline_parameter_var(func): ...
def execute_job_functions(step_args: _StepArguments): ...
