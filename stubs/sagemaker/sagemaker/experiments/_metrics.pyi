from _typeshed import Incomplete

from sagemaker.session import Session

METRICS_DIR: Incomplete
METRIC_TS_LOWER_BOUND_TO_NOW: int
METRIC_TS_UPPER_BOUND_FROM_NOW: int
BATCH_SIZE: int
logger: Incomplete

class _RawMetricData:
    MetricName: Incomplete
    Value: Incomplete
    Timestamp: Incomplete
    Step: Incomplete
    def __init__(self, metric_name, value, timestamp: Incomplete | None = None, step: Incomplete | None = None) -> None: ...
    def to_record(self): ...
    def to_raw_metric_data(self): ...

class _MetricsManager:
    sink: Incomplete
    def __init__(self, trial_component_name: str, sagemaker_session: Session, sink: Incomplete | None = None) -> None: ...
    def log_metric(self, metric_name, value, timestamp: Incomplete | None = None, step: Incomplete | None = None) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, exc_traceback) -> None: ...
    def close(self) -> None: ...

class _SyncMetricsSink:
    def __init__(self, trial_component_name, metrics_client) -> None: ...
    def log_metric(self, metric_data) -> None: ...
    def close(self) -> None: ...

class _MetricQueue:
    def __init__(self, trial_component_name, metric_name, metrics_client) -> None: ...
    def log_metric(self, metric_data) -> None: ...
    def close(self) -> None: ...
    def is_active(self): ...

class _AsyncMetricsSink:
    def __init__(self, trial_component_name, metrics_client) -> None: ...
    def log_metric(self, metric_data) -> None: ...
    def close(self): ...
