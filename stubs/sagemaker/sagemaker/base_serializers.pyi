import abc
from _typeshed import Incomplete

class BaseSerializer(abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def serialize(self, data): ...
    @property
    @abc.abstractmethod
    def CONTENT_TYPE(self): ...

class SimpleBaseSerializer:
    content_type: Incomplete
    def __init__(self, content_type: str = "application/json") -> None: ...
    @property
    def CONTENT_TYPE(self): ...

class CSVSerializer(SimpleBaseSerializer):
    def __init__(self, content_type: str = "text/csv") -> None: ...
    def serialize(self, data): ...

class NumpySerializer(SimpleBaseSerializer):
    dtype: Incomplete
    def __init__(self, dtype: Incomplete | None = None, content_type: str = "application/x-npy") -> None: ...
    def serialize(self, data): ...

class JSONSerializer(SimpleBaseSerializer):
    def serialize(self, data): ...

class IdentitySerializer(SimpleBaseSerializer):
    def __init__(self, content_type: str = "application/octet-stream") -> None: ...
    def serialize(self, data): ...

class JSONLinesSerializer(SimpleBaseSerializer):
    def __init__(self, content_type: str = "application/jsonlines") -> None: ...
    def serialize(self, data): ...

class SparseMatrixSerializer(SimpleBaseSerializer):
    def __init__(self, content_type: str = "application/x-npz") -> None: ...
    def serialize(self, data): ...

class LibSVMSerializer(SimpleBaseSerializer):
    def __init__(self, content_type: str = "text/libsvm") -> None: ...
    def serialize(self, data): ...

class DataSerializer(SimpleBaseSerializer):
    def __init__(self, content_type: str = "file-path/raw-bytes") -> None: ...
    def serialize(self, data): ...
