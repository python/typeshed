import abc
from _typeshed import Incomplete
from abc import abstractmethod
from collections.abc import Generator

def get_data_source_instance(data_source, sagemaker_session): ...
def get_splitter_instance(split_type): ...
def get_batch_strategy_instance(strategy, splitter): ...

class DataSource(metaclass=abc.ABCMeta):
    @abstractmethod
    def get_file_list(self): ...
    @abstractmethod
    def get_root_dir(self): ...

class LocalFileDataSource(DataSource):
    root_path: Incomplete
    def __init__(self, root_path) -> None: ...
    def get_file_list(self): ...
    def get_root_dir(self): ...

class S3DataSource(DataSource):
    files: Incomplete
    def __init__(self, bucket, prefix, sagemaker_session) -> None: ...
    def get_file_list(self): ...
    def get_root_dir(self): ...

class Splitter(metaclass=abc.ABCMeta):
    @abstractmethod
    def split(self, file): ...

class NoneSplitter(Splitter):
    def split(self, filename) -> Generator[Incomplete, None, None]: ...

class LineSplitter(Splitter):
    def split(self, file) -> Generator[Incomplete, None, None]: ...

class RecordIOSplitter(Splitter):
    def split(self, file) -> Generator[Incomplete, None, None]: ...

class BatchStrategy(metaclass=abc.ABCMeta):
    splitter: Incomplete
    def __init__(self, splitter) -> None: ...
    @abstractmethod
    def pad(self, file, size): ...

class MultiRecordStrategy(BatchStrategy):
    def pad(self, file, size: int = 6) -> Generator[Incomplete, None, None]: ...

class SingleRecordStrategy(BatchStrategy):
    def pad(self, file, size: int = 6) -> Generator[Incomplete, None, None]: ...
