import abc
from _typeshed import Incomplete
from collections.abc import Generator
from typing import Any, List, Optional

ECR_URI_PATTERN: str
MAX_BUCKET_PATHS_COUNT: int
S3_PREFIX: str
HTTP_PREFIX: str
HTTPS_PREFIX: str
DEFAULT_SLEEP_TIME_SECONDS: int
WAITING_DOT_NUMBER: int
logger: Incomplete

def name_from_image(image, max_length: int = 63): ...
def name_from_base(base, max_length: int = 63, short: bool = False): ...
def unique_name_from_base(base, max_length: int = 63): ...
def base_name_from_image(image, default_base_name: Incomplete | None = None): ...
def base_from_name(name): ...
def sagemaker_timestamp(): ...
def sagemaker_short_timestamp(): ...
def build_dict(key, value): ...
def get_config_value(key_path, config): ...
def get_nested_value(dictionary: dict, nested_keys: List[str]): ...
def set_nested_value(dictionary: dict, nested_keys: List[str], value_to_set: object): ...
def get_short_version(framework_version): ...
def secondary_training_status_changed(current_job_description, prev_job_description): ...
def secondary_training_status_message(job_description, prev_description): ...
def download_folder(bucket_name, prefix, target, sagemaker_session) -> None: ...
def create_tar_file(source_files, target: Incomplete | None = None): ...
def repack_model(
    inference_script,
    source_directory,
    dependencies,
    model_uri,
    repacked_model_uri,
    sagemaker_session,
    kms_key: Incomplete | None = None,
) -> None: ...
def download_file_from_url(url, dst, sagemaker_session) -> None: ...
def download_file(bucket_name, path, target, sagemaker_session) -> None: ...
def sts_regional_endpoint(region): ...
def retries(max_retry_count, exception_message_prefix, seconds_to_sleep=10) -> Generator[Incomplete, None, None]: ...
def retry_with_backoff(callable_func, num_attempts: int = 8, botocore_client_error_code: Incomplete | None = None): ...

class DeferredError:
    exc: Incomplete
    def __init__(self, exception) -> None: ...
    def __getattr__(self, name) -> None: ...

class DataConfig(abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def fetch_data_config(self): ...

class S3DataConfig(DataConfig):
    bucket_name: Incomplete
    prefix: Incomplete
    sagemaker_session: Incomplete
    def __init__(self, sagemaker_session, bucket_name, prefix) -> None: ...
    def fetch_data_config(self): ...
    def get_data_bucket(self, region_requested: Incomplete | None = None): ...

get_ecr_image_uri_prefix: Incomplete

def update_container_with_inference_params(
    framework: Incomplete | None = None,
    framework_version: Incomplete | None = None,
    nearest_model_name: Incomplete | None = None,
    data_input_configuration: Incomplete | None = None,
    container_def: Incomplete | None = None,
    container_list: Incomplete | None = None,
): ...
def construct_container_object(obj, data_input_configuration, framework, framework_version, nearest_model_name): ...
def pop_out_unused_kwarg(arg_name: str, kwargs: dict, override_val: Optional[str] = None): ...
def to_string(obj: object): ...
def get_module(module_name): ...
def check_and_get_run_experiment_config(experiment_config: Optional[dict] = None) -> dict: ...
def resolve_value_from_config(
    direct_input: Incomplete | None = None,
    config_path: str = None,
    default_value: Incomplete | None = None,
    sagemaker_session: Incomplete | None = None,
    sagemaker_config: dict = None,
): ...
def get_sagemaker_config_value(sagemaker_session, key, sagemaker_config: dict = None): ...
def resolve_class_attribute_from_config(
    clazz: Optional[type],
    instance: Optional[object],
    attribute: str,
    config_path: str,
    default_value: Incomplete | None = None,
    sagemaker_session: Incomplete | None = None,
): ...
def resolve_nested_dict_value_from_config(
    dictionary: dict,
    nested_keys: List[str],
    config_path: str,
    default_value: object = None,
    sagemaker_session: Incomplete | None = None,
): ...
def update_list_of_dicts_with_values_from_config(
    input_list,
    config_key_path,
    required_key_paths: List[str] = None,
    union_key_paths: List[List[str]] = None,
    sagemaker_session: Incomplete | None = None,
): ...
def update_nested_dictionary_with_values_from_config(
    source_dict, config_key_path, sagemaker_session: Incomplete | None = None
) -> dict: ...
def stringify_object(obj: Any) -> str: ...
def volume_size_supported(instance_type: str) -> bool: ...
def instance_supports_kms(instance_type: str) -> bool: ...
