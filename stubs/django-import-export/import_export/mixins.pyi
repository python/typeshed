from _typeshed import Incomplete

from django.views.generic.edit import FormView

from .forms import ExportForm

logger: Incomplete

class BaseImportExportMixin:
    resource_class: Incomplete
    resource_classes: Incomplete
    @property
    def formats(self): ...
    @property
    def export_formats(self): ...
    @property
    def import_formats(self): ...
    def check_resource_classes(self, resource_classes) -> None: ...
    def get_resource_classes(self): ...
    def get_resource_kwargs(self, request, *args, **kwargs): ...
    def get_resource_index(self, form): ...

class BaseImportMixin(BaseImportExportMixin):
    def get_import_resource_classes(self): ...
    def get_import_formats(self): ...
    def get_import_resource_kwargs(self, request, *args, **kwargs): ...
    def choose_import_resource_class(self, form): ...

class BaseExportMixin(BaseImportExportMixin):
    model: Incomplete
    escape_exported_data: bool
    escape_html: bool
    escape_formulae: bool
    @property
    def should_escape_html(self): ...
    @property
    def should_escape_formulae(self): ...
    def get_export_formats(self): ...
    def get_export_resource_classes(self): ...
    def choose_export_resource_class(self, form): ...
    def get_export_resource_kwargs(self, request, *args, **kwargs): ...
    def get_data_for_export(self, request, queryset, *args, **kwargs): ...
    def get_export_filename(self, file_format): ...

class ExportViewMixin(BaseExportMixin):
    form_class = ExportForm
    def get_export_data(self, file_format, queryset, *args, **kwargs): ...
    def get_context_data(self, **kwargs): ...
    def get_form_kwargs(self): ...

class ExportViewFormMixin(ExportViewMixin, FormView):
    def form_valid(self, form): ...
