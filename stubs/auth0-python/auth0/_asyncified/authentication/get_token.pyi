# AUTOGENERATED BY scripts/sync_auth0_python.py
from typing import Any, type_check_only

from .base import _AuthenticationBaseAsync

@type_check_only
class _GetTokenAsync(_AuthenticationBaseAsync):
    async def authorization_code_async(
        self, code: str, redirect_uri: str | None, grant_type: str = "authorization_code"
    ) -> Any: ...
    async def authorization_code_pkce_async(
        self, code_verifier: str, code: str, redirect_uri: str | None, grant_type: str = "authorization_code"
    ) -> Any: ...
    async def client_credentials_async(
        self, audience: str, grant_type: str = "client_credentials", organization: str | None = None
    ) -> Any: ...
    async def login_async(
        self,
        username: str,
        password: str,
        scope: str | None = None,
        realm: str | None = None,
        audience: str | None = None,
        grant_type: str = "http://auth0.com/oauth/grant-type/password-realm",
        forwarded_for: str | None = None,
    ) -> Any: ...
    async def refresh_token_async(self, refresh_token: str, scope: str = "", grant_type: str = "refresh_token") -> Any: ...
    async def passwordless_login_async(self, username: str, otp: str, realm: str, scope: str, audience: str) -> Any: ...
    async def backchannel_login_async(self, auth_req_id: str, grant_type: str = "urn:openid:params:grant-type:ciba") -> Any: ...
    async def access_token_for_connection_async(
        self,
        subject_token_type: str,
        subject_token: str,
        requested_token_type: str,
        connection: str | None = None,
        grant_type: str = "urn:auth0:params:oauth:grant-type:token-exchange:federated-connection-access-token",
    ) -> Any: ...
