# AUTOGENERATED BY scripts/sync_auth0_python.py
from typing import Any, type_check_only

from auth0.management.actions import Actions

@type_check_only
class _ActionsAsync(Actions):
    async def get_actions_async(
        self,
        trigger_id: str | None = None,
        action_name: str | None = None,
        deployed: bool | None = None,
        installed: bool = False,
        page: int | None = None,
        per_page: int | None = None,
    ) -> Any: ...
    async def create_action_async(self, body: dict[str, Any]) -> dict[str, Any]: ...
    async def update_action_async(self, id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    async def get_action_async(self, id: str) -> dict[str, Any]: ...
    async def delete_action_async(self, id: str, force: bool = False) -> Any: ...
    async def get_triggers_async(self) -> dict[str, Any]: ...
    async def get_execution_async(self, id: str) -> dict[str, Any]: ...
    async def get_action_versions_async(
        self, id: str, page: int | None = None, per_page: int | None = None
    ) -> dict[str, Any]: ...
    async def get_trigger_bindings_async(
        self, id: str, page: int | None = None, per_page: int | None = None
    ) -> dict[str, Any]: ...
    async def get_action_version_async(self, action_id: str, version_id: str) -> dict[str, Any]: ...
    async def deploy_action_async(self, id: str) -> dict[str, Any]: ...
    async def rollback_action_version_async(self, action_id: str, version_id: str) -> dict[str, Any]: ...
    async def update_trigger_bindings_async(self, id: str, body: dict[str, Any]) -> dict[str, Any]: ...
