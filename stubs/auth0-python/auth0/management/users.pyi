from ..rest import RestClient as RestClient, RestClientOptions as RestClientOptions
from ..types import TimeoutType as TimeoutType
from _typeshed import Incomplete
from typing import Any

class Users:
    domain: Incomplete
    protocol: Incomplete
    client: Incomplete
    def __init__(self, domain: str, token: str, telemetry: bool = True, timeout: TimeoutType = 5.0, protocol: str = 'https', rest_options: RestClientOptions | None = None) -> None: ...
    def list(self, page: int = 0, per_page: int = 25, sort: str | None = None, connection: str | None = None, q: str | None = None, search_engine: str | None = None, include_totals: bool = True, fields: list[str] | None = None, include_fields: bool = True): ...
    async def list_async(self, page: int = 0, per_page: int = 25, sort: str | None = None, connection: str | None = None, q: str | None = None, search_engine: str | None = None, include_totals: bool = True, fields: list[str] | None = None, include_fields: bool = True): ...
    def create(self, body: dict[str, Any]) -> dict[str, Any]: ...
    async def create_async(self, body: dict[str, Any]) -> dict[str, Any]: ...
    def get(self, id: str, fields: list[str] | None = None, include_fields: bool = True) -> dict[str, Any]: ...
    async def get_async(self, id: str, fields: list[str] | None = None, include_fields: bool = True) -> dict[str, Any]: ...
    def delete(self, id: str) -> Any: ...
    async def delete_async(self, id: str) -> Any: ...
    def update(self, id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    async def update_async(self, id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    def list_organizations(self, id: str, page: int = 0, per_page: int = 25, include_totals: bool = True): ...
    async def list_organizations_async(self, id: str, page: int = 0, per_page: int = 25, include_totals: bool = True): ...
    def list_roles(self, id: str, page: int = 0, per_page: int = 25, include_totals: bool = True): ...
    async def list_roles_async(self, id: str, page: int = 0, per_page: int = 25, include_totals: bool = True): ...
    def remove_roles(self, id: str, roles: list[str]) -> Any: ...
    async def remove_roles_async(self, id: str, roles: list[str]) -> Any: ...
    def add_roles(self, id: str, roles: list[str]) -> dict[str, Any]: ...
    async def add_roles_async(self, id: str, roles: list[str]) -> dict[str, Any]: ...
    def list_permissions(self, id: str, page: int = 0, per_page: int = 25, include_totals: bool = True): ...
    async def list_permissions_async(self, id: str, page: int = 0, per_page: int = 25, include_totals: bool = True): ...
    def remove_permissions(self, id: str, permissions: list[str]) -> Any: ...
    async def remove_permissions_async(self, id: str, permissions: list[str]) -> Any: ...
    def add_permissions(self, id: str, permissions: list[str]) -> dict[str, Any]: ...
    async def add_permissions_async(self, id: str, permissions: list[str]) -> dict[str, Any]: ...
    def delete_multifactor(self, id: str, provider: str) -> Any: ...
    async def delete_multifactor_async(self, id: str, provider: str) -> Any: ...
    def delete_authenticators(self, id: str) -> Any: ...
    async def delete_authenticators_async(self, id: str) -> Any: ...
    def unlink_user_account(self, id: str, provider: str, user_id: str) -> Any: ...
    async def unlink_user_account_async(self, id: str, provider: str, user_id: str) -> Any: ...
    def link_user_account(self, user_id: str, body: dict[str, Any]) -> list[dict[str, Any]]: ...
    async def link_user_account_async(self, user_id: str, body: dict[str, Any]) -> list[dict[str, Any]]: ...
    def regenerate_recovery_code(self, user_id: str) -> dict[str, Any]: ...
    async def regenerate_recovery_code_async(self, user_id: str) -> dict[str, Any]: ...
    def get_guardian_enrollments(self, user_id: str) -> dict[str, Any]: ...
    async def get_guardian_enrollments_async(self, user_id: str) -> dict[str, Any]: ...
    def get_log_events(self, user_id: str, page: int = 0, per_page: int = 50, sort: str | None = None, include_totals: bool = False): ...
    async def get_log_events_async(self, user_id: str, page: int = 0, per_page: int = 50, sort: str | None = None, include_totals: bool = False): ...
    def invalidate_remembered_browsers(self, user_id: str) -> dict[str, Any]: ...
    async def invalidate_remembered_browsers_async(self, user_id: str) -> dict[str, Any]: ...
    def get_authentication_methods(self, user_id: str) -> dict[str, Any]: ...
    async def get_authentication_methods_async(self, user_id: str) -> dict[str, Any]: ...
    def get_authentication_method_by_id(self, user_id: str, authentication_method_id: str) -> dict[str, Any]: ...
    async def get_authentication_method_by_id_async(self, user_id: str, authentication_method_id: str) -> dict[str, Any]: ...
    def create_authentication_method(self, user_id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    async def create_authentication_method_async(self, user_id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    def update_authentication_methods(self, user_id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    async def update_authentication_methods_async(self, user_id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    def update_authentication_method_by_id(self, user_id: str, authentication_method_id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    async def update_authentication_method_by_id_async(self, user_id: str, authentication_method_id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    def delete_authentication_methods(self, user_id: str) -> Any: ...
    async def delete_authentication_methods_async(self, user_id: str) -> Any: ...
    def delete_authentication_method_by_id(self, user_id: str, authentication_method_id: str) -> Any: ...
    async def delete_authentication_method_by_id_async(self, user_id: str, authentication_method_id: str) -> Any: ...
