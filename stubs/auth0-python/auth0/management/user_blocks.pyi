from _typeshed import Incomplete

from ..rest import RestClient as RestClient, RestClientOptions as RestClientOptions
from ..types import TimeoutType as TimeoutType

class UserBlocks:
    domain: Incomplete
    protocol: Incomplete
    client: Incomplete
    def __init__(
        self,
        domain: str,
        token: str,
        telemetry: bool = True,
        timeout: TimeoutType = 5.0,
        protocol: str = "https",
        rest_options: RestClientOptions | None = None,
    ) -> None: ...
    def get_by_identifier(self, identifier: str) -> dict[str, Incomplete]: ...
    async def get_by_identifier_async(self, identifier: str) -> dict[str, Incomplete]: ...
    def delete_by_identifier(self, identifier: str) -> Incomplete: ...
    async def delete_by_identifier_async(self, identifier: str) -> Incomplete: ...
    def get(self, id: str) -> dict[str, Incomplete]: ...
    async def get_async(self, id: str) -> dict[str, Incomplete]: ...
    def delete(self, id: str) -> Incomplete: ...
    async def delete_async(self, id: str) -> Incomplete: ...
