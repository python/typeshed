from ..rest import RestClient as RestClient, RestClientOptions as RestClientOptions
from ..types import TimeoutType as TimeoutType
from _typeshed import Incomplete
from typing import Any

class Roles:
    domain: Incomplete
    protocol: Incomplete
    client: Incomplete
    def __init__(self, domain: str, token: str, telemetry: bool = True, timeout: TimeoutType = 5.0, protocol: str = 'https', rest_options: RestClientOptions | None = None) -> None: ...
    def list(self, page: int = 0, per_page: int = 25, include_totals: bool = True, name_filter: str | None = None): ...
    async def list_async(self, page: int = 0, per_page: int = 25, include_totals: bool = True, name_filter: str | None = None): ...
    def create(self, body: dict[str, Any]) -> dict[str, Any]: ...
    async def create_async(self, body: dict[str, Any]) -> dict[str, Any]: ...
    def get(self, id: str) -> dict[str, Any]: ...
    async def get_async(self, id: str) -> dict[str, Any]: ...
    def delete(self, id: str) -> Any: ...
    async def delete_async(self, id: str) -> Any: ...
    def update(self, id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    async def update_async(self, id: str, body: dict[str, Any]) -> dict[str, Any]: ...
    def list_users(self, id: str, page: int = 0, per_page: int = 25, include_totals: bool = True, from_param: str | None = None, take: int | None = None): ...
    async def list_users_async(self, id: str, page: int = 0, per_page: int = 25, include_totals: bool = True, from_param: str | None = None, take: int | None = None): ...
    def add_users(self, id: str, users: list[str]) -> dict[str, Any]: ...
    async def add_users_async(self, id: str, users: list[str]) -> dict[str, Any]: ...
    def list_permissions(self, id: str, page: int = 0, per_page: int = 25, include_totals: bool = True): ...
    async def list_permissions_async(self, id: str, page: int = 0, per_page: int = 25, include_totals: bool = True): ...
    def remove_permissions(self, id: str, permissions: list[dict[str, str]]) -> Any: ...
    async def remove_permissions_async(self, id: str, permissions: list[dict[str, str]]) -> Any: ...
    def add_permissions(self, id: str, permissions: list[dict[str, str]]) -> dict[str, Any]: ...
    async def add_permissions_async(self, id: str, permissions: list[dict[str, str]]) -> dict[str, Any]: ...
