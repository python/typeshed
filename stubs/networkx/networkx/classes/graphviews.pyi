from _typeshed import Incomplete
from typing import Any, TypeVar, overload

from networkx.classes.digraph import DiGraph
from networkx.classes.graph import Graph, _Node
from networkx.classes.multidigraph import MultiDiGraph
from networkx.classes.multigraph import MultiGraph

_G = TypeVar("_G", bound=Graph[Any])

@overload
def generic_graph_view(G: _G, create_using: None = None) -> _G: ...
@overload
def generic_graph_view(G: Graph[_Node], create_using: type[MultiDiGraph[Incomplete]]) -> MultiDiGraph[_Node]: ...
@overload
def generic_graph_view(G: Graph[_Node], create_using: type[DiGraph[Incomplete]]) -> DiGraph[_Node]: ...
@overload
def generic_graph_view(G: Graph[_Node], create_using: type[MultiGraph[Incomplete]]) -> MultiGraph[_Node]: ...
@overload
def generic_graph_view(G: Graph[_Node], create_using: type[Graph[Incomplete]]) -> Graph[_Node]: ...
def subgraph_view(G, filter_node=..., filter_edge=...): ...
def reverse_view(G): ...
