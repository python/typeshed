from typing import TypeVar

from _typeshed import Incomplete
from networkx.classes.graph import Graph

_T = TypeVar("_T")

def descendants(G: Graph[_T], source: _T) -> set[_T]: ...
def ancestors(G: Graph[_T], source: _T) -> set[_T]: ...
def is_directed_acyclic_graph(G: Incomplete) -> Incomplete: ...
def topological_sort(G: Incomplete) -> None: ...
def lexicographical_topological_sort(
    G: Incomplete, key: Incomplete | None = ...
) -> Incomplete: ...
def all_topological_sorts(G: Incomplete) -> None: ...
def is_aperiodic(G: Incomplete) -> Incomplete: ...
def transitive_closure(G: Incomplete) -> Incomplete: ...
def transitive_reduction(G: Incomplete) -> Incomplete: ...
def antichains(G: Incomplete) -> None: ...
def dag_longest_path(
    G: Incomplete, weight: str = ..., default_weight: int = ...
) -> Incomplete: ...
def dag_longest_path_length(
    G: Incomplete, weight: str = ..., default_weight: int = ...
) -> Incomplete: ...
def dag_to_branching(G: Incomplete) -> Incomplete: ...
