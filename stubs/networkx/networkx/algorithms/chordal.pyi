from collections.abc import Hashable, Iterable

from networkx.classes.graph import Graph, _Node
from networkx.exception import NetworkXException

class NetworkXTreewidthBoundExceeded(NetworkXException): ...

def is_chordal(G: Graph[Hashable]) -> bool: ...
def find_induced_nodes(G: Graph[_Node], s: _Node, t: _Node, treewidth_bound: int = ...) -> set[_Node]: ...
def chordal_graph_cliques(G: Graph[_Node]) -> Iterable[frozenset[_Node]]: ...
def chordal_graph_treewidth(G: Graph[Hashable]) -> int: ...
