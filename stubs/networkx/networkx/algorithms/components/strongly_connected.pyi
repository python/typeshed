from collections.abc import Hashable, Iterable
from typing import TypeVar

from networkx.classes.digraph import DiGraph
from networkx.classes.graph import Graph

_N = TypeVar("_N")

def strongly_connected_components(G: Graph[_N]) -> Iterable[set[_N]]: ...
def kosaraju_strongly_connected_components(G: Graph[_N], source: _N | None = ...) -> Iterable[set[_N]]: ...
def strongly_connected_components_recursive(G: Graph[_N]) -> Iterable[set[_N]]: ...
def number_strongly_connected_components(G: Graph[Hashable]) -> int: ...
def is_strongly_connected(G: Graph[Hashable]) -> bool: ...
def condensation(G: DiGraph[_N], scc: Iterable[set[_N]] | None = ...) -> DiGraph[int]: ...
