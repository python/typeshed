from collections.abc import Iterable
from typing import Any, TypeVar

from networkx.classes.digraph import DiGraph
from networkx.classes.graph import Graph

_N = TypeVar("_N")

def strongly_connected_components(G: Graph[_N]) -> Iterable[set[_N]]: ...
def kosaraju_strongly_connected_components(
    G: Graph[_N], source: _N | None = ...
) -> Iterable[set[_N]]: ...
def strongly_connected_components_recursive(G: Graph[_N]) -> Iterable[set[_N]]: ...
def number_strongly_connected_components(G: Graph[Any]) -> int: ...
def is_strongly_connected(G: Graph[Any]) -> bool: ...
def condensation(
    G: DiGraph[_N], scc: Iterable[set[_N]] | None = ...
) -> DiGraph[int]: ...
