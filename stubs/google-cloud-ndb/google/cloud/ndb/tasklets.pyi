from typing import Any

class Future:
    info: Any = ...
    def __init__(self, info: str = ...) -> None: ...
    def done(self): ...
    def running(self): ...
    def wait(self) -> None: ...
    def check_success(self) -> None: ...
    def set_result(self, result: Any) -> None: ...
    def set_exception(self, exception: Any) -> None: ...
    def result(self): ...
    get_result: Any = ...
    def exception(self): ...
    get_exception: Any = ...
    def get_traceback(self): ...
    def add_done_callback(self, callback: Any) -> None: ...
    def cancel(self) -> None: ...
    def cancelled(self): ...
    @staticmethod
    def wait_any(futures: Any): ...
    @staticmethod
    def wait_all(futures: Any): ...

class _TaskletFuture(Future):
    generator: Any = ...
    context: Any = ...
    waiting_on: Any = ...
    def __init__(self, generator: Any, context: Any, info: str = ...) -> None: ...
    def cancel(self) -> None: ...

class _MultiFuture(Future):
    def __init__(self, dependencies: Any) -> None: ...
    def cancel(self) -> None: ...

def tasklet(wrapped: Any): ...
def wait_any(futures: Any): ...
def wait_all(futures: Any) -> None: ...

class Return(Exception): ...

def sleep(seconds: Any): ...
def add_flow_exception(*args: Any, **kwargs: Any) -> None: ...
def make_context(*args: Any, **kwargs: Any) -> None: ...
def make_default_context(*args: Any, **kwargs: Any) -> None: ...

class QueueFuture:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class ReducingFuture:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class SerialQueueFuture:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

def set_context(*args: Any, **kwargs: Any) -> None: ...
def synctasklet(wrapped: Any): ...
def toplevel(wrapped: Any): ...
