from collections.abc import Generator
from hmac import compare_digest as consteq
from typing import Any

from passlib.utils.compat import JYTHON as JYTHON

sys_bits: Any
unix_crypt_schemes: Any
rounds_cost_values: Any

class SequenceMixin:
    def __getitem__(self, idx): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

def consteq(left, right): ...

str_consteq = consteq

def saslprep(source, param: str = ...): ...
def render_bytes(source, *args): ...
def xor_bytes(left, right): ...
def is_same_codec(left, right): ...
def is_ascii_safe(source): ...
def to_bytes(source, encoding: str = ..., param: str = ..., source_encoding: Any | None = ...): ...
def to_unicode(source, encoding: str = ..., param: str = ...): ...
def to_native_str(source, encoding: str = ..., param: str = ...): ...

has_crypt: bool

def safe_crypt(secret, hash) -> None: ...
def test_crypt(secret, hash): ...

tick = timer
rng: Any

def getrandbytes(rng, count) -> Generator[None, None, Any]: ...
def getrandstr(rng, charset, count) -> Generator[None, None, Any]: ...
def generate_password(size: int = ..., charset=...): ...
def is_crypt_handler(obj): ...
def is_crypt_context(obj): ...
def has_rounds_info(handler): ...
def has_salt_info(handler): ...
