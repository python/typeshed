from collections.abc import Callable, Iterable
from typing import Any, TypeVar

_F = TypeVar("_F", bound=Callable[..., Any])

class FormatChecker:
    checkers: dict[str, tuple[Callable[[Any], bool], Exception | tuple[Exception, ...]]]

    def __init__(self, formats: Iterable[str] | None = ...) -> None: ...
    def checks(self, format: str, raises: Exception | tuple[Exception, ...] = ...) -> Callable[[_F], _F]: ...
    @classmethod
    def cls_checks(cls, format: str, raises: Exception | tuple[Exception, ...] = ...) -> Callable[[_F], _F]: ...
    def check(self, instance: Any, format: str) -> None: ...
    def conforms(self, instance: Any, format: str) -> bool: ...

draft3_format_checker: FormatChecker
draft4_format_checker: FormatChecker
draft6_format_checker: FormatChecker
draft7_format_checker: FormatChecker
draft201909_format_checker: FormatChecker
draft202012_format_checker: FormatChecker

def is_email(instance: Any) -> bool: ...
def is_ipv4(instance: Any) -> bool: ...
def is_ipv6(instance: Any) -> bool: ...

# is_host_name is only defined if fqdn is installed.
def is_host_name(instance: Any) -> bool: ...
def is_idn_host_name(instance: Any) -> bool: ...
def is_uri(instance: Any) -> bool: ...
def is_uri_reference(instance: Any) -> bool: ...
def is_iri(instance: Any) -> bool: ...
def is_iri_reference(instance: Any) -> bool: ...
def is_datetime(instance: Any) -> bool: ...
def is_time(instance: Any) -> bool: ...
def is_regex(instance: Any) -> bool: ...
def is_date(instance: Any) -> bool: ...
def is_draft3_time(instance: Any) -> bool: ...
def is_css_color_code(instance: Any) -> bool: ...
def is_css21_color(instance: Any) -> bool: ...
def is_json_pointer(instance: Any) -> bool: ...
def is_relative_json_pointer(instance: Any) -> bool: ...
def is_uri_template(instance: Any) -> bool: ...

# is_duration is only defined if isoduration is installed.
def is_duration(instance: Any) -> bool: ...
def is_uuid(instance: Any) -> bool: ...
