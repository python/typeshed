from _typeshed import Incomplete
from collections import OrderedDict
from xml.etree.ElementTree import Element

__all__ = ["GraphicsItem"]

class LRU(OrderedDict):
    maxsize: Incomplete
    def __init__(self, maxsize: int = 128, *args, **kwds) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...

class GraphicsItem:
    def __init__(self) -> None: ...
    def getViewWidget(self): ...
    def forgetViewWidget(self) -> None: ...
    def getViewBox(self): ...
    def forgetViewBox(self) -> None: ...
    def deviceTransform(self, viewportTransform=None): ...
    def viewTransform(self): ...
    def getBoundingParents(self): ...
    def viewRect(self): ...
    def pixelVectors(self, direction=None): ...
    def pixelLength(self, direction, ortho: bool = False): ...
    def pixelSize(self): ...
    def pixelWidth(self): ...
    def pixelHeight(self): ...
    def mapToDevice(self, obj): ...
    def mapFromDevice(self, obj): ...
    def mapRectToDevice(self, rect): ...
    def mapRectFromDevice(self, rect): ...
    def mapToView(self, obj): ...
    def mapRectToView(self, obj): ...
    def mapFromView(self, obj): ...
    def mapRectFromView(self, obj): ...
    def pos(self): ...
    def viewPos(self): ...
    def parentItem(self): ...
    def setParentItem(self, parent): ...
    def childItems(self): ...
    def sceneTransform(self): ...
    def transformAngle(self, relativeItem=None): ...
    def changeParent(self) -> None: ...
    def parentChanged(self) -> None: ...
    def viewChanged(self, view, oldView) -> None: ...
    def viewRangeChanged(self) -> None: ...
    def viewTransformChanged(self) -> None: ...
    def informViewBoundsChanged(self) -> None: ...
    def childrenShape(self): ...
    def allChildItems(self, root=None): ...
    def setExportMode(self, export, opts=None) -> None: ...
    def getContextMenus(self, event): ...
    def generateSvg(self, nodes: dict[str, Element]) -> tuple[Element, list[Element]] | None: ...
