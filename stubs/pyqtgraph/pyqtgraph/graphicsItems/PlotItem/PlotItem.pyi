from _typeshed import Incomplete

from ..GraphicsWidget import GraphicsWidget

__all__ = ["PlotItem"]

class PlotItem(GraphicsWidget):
    sigRangeChanged: Incomplete
    sigYRangeChanged: Incomplete
    sigXRangeChanged: Incomplete
    lastFileDir: Incomplete
    autoBtn: Incomplete
    buttonsHidden: bool
    mouseHovering: bool
    layout: Incomplete
    vb: Incomplete
    alpha: float
    autoAlpha: bool
    spectrumMode: bool
    legend: Incomplete
    axes: Incomplete
    titleLabel: Incomplete
    items: Incomplete
    curves: Incomplete
    itemMeta: Incomplete
    dataItems: Incomplete
    paramList: Incomplete
    avgCurves: Incomplete
    avgPen: Incomplete
    avgShadowPen: Incomplete
    ctrl: Incomplete
    ctrlMenu: Incomplete
    stateGroup: Incomplete
    fileDialog: Incomplete
    def __init__(
        self, parent=None, name=None, labels=None, title=None, viewBox=None, axisItems=None, enableMenu: bool = True, **kargs
    ) -> None: ...
    def implements(self, interface=None): ...
    def getViewBox(self): ...
    def setAxisItems(self, axisItems=None) -> None: ...
    def setLogMode(self, x=None, y=None) -> None: ...
    def showGrid(self, x=None, y=None, alpha=None) -> None: ...
    def close(self) -> None: ...
    def registerPlot(self, name) -> None: ...
    def updateGrid(self, *args) -> None: ...
    def viewGeometry(self): ...
    def avgToggled(self, b) -> None: ...
    def avgParamListClicked(self, item) -> None: ...
    def recomputeAverages(self) -> None: ...
    def addAvgCurve(self, curve) -> None: ...
    def autoBtnClicked(self) -> None: ...
    def viewStateChanged(self) -> None: ...
    def addItem(self, item, *args, **kargs) -> None: ...
    def listDataItems(self): ...
    def addLine(self, x=None, y=None, z=None, **kwds): ...
    def removeItem(self, item) -> None: ...
    def clear(self) -> None: ...
    def clearPlots(self) -> None: ...
    def plot(self, *args, **kargs): ...
    def addLegend(self, offset=(30, 30), **kwargs): ...
    def addColorBar(self, image, **kargs): ...
    def multiDataPlot(self, *, x=None, y=None, constKwargs=None, **kwargs): ...
    def scatterPlot(self, *args, **kargs): ...
    def replot(self) -> None: ...
    def updateParamList(self) -> None: ...
    def writeSvg(self, fileName=None) -> None: ...
    def writeImage(self, fileName=None) -> None: ...
    def writeCsv(self, fileName=None) -> None: ...
    def saveState(self): ...
    def restoreState(self, state) -> None: ...
    def widgetGroupInterface(self): ...
    def updateSpectrumMode(self, b=None) -> None: ...
    def updateLogMode(self) -> None: ...
    def updateDerivativeMode(self) -> None: ...
    def updatePhasemapMode(self) -> None: ...
    def setDownsampling(self, ds=None, auto=None, mode=None) -> None: ...
    def updateDownsampling(self) -> None: ...
    def downsampleMode(self): ...
    def setClipToView(self, clip) -> None: ...
    def clipToViewMode(self): ...
    def updateDecimation(self) -> None: ...
    def updateAlpha(self, *args) -> None: ...
    def alphaState(self): ...
    def pointMode(self): ...
    def resizeEvent(self, ev) -> None: ...
    def getMenu(self): ...
    def getContextMenus(self, event): ...
    def setMenuEnabled(self, enableMenu: bool = True, enableViewBoxMenu: str = "same") -> None: ...
    def menuEnabled(self): ...
    def setContextMenuActionVisible(self, name: str, visible: bool) -> None: ...
    def hoverEvent(self, ev) -> None: ...
    def getLabel(self, key) -> None: ...
    def getScale(self, key): ...
    def getAxis(self, name): ...
    def setLabel(self, axis, text=None, units=None, unitPrefix=None, **args) -> None: ...
    def setLabels(self, **kwds) -> None: ...
    def showLabel(self, axis, show: bool = True) -> None: ...
    def setTitle(self, title=None, **args) -> None: ...
    def showAxis(self, axis, show: bool = True) -> None: ...
    def hideAxis(self, axis) -> None: ...
    def showAxes(self, selection, showValues: bool = True, size: bool = False) -> None: ...
    def hideButtons(self) -> None: ...
    def showButtons(self) -> None: ...
    def updateButtons(self) -> None: ...
    def setExportMode(self, export, opts=None) -> None: ...
    # Inherited from ViewBox:
    def register(self, name): ...
    def unregister(self) -> None: ...
    def setMouseEnabled(self, x=None, y=None) -> None: ...
    def viewRange(self): ...
    def viewRect(self): ...
    def setRange(
        self, rect=None, xRange=None, yRange=None, padding=None, update: bool = True, disableAutoRange: bool = True
    ) -> None: ...
    def setYRange(self, min, max, padding=None, update: bool = True) -> None: ...
    def setXRange(self, min, max, padding=None, update: bool = True) -> None: ...
    def autoRange(self, padding=None, items=None, item=None) -> None: ...
    def setLimits(self, **kwds) -> None: ...
    def enableAutoRange(self, axis=None, enable: bool = True, x=None, y=None) -> None: ...
    def disableAutoRange(self, axis=None) -> None: ...
    def setAutoPan(self, x=None, y=None) -> None: ...
    def setAutoVisible(self, x=None, y=None) -> None: ...
    def setXLink(self, view) -> None: ...
    def setYLink(self, view) -> None: ...
    def invertY(self, b: bool = True) -> None: ...
    def invertX(self, b: bool = True) -> None: ...
    def setDefaultPadding(self, padding: float = 0.02) -> None: ...
    def setAspectLocked(self, lock: bool = True, ratio: int = 1) -> None: ...
