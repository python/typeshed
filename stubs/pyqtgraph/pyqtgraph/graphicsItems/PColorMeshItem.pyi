from _typeshed import Incomplete

from .GraphicsObject import GraphicsObject

__all__ = ["PColorMeshItem"]

class QuadInstances:
    nrows: int
    ncols: int
    pointsarray: Incomplete
    def __init__(self) -> None: ...
    polys: Incomplete
    def resize(self, nrows, ncols) -> None: ...
    def ndarray(self): ...
    def instances(self): ...

class PColorMeshItem(GraphicsObject):
    sigLevelsChanged: Incomplete
    qpicture: Incomplete
    x: Incomplete
    y: Incomplete
    z: Incomplete
    edgecolors: Incomplete
    antialiasing: Incomplete
    levels: Incomplete
    cmap: Incomplete
    lut_qcolor: Incomplete
    quads: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def setData(self, *args, **kwargs) -> None: ...
    def setLevels(self, levels, update: bool = True) -> None: ...
    def getLevels(self): ...
    def setLookupTable(self, lut, update: bool = True) -> None: ...
    def getColorMap(self): ...
    def setColorMap(self, cmap) -> None: ...
    def enableAutoLevels(self) -> None: ...
    def disableAutoLevels(self) -> None: ...
    def paint(self, p, *args) -> None: ...
    def width(self): ...
    def height(self): ...
    def dataBounds(self, ax, frac: float = 1.0, orthoRange=None): ...
    def pixelPadding(self): ...
    def boundingRect(self): ...
