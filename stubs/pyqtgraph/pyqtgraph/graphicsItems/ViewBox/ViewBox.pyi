from _typeshed import Incomplete

from ..GraphicsWidget import GraphicsWidget
from ..ItemGroup import ItemGroup

__all__ = ["ViewBox"]

class WeakList:
    def __init__(self) -> None: ...
    def append(self, obj) -> None: ...
    def __iter__(self): ...

class ChildGroup(ItemGroup):
    itemsChangedListeners: Incomplete
    def __init__(self, parent) -> None: ...
    def itemChange(self, change, value): ...

class ViewBox(GraphicsWidget):
    sigYRangeChanged: Incomplete
    sigXRangeChanged: Incomplete
    sigRangeChangedManually: Incomplete
    sigRangeChanged: Incomplete
    sigStateChanged: Incomplete
    sigTransformChanged: Incomplete
    sigResized: Incomplete
    PanMode: int
    RectMode: int
    XAxis: int
    YAxis: int
    XYAxes: int
    NamedViews: Incomplete
    AllViews: Incomplete
    name: Incomplete
    linksBlocked: bool
    addedItems: Incomplete
    state: Incomplete
    locateGroup: Incomplete
    childGroup: Incomplete
    background: Incomplete
    border: Incomplete
    borderRect: Incomplete
    target: Incomplete
    axHistory: Incomplete
    axHistoryPointer: int
    menu: Incomplete
    def __init__(
        self,
        parent=None,
        border=None,
        lockAspect: bool = False,
        enableMouse: bool = True,
        invertY: bool = False,
        enableMenu: bool = True,
        name=None,
        invertX: bool = False,
        defaultPadding: float = 0.02,
    ) -> None: ...
    @property
    def rbScaleBox(self): ...
    @rbScaleBox.setter
    def rbScaleBox(self, scaleBox) -> None: ...
    def getAspectRatio(self): ...
    def register(self, name): ...
    def unregister(self) -> None: ...
    def close(self) -> None: ...
    def implements(self, interface): ...
    def itemChange(self, change, value): ...
    def prepareForPaint(self) -> None: ...
    def getState(self, copy: bool = True): ...
    def setState(self, state) -> None: ...
    def setBackgroundColor(self, color) -> None: ...
    def setMouseMode(self, mode) -> None: ...
    def setLeftButtonAction(self, mode: str = "rect") -> None: ...
    def innerSceneItem(self): ...
    def setMouseEnabled(self, x=None, y=None) -> None: ...
    def mouseEnabled(self): ...
    def setMenuEnabled(self, enableMenu: bool = True) -> None: ...
    def menuEnabled(self): ...
    def addItem(self, item, ignoreBounds: bool = False) -> None: ...
    def removeItem(self, item) -> None: ...
    def clear(self) -> None: ...
    def resizeEvent(self, ev) -> None: ...
    def boundingRect(self): ...
    def viewRange(self): ...
    def viewRect(self): ...
    def targetRange(self): ...
    def targetRect(self): ...
    def setRange(
        self, rect=None, xRange=None, yRange=None, padding=None, update: bool = True, disableAutoRange: bool = True
    ) -> None: ...
    def setYRange(self, min, max, padding=None, update: bool = True) -> None: ...
    def setXRange(self, min, max, padding=None, update: bool = True) -> None: ...
    def autoRange(self, padding=None, items=None, item=None) -> None: ...
    def suggestPadding(self, axis): ...
    def setLimits(self, **kwds) -> None: ...
    def scaleBy(self, s=None, center=None, x=None, y=None) -> None: ...
    def translateBy(self, t=None, x=None, y=None) -> None: ...
    def enableAutoRange(self, axis=None, enable: bool = True, x=None, y=None) -> None: ...
    def disableAutoRange(self, axis=None) -> None: ...
    def autoRangeEnabled(self): ...
    def setAutoPan(self, x=None, y=None) -> None: ...
    def setAutoVisible(self, x=None, y=None) -> None: ...
    def updateAutoRange(self) -> None: ...
    def setXLink(self, view) -> None: ...
    def setYLink(self, view) -> None: ...
    def setLogMode(self, axis, logMode) -> None: ...
    def linkView(self, axis, view) -> None: ...
    def blockLink(self, b) -> None: ...
    def linkedXChanged(self) -> None: ...
    def linkedYChanged(self) -> None: ...
    def linkedView(self, ax): ...
    def linkedViewChanged(self, view, axis) -> None: ...
    def screenGeometry(self): ...
    def itemsChanged(self) -> None: ...
    def itemBoundsChanged(self, item) -> None: ...
    def invertY(self, b: bool = True) -> None: ...
    def yInverted(self): ...
    def invertX(self, b: bool = True) -> None: ...
    def xInverted(self): ...
    def setBorder(self, *args, **kwds) -> None: ...
    def setDefaultPadding(self, padding: float = 0.02) -> None: ...
    def setAspectLocked(self, lock: bool = True, ratio: int = 1) -> None: ...
    def childTransform(self): ...
    def mapToView(self, obj): ...
    def mapFromView(self, obj): ...
    def mapSceneToView(self, obj): ...
    def mapViewToScene(self, obj): ...
    def mapFromItemToView(self, item, obj): ...
    def mapFromViewToItem(self, item, obj): ...
    def mapViewToDevice(self, obj): ...
    def mapDeviceToView(self, obj): ...
    def viewPixelSize(self): ...
    def itemBoundingRect(self, item): ...
    def wheelEvent(self, ev, axis=None) -> None: ...
    def mouseClickEvent(self, ev) -> None: ...
    def raiseContextMenu(self, ev) -> None: ...
    def getMenu(self, ev): ...
    def getContextMenus(self, event): ...
    def mouseDragEvent(self, ev, axis=None) -> None: ...
    def keyPressEvent(self, ev) -> None: ...
    def scaleHistory(self, d) -> None: ...
    def updateScaleBox(self, p1, p2) -> None: ...
    def showAxRect(self, ax, **kwargs) -> None: ...
    def allChildren(self, item=None): ...
    def childrenBounds(self, frac=None, orthoRange=(None, None), items=None): ...
    def childrenBoundingRect(self, *args, **kwds): ...
    def updateViewRange(self, forceX: bool = False, forceY: bool = False) -> None: ...
    def updateMatrix(self, changed=None) -> None: ...
    def paint(self, p, opt, widget) -> None: ...
    def updateBackground(self) -> None: ...
    def updateViewLists(self): ...
    @staticmethod
    def updateAllViewLists() -> None: ...
    @staticmethod
    def forgetView(vid, name) -> None: ...
    @staticmethod
    def quit() -> None: ...
    def locate(self, item, timeout: float = 3.0, children: bool = False) -> None: ...
    def clearLocate(self) -> None: ...
