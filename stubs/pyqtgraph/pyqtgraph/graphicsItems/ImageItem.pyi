from _typeshed import Incomplete

from .GraphicsObject import GraphicsObject

__all__ = ["ImageItem"]

class ImageItem(GraphicsObject):
    sigImageChanged: Incomplete
    sigRemoveRequested: Incomplete
    menu: Incomplete
    image: Incomplete
    qimage: Incomplete
    paintMode: Incomplete
    levels: Incomplete
    lut: Incomplete
    autoDownsample: bool
    axisOrder: Incomplete
    drawKernel: Incomplete
    border: Incomplete
    removable: bool
    def __init__(self, image=None, **kargs) -> None: ...
    def setCompositionMode(self, mode) -> None: ...
    def setBorder(self, b) -> None: ...
    def width(self): ...
    def height(self): ...
    def channels(self): ...
    def boundingRect(self): ...
    def setLevels(self, levels, update: bool = True) -> None: ...
    def getLevels(self): ...
    def setColorMap(self, colorMap) -> None: ...
    def getColorMap(self): ...
    def setLookupTable(self, lut, update: bool = True) -> None: ...
    def setAutoDownsample(self, active: bool = True) -> None: ...
    def setOpts(self, update: bool = True, **kargs) -> None: ...
    def setRect(self, *args) -> None: ...
    def clear(self) -> None: ...
    def setImage(self, image=None, autoLevels=None, **kargs) -> None: ...
    def dataTransform(self): ...
    def inverseDataTransform(self): ...
    def mapToData(self, obj): ...
    def mapFromData(self, obj): ...
    def quickMinMax(self, targetSize: float = 1000000.0): ...
    def updateImage(self, *args, **kargs): ...
    def render(self) -> None: ...
    def paint(self, p, *args) -> None: ...
    def save(self, fileName, *args) -> None: ...
    def getHistogram(
        self,
        bins: str = "auto",
        step: str = "auto",
        perChannel: bool = False,
        targetImageSize: int = 200,
        targetHistogramSize: int = 500,
        **kwds,
    ): ...
    def setPxMode(self, b) -> None: ...
    def setScaledMode(self) -> None: ...
    def getPixmap(self): ...
    def pixelSize(self): ...
    def viewTransformChanged(self) -> None: ...
    def mouseDragEvent(self, ev) -> None: ...
    def mouseClickEvent(self, ev) -> None: ...
    def raiseContextMenu(self, ev): ...
    def getMenu(self): ...
    def hoverEvent(self, ev) -> None: ...
    def tabletEvent(self, ev) -> None: ...
    def drawAt(self, pos, ev=None) -> None: ...
    drawKernelCenter: Incomplete
    drawMode: Incomplete
    drawMask: Incomplete
    def setDrawKernel(self, kernel=None, mask=None, center=(0, 0), mode: str = "set") -> None: ...
    removeTimer: Incomplete
    def removeClicked(self) -> None: ...
    def emitRemoveRequested(self) -> None: ...
