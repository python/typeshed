from _typeshed import Incomplete

from .GraphicsWidget import GraphicsWidget
from .GraphicsWidgetAnchor import GraphicsWidgetAnchor

__all__ = ["LegendItem", "ItemSample"]

class LegendItem(GraphicsWidgetAnchor, GraphicsWidget):
    layout: Incomplete
    items: Incomplete
    size: Incomplete
    frame: Incomplete
    columnCount: Incomplete
    rowCount: int
    sampleType: Incomplete
    opts: Incomplete
    def __init__(
        self,
        size=None,
        offset=None,
        horSpacing: int = 25,
        verSpacing: int = 0,
        pen=None,
        brush=None,
        labelTextColor=None,
        frame: bool = True,
        labelTextSize: str = "9pt",
        colCount: int = 1,
        sampleType=None,
        **kwargs,
    ) -> None: ...
    def setSampleType(self, sample) -> None: ...
    def offset(self): ...
    def setOffset(self, offset) -> None: ...
    def pen(self): ...
    def setPen(self, *args, **kargs) -> None: ...
    def brush(self): ...
    def setBrush(self, *args, **kargs) -> None: ...
    def labelTextColor(self): ...
    def setLabelTextColor(self, *args, **kargs) -> None: ...
    def labelTextSize(self): ...
    def setLabelTextSize(self, size) -> None: ...
    def setParentItem(self, p): ...
    def addItem(self, item, name) -> None: ...
    def setColumnCount(self, columnCount) -> None: ...
    def getLabel(self, plotItem): ...
    def removeItem(self, item) -> None: ...
    def clear(self) -> None: ...
    def updateSize(self) -> None: ...
    def boundingRect(self): ...
    def paint(self, p, *args) -> None: ...
    def hoverEvent(self, ev) -> None: ...
    def mouseDragEvent(self, ev) -> None: ...

class ItemSample(GraphicsWidget):
    item: Incomplete
    def __init__(self, item) -> None: ...
    def boundingRect(self): ...
    def paint(self, p, *args) -> None: ...
    def mouseClickEvent(self, event) -> None: ...
