from _typeshed import Incomplete

from ..Qt import QtWidgets
from .GraphicsObject import GraphicsObject
from .UIGraphicsItem import UIGraphicsItem

__all__ = [
    "ROI",
    "TestROI",
    "RectROI",
    "EllipseROI",
    "CircleROI",
    "LineROI",
    "MultiLineROI",
    "MultiRectROI",
    "LineSegmentROI",
    "PolyLineROI",
    "CrosshairROI",
    "TriangleROI",
]

class ROI(GraphicsObject):
    sigRegionChangeFinished: Incomplete
    sigRegionChangeStarted: Incomplete
    sigRegionChanged: Incomplete
    sigHoverEvent: Incomplete
    sigClicked: Incomplete
    sigRemoveRequested: Incomplete
    aspectLocked: Incomplete
    translatable: Incomplete
    rotatable: Incomplete
    resizable: Incomplete
    removable: Incomplete
    menu: Incomplete
    freeHandleMoved: bool
    mouseHovering: bool
    hoverPen: Incomplete
    handlePen: Incomplete
    handleHoverPen: Incomplete
    handles: Incomplete
    state: Incomplete
    lastState: Incomplete
    isMoving: bool
    handleSize: int
    invertible: Incomplete
    maxBounds: Incomplete
    snapSize: Incomplete
    translateSnap: Incomplete
    rotateSnap: Incomplete
    rotateSnapAngle: float
    scaleSnap: Incomplete
    scaleSnapSize: Incomplete
    mouseDragHandler: Incomplete
    def __init__(
        self,
        pos,
        size=...,
        angle: float = 0.0,
        invertible: bool = False,
        maxBounds=None,
        snapSize: float = 1.0,
        scaleSnap: bool = False,
        translateSnap: bool = False,
        rotateSnap: bool = False,
        parent=None,
        pen=None,
        hoverPen=None,
        handlePen=None,
        handleHoverPen=None,
        movable: bool = True,
        rotatable: bool = True,
        resizable: bool = True,
        removable: bool = False,
        aspectLocked: bool = False,
        antialias: bool = True,
    ) -> None: ...
    def getState(self): ...
    def stateCopy(self): ...
    def saveState(self): ...
    def setState(self, state, update: bool = True) -> None: ...
    def setZValue(self, z) -> None: ...
    def parentBounds(self): ...
    pen: Incomplete
    currentPen: Incomplete
    def setPen(self, *args, **kwargs) -> None: ...
    def size(self): ...
    def pos(self): ...
    def angle(self): ...
    def setPos(self, pos, y=None, update: bool = True, finish: bool = True) -> None: ...
    def setSize(
        self, size, center=None, centerLocal=None, snap: bool = False, update: bool = True, finish: bool = True
    ) -> None: ...
    def setAngle(
        self, angle, center=None, centerLocal=None, snap: bool = False, update: bool = True, finish: bool = True
    ) -> None: ...
    def scale(self, s, center=None, centerLocal=None, snap: bool = False, update: bool = True, finish: bool = True) -> None: ...
    def translate(self, *args, **kargs) -> None: ...
    def rotate(self, angle, center=None, snap: bool = False, update: bool = True, finish: bool = True) -> None: ...
    preMoveState: Incomplete
    def handleMoveStarted(self) -> None: ...
    def addTranslateHandle(self, pos, axes=None, item=None, name=None, index=None): ...
    def addFreeHandle(self, pos=None, axes=None, item=None, name=None, index=None): ...
    def addScaleHandle(self, pos, center, axes=None, item=None, name=None, lockAspect: bool = False, index=None): ...
    def addRotateHandle(self, pos, center, item=None, name=None, index=None): ...
    def addScaleRotateHandle(self, pos, center, item=None, name=None, index=None): ...
    def addRotateFreeHandle(self, pos, center, axes=None, item=None, name=None, index=None): ...
    def addHandle(self, info, index=None): ...
    def indexOfHandle(self, handle): ...
    def removeHandle(self, handle) -> None: ...
    def replaceHandle(self, oldHandle, newHandle) -> None: ...
    def checkRemoveHandle(self, handle): ...
    def getLocalHandlePositions(self, index=None): ...
    def getSceneHandlePositions(self, index=None): ...
    def getHandles(self): ...
    def mapSceneToParent(self, pt): ...
    def setSelected(self, s) -> None: ...
    def hoverEvent(self, ev) -> None: ...
    def setMouseHover(self, hover) -> None: ...
    def contextMenuEnabled(self): ...
    def raiseContextMenu(self, ev) -> None: ...
    def getMenu(self): ...
    def removeClicked(self) -> None: ...
    def mouseDragEvent(self, ev) -> None: ...
    def mouseClickEvent(self, ev) -> None: ...
    def cancelMove(self) -> None: ...
    def checkPointMove(self, handle, pos, modifiers): ...
    def movePoint(self, handle, pos, modifiers=None, finish: bool = True, coords: str = "parent") -> None: ...
    def stateChanged(self, finish: bool = True) -> None: ...
    def stateChangeFinished(self) -> None: ...
    def stateRect(self, state): ...
    def getSnapPosition(self, pos, snap=None): ...
    def boundingRect(self): ...
    def paint(self, p, opt, widget) -> None: ...
    def getArraySlice(self, data, img, axes=(0, 1), returnSlice: bool = True): ...
    def getArrayRegion(self, data, img, axes=(0, 1), returnMappedCoords: bool = False, **kwds): ...
    def getAffineSliceParams(self, data, img, axes=(0, 1), fromBoundingRect: bool = False): ...
    def renderShapeMask(self, width, height): ...
    def getGlobalTransform(self, relativeTo=None): ...
    def applyGlobalTransform(self, tr) -> None: ...

class Handle(UIGraphicsItem):
    types: Incomplete
    sigClicked: Incomplete
    sigRemoveRequested: Incomplete
    rois: Incomplete
    radius: Incomplete
    typ: Incomplete
    pen: Incomplete
    hoverPen: Incomplete
    currentPen: Incomplete
    isMoving: bool
    menu: Incomplete
    deletable: Incomplete
    def __init__(
        self,
        radius,
        typ=None,
        pen=(200, 200, 220),
        hoverPen=(255, 255, 0),
        parent=None,
        deletable: bool = False,
        antialias: bool = True,
    ) -> None: ...
    def connectROI(self, roi) -> None: ...
    def disconnectROI(self, roi) -> None: ...
    def setDeletable(self, b) -> None: ...
    def removeClicked(self) -> None: ...
    def hoverEvent(self, ev) -> None: ...
    def mouseClickEvent(self, ev) -> None: ...
    removeAction: Incomplete
    def buildMenu(self): ...
    def getMenu(self): ...
    def raiseContextMenu(self, ev) -> None: ...
    startPos: Incomplete
    cursorOffset: Incomplete
    def mouseDragEvent(self, ev) -> None: ...
    def movePoint(self, pos, modifiers=None, finish: bool = True) -> None: ...
    path: Incomplete
    def buildPath(self) -> None: ...
    def paint(self, p, opt, widget) -> None: ...
    def shape(self): ...
    def boundingRect(self): ...
    def generateShape(self): ...
    def viewTransformChanged(self) -> None: ...

class MouseDragHandler:
    roi: Incomplete
    dragMode: Incomplete
    startState: Incomplete
    snapModifier: Incomplete
    translateModifier: Incomplete
    rotateModifier: Incomplete
    scaleModifier: Incomplete
    rotateSpeed: float
    scaleSpeed: float
    def __init__(self, roi) -> None: ...
    startPos: Incomplete
    cursorOffset: Incomplete
    def mouseDragEvent(self, ev) -> None: ...

class TestROI(ROI):
    def __init__(self, pos, size, **args) -> None: ...

class RectROI(ROI):
    def __init__(self, pos, size, centered: bool = False, sideScalers: bool = False, **args) -> None: ...

class LineROI(ROI):
    def __init__(self, pos1, pos2, width, **args) -> None: ...

class MultiRectROI(QtWidgets.QGraphicsObject):
    sigRegionChangeFinished: Incomplete
    sigRegionChangeStarted: Incomplete
    sigRegionChanged: Incomplete
    pen: Incomplete
    roiArgs: Incomplete
    lines: Incomplete
    def __init__(self, points, width, pen=None, **args) -> None: ...
    def paint(self, *args) -> None: ...
    def boundingRect(self): ...
    def roiChangedEvent(self) -> None: ...
    def roiChangeStartedEvent(self) -> None: ...
    def roiChangeFinishedEvent(self) -> None: ...
    def getHandlePositions(self): ...
    def getArrayRegion(self, arr, img=None, axes=(0, 1), **kwds): ...
    def addSegment(self, pos=(0, 0), scaleHandle: bool = False, connectTo=None) -> None: ...
    def removeSegment(self, index: int = -1) -> None: ...

class MultiLineROI(MultiRectROI):
    def __init__(self, *args, **kwds) -> None: ...

class EllipseROI(ROI):
    path: Incomplete
    def __init__(self, pos, size, **args) -> None: ...
    def paint(self, p, opt, widget) -> None: ...
    def getArrayRegion(self, arr, img=None, axes=(0, 1), returnMappedCoords: bool = False, **kwds): ...
    def shape(self): ...

class CircleROI(EllipseROI):
    def __init__(self, pos, size=None, radius=None, **args) -> None: ...

class PolyLineROI(ROI):
    closed: Incomplete
    segments: Incomplete
    def __init__(self, positions, closed: bool = False, pos=None, **args) -> None: ...
    def setPoints(self, points, closed=None) -> None: ...
    def clearPoints(self) -> None: ...
    def getState(self): ...
    def saveState(self): ...
    def setState(self, state) -> None: ...
    def addSegment(self, h1, h2, index=None) -> None: ...
    def setMouseHover(self, hover) -> None: ...
    def addHandle(self, info, index=None): ...
    def segmentClicked(self, segment, ev=None, pos=None) -> None: ...
    def removeHandle(self, handle, updateSegments: bool = True) -> None: ...
    def removeSegment(self, seg) -> None: ...
    def checkRemoveHandle(self, h): ...
    def paint(self, p, *args) -> None: ...
    def boundingRect(self): ...
    def shape(self): ...
    def getArrayRegion(self, *args, **kwds): ...
    def setPen(self, *args, **kwds) -> None: ...

class LineSegmentROI(ROI):
    def __init__(self, positions=(None, None), pos=None, handles=(None, None), **args) -> None: ...
    @property
    def endpoints(self): ...
    def listPoints(self): ...
    def getState(self): ...
    def saveState(self): ...
    def setState(self, state) -> None: ...
    def paint(self, p, *args) -> None: ...
    def boundingRect(self): ...
    def shape(self): ...
    def getArrayRegion(self, data, img, axes=(0, 1), order: int = 1, returnMappedCoords: bool = False, **kwds): ...

class _PolyLineSegment(LineSegmentROI):
    def __init__(self, *args, **kwds) -> None: ...
    def setParentHover(self, hover) -> None: ...
    def hoverEvent(self, ev): ...

class CrosshairROI(ROI):
    def __init__(self, pos=None, size=None, **kargs) -> None: ...
    def invalidate(self) -> None: ...
    def boundingRect(self): ...
    def shape(self): ...
    def paint(self, p, *args) -> None: ...

class RulerROI(LineSegmentROI):
    def paint(self, p, *args) -> None: ...
    def boundingRect(self): ...

class TriangleROI(ROI):
    poly: Incomplete
    def __init__(self, pos, size, **args) -> None: ...
    def paint(self, p, *args) -> None: ...
    path: Incomplete
    def shape(self): ...
    def getArrayRegion(self, *args, **kwds): ...
