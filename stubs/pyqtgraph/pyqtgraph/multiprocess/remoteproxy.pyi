from _typeshed import Incomplete

class ClosedError(Exception): ...
class NoResultError(Exception): ...
class RemoteExceptionWarning(UserWarning): ...

class RemoteEventHandler:
    handlers: Incomplete
    debug: Incomplete
    conn: Incomplete
    name: Incomplete
    results: Incomplete
    resultLock: Incomplete
    proxies: Incomplete
    proxyLock: Incomplete
    proxyOptions: Incomplete
    optsLock: Incomplete
    nextRequestId: int
    exited: bool
    processLock: Incomplete
    sendLock: Incomplete
    def __init__(self, connection, name, pid, debug: bool = False) -> None: ...
    @classmethod
    def getHandler(cls, pid): ...
    def debugMsg(self, msg, *args) -> None: ...
    def getProxyOption(self, opt): ...
    def setProxyOptions(self, **kwds) -> None: ...
    def processRequests(self): ...
    def handleRequest(self) -> None: ...
    def replyResult(self, reqId, result) -> None: ...
    def replyError(self, reqId, *exc) -> None: ...
    def send(
        self, request, opts=None, reqId=None, callSync: str = "sync", timeout: int = 10, returnType=None, byteData=None, **kwds
    ): ...
    def close(self, callSync: str = "off", noCleanup: bool = False, **kwds) -> None: ...
    def getResult(self, reqId): ...
    def getObjAttr(self, obj, attr, **kwds): ...
    def getObjValue(self, obj, **kwds): ...
    def callObj(self, obj, args, kwds, **opts): ...
    def registerProxy(self, proxy) -> None: ...
    def deleteProxy(self, ref) -> None: ...
    def transfer(self, obj, **kwds): ...
    def autoProxy(self, obj, noProxyTypes): ...

class Request:
    proc: Incomplete
    description: Incomplete
    reqId: Incomplete
    gotResult: bool
    timeout: Incomplete
    def __init__(self, process, reqId, description=None, timeout: int = 10) -> None: ...
    def result(self, block: bool = True, timeout=None): ...
    def hasResult(self): ...

class LocalObjectProxy:
    nextProxyId: int
    proxiedObjects: Incomplete
    @classmethod
    def registerObject(cls, obj): ...
    @classmethod
    def lookupProxyId(cls, pid): ...
    @classmethod
    def releaseProxyId(cls, pid) -> None: ...
    processId: Incomplete
    typeStr: Incomplete
    obj: Incomplete
    opts: Incomplete
    def __init__(self, obj, **opts) -> None: ...
    def __reduce__(self): ...

proxy = LocalObjectProxy

def unpickleObjectProxy(processId, proxyId, typeStr, attributes=None, opts=None): ...

class ObjectProxy:
    def __init__(self, processId, proxyId, typeStr: str = "", parent=None) -> None: ...
    def __reduce__(self): ...
    def __getattr__(self, attr, **kwds): ...
    def __call__(self, *args, **kwds): ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args) -> None: ...
    def __setattr__(self, *args): ...
    def __len__(self, *args) -> int: ...
    def __add__(self, *args): ...
    def __sub__(self, *args): ...
    def __div__(self, *args): ...
    def __truediv__(self, *args): ...
    def __floordiv__(self, *args): ...
    def __mul__(self, *args): ...
    def __pow__(self, *args): ...
    def __iadd__(self, *args): ...
    def __isub__(self, *args): ...
    def __idiv__(self, *args): ...
    def __itruediv__(self, *args): ...
    def __ifloordiv__(self, *args): ...
    def __imul__(self, *args): ...
    def __ipow__(self, *args): ...
    def __rshift__(self, *args): ...
    def __lshift__(self, *args): ...
    def __irshift__(self, *args): ...
    def __ilshift__(self, *args): ...
    def __eq__(self, *args): ...
    def __ne__(self, *args): ...
    def __lt__(self, *args): ...
    def __gt__(self, *args): ...
    def __le__(self, *args): ...
    def __ge__(self, *args): ...
    def __and__(self, *args): ...
    def __or__(self, *args): ...
    def __xor__(self, *args): ...
    def __iand__(self, *args): ...
    def __ior__(self, *args): ...
    def __ixor__(self, *args): ...
    def __mod__(self, *args): ...
    def __radd__(self, *args): ...
    def __rsub__(self, *args): ...
    def __rdiv__(self, *args): ...
    def __rfloordiv__(self, *args): ...
    def __rtruediv__(self, *args): ...
    def __rmul__(self, *args): ...
    def __rpow__(self, *args): ...
    def __rrshift__(self, *args): ...
    def __rlshift__(self, *args): ...
    def __rand__(self, *args): ...
    def __ror__(self, *args): ...
    def __rxor__(self, *args): ...
    def __rmod__(self, *args): ...
    def __hash__(self): ...

class DeferredObjectProxy(ObjectProxy):
    def __init__(self, parentProxy, attribute) -> None: ...
