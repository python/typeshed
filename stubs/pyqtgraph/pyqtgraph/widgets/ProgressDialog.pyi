import types
from _typeshed import Incomplete

from ..Qt import QtWidgets

__all__ = ["ProgressDialog"]

class ProgressDialog(QtWidgets.QProgressDialog):
    allDialogs: Incomplete
    nestedLayout: Incomplete
    nested: Incomplete
    disabled: Incomplete
    busyCursor: Incomplete
    def __init__(
        self,
        labelText,
        minimum: int = 0,
        maximum: int = 100,
        cancelText: str = "Cancel",
        parent=None,
        wait: int = 250,
        busyCursor: bool = False,
        disable: bool = False,
        nested: bool = False,
    ) -> None: ...
    def __enter__(self): ...
    def __exit__(
        self, exType: type[BaseException] | None, exValue: BaseException | None, exTrace: types.TracebackType | None
    ) -> None: ...
    def __iadd__(self, val): ...
    def resizeEvent(self, ev): ...
    def setValue(self, val) -> None: ...
    def setLabelText(self, val) -> None: ...
    def setMaximum(self, val) -> None: ...
    def setMinimum(self, val) -> None: ...
    def wasCanceled(self): ...
    def maximum(self): ...
    def minimum(self): ...

class ProgressWidget(QtWidgets.QWidget):
    hidden: bool
    layout: Incomplete
    label: Incomplete
    bar: Incomplete
    def __init__(self, label, bar) -> None: ...
    def eventFilter(self, obj, ev): ...
    def hide(self) -> None: ...
