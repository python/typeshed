from _typeshed import Incomplete

from .. import parametertree as ptree

__all__ = ["ColorMapWidget", "ColorMapParameter"]

class ColorMapWidget(ptree.ParameterTree):
    sigColorMapChanged: Incomplete
    params: Incomplete
    setFields: Incomplete
    map: Incomplete
    def __init__(self, parent=None) -> None: ...
    def mapChanged(self) -> None: ...
    def widgetGroupInterface(self): ...
    def saveState(self): ...
    def restoreState(self, state) -> None: ...
    def addColorMap(self, name): ...

class ColorMapParameter(ptree.types.GroupParameter):
    sigColorMapChanged: Incomplete
    fields: Incomplete
    def __init__(self) -> None: ...
    def mapChanged(self) -> None: ...
    def addNew(self, name): ...
    def fieldNames(self): ...
    def setFields(self, fields) -> None: ...
    def map(self, data, mode: str = "byte"): ...
    def saveState(self): ...
    def restoreState(self, state) -> None: ...

class RangeColorMapItem(ptree.types.ColorMapParameter):
    mapType: str
    fieldName: Incomplete
    def __init__(self, name, opts) -> None: ...
    def map(self, data): ...

class EnumColorMapItem(ptree.types.GroupParameter):
    mapType: str
    fieldName: Incomplete
    def __init__(self, name, opts) -> None: ...
    def map(self, data): ...
