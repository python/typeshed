from _typeshed import Incomplete

from .. import parametertree as ptree

__all__ = ["DataFilterWidget"]

class DataFilterWidget(ptree.ParameterTree):
    sigFilterChanged: Incomplete
    params: Incomplete
    setFields: Incomplete
    generateMask: Incomplete
    filterData: Incomplete
    describe: Incomplete
    def __init__(self) -> None: ...
    def parameters(self): ...
    def addFilter(self, name): ...

class DataFilterParameter(ptree.types.GroupParameter):
    sigFilterChanged: Incomplete
    fields: Incomplete
    def __init__(self) -> None: ...
    def filterChanged(self) -> None: ...
    def addNew(self, name): ...
    def fieldNames(self): ...
    def setFields(self, fields) -> None: ...
    def filterData(self, data): ...
    def generateMask(self, data): ...
    def describe(self): ...

class RangeFilterItem(ptree.types.SimpleParameter):
    fieldName: Incomplete
    units: Incomplete
    def __init__(self, name, opts) -> None: ...
    def generateMask(self, data, mask): ...
    def describe(self): ...
    def updateFilter(self, opts) -> None: ...

class EnumFilterItem(ptree.types.SimpleParameter):
    fieldName: Incomplete
    def __init__(self, name, opts) -> None: ...
    def generateMask(self, data, startMask): ...
    def describe(self): ...
    def updateFilter(self, opts) -> None: ...
    def setEnumVals(self, opts) -> None: ...
