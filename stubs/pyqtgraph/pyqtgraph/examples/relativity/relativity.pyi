from _typeshed import Incomplete

import pyqtgraph as pg
from pyqtgraph.parametertree import types as pTypes
from pyqtgraph.Qt import QtWidgets

class RelativityGUI(QtWidgets.QWidget):
    animations: Incomplete
    animTimer: Incomplete
    animTime: int
    animDt: float
    lastAnimTime: int
    objectGroup: Incomplete
    params: Incomplete
    def __init__(self) -> None: ...
    layout: Incomplete
    splitter: Incomplete
    tree: Incomplete
    splitter2: Incomplete
    worldlinePlots: Incomplete
    animationPlots: Incomplete
    inertWorldlinePlot: Incomplete
    refWorldlinePlot: Incomplete
    inertAnimationPlot: Incomplete
    refAnimationPlot: Incomplete
    def setupGUI(self) -> None: ...
    def recalculate(self) -> None: ...
    def setAnimation(self, a) -> None: ...
    def stepAnimation(self) -> None: ...
    def treeChanged(self, *args) -> None: ...
    def save(self) -> None: ...
    def load(self) -> None: ...
    def loadPreset(self, param, preset) -> None: ...
    def loadState(self, state) -> None: ...

class ObjectGroupParam(pTypes.GroupParameter):
    def __init__(self) -> None: ...
    def addNew(self, typ) -> None: ...

class ClockParam(pTypes.GroupParameter):
    def __init__(self, **kwds) -> None: ...
    def buildClocks(self): ...
    def clockNames(self): ...

class GridParam(pTypes.GroupParameter):
    def __init__(self, **kwds) -> None: ...
    def buildClocks(self): ...
    def clockNames(self): ...

class AccelerationGroup(pTypes.GroupParameter):
    def __init__(self, **kwds) -> None: ...
    def addNew(self) -> None: ...
    def generate(self): ...

class Clock:
    nClocks: int
    pen: Incomplete
    brush: Incomplete
    y0: Incomplete
    x0: Incomplete
    v0: Incomplete
    m0: Incomplete
    t0: Incomplete
    prog: Incomplete
    size: Incomplete
    def __init__(
        self,
        x0: float = 0.0,
        y0: float = 0.0,
        m0: float = 1.0,
        v0: float = 0.0,
        t0: float = 0.0,
        color=None,
        prog=None,
        size: float = 0.5,
    ) -> None: ...
    inertData: Incomplete
    refData: Incomplete
    x: Incomplete
    v: Incomplete
    m: Incomplete
    t: float
    pt: Incomplete
    refx: Incomplete
    refv: Incomplete
    refm: Incomplete
    reft: Incomplete
    def init(self, nPts) -> None: ...
    def recordFrame(self, i) -> None: ...
    def force(self, t=None): ...
    def acceleration(self, t=None): ...
    def accelLimits(self): ...
    def getCurve(self, ref: bool = True): ...

class Simulation:
    clocks: Incomplete
    ref: Incomplete
    duration: Incomplete
    dt: Incomplete
    def __init__(self, clocks, ref, duration, dt) -> None: ...
    @staticmethod
    def hypTStep(dt, v0, x0, tau0, g): ...
    @staticmethod
    def tStep(dt, v0, x0, tau0, g): ...
    @staticmethod
    def tauStep(dtau, v0, x0, t0, g): ...
    @staticmethod
    def hypIntersect(x0r, t0r, vr, x0, t0, v0, g): ...
    def run(self) -> None: ...
    def runInertial(self, nPts) -> None: ...
    def runReference(self, nPts) -> None: ...
    def plot(self, plot) -> None: ...

class Animation(pg.ItemGroup):
    sim: Incomplete
    clocks: Incomplete
    items: Incomplete
    def __init__(self, sim) -> None: ...
    def restart(self) -> None: ...
    def stepTo(self, t) -> None: ...

class ClockItem(pg.ItemGroup):
    size: Incomplete
    item: Incomplete
    hand: Incomplete
    flare: Incomplete
    clock: Incomplete
    i: int
    def __init__(self, clock) -> None: ...
    def spaceline(self): ...
    def stepTo(self, t) -> None: ...
    def reset(self) -> None: ...
