import types
from _typeshed import Incomplete

from ..Qt import QtCore

PARAM_TYPES: Incomplete
PARAM_NAMES: Incomplete

def registerParameterItemType(name, itemCls, parameterCls=None, override: bool = False) -> None: ...
def registerParameterType(name, cls, override: bool = False) -> None: ...
def __reload__(old) -> None: ...

class Parameter(QtCore.QObject):
    sigValueChanged: Incomplete
    sigValueChanging: Incomplete
    sigChildAdded: Incomplete
    sigChildRemoved: Incomplete
    sigRemoved: Incomplete
    sigParentChanged: Incomplete
    sigLimitsChanged: Incomplete
    sigDefaultChanged: Incomplete
    sigNameChanged: Incomplete
    sigOptionsChanged: Incomplete
    sigStateChanged: Incomplete
    sigTreeStateChanged: Incomplete
    sigContextMenu: Incomplete
    @staticmethod
    def create(**opts): ...
    opts: Incomplete
    childs: Incomplete
    names: Incomplete
    items: Incomplete
    treeStateChanges: Incomplete
    blockTreeChangeEmit: int
    def __init__(self, **opts) -> None: ...
    @property
    def itemClass(self): ...
    def name(self): ...
    def title(self): ...
    def contextMenu(self, name) -> None: ...
    def setName(self, name): ...
    def type(self): ...
    def isType(self, typ): ...
    def childPath(self, child): ...
    def setValue(self, value, blockSignal=None): ...
    def hasValue(self): ...
    def value(self): ...
    def getValues(self): ...
    def saveState(self, filter=None): ...
    def restoreState(
        self, state, recursive: bool = True, addChildren: bool = True, removeChildren: bool = True, blockSignals: bool = True
    ) -> None: ...
    def valueModifiedSinceResetToDefault(self): ...
    def defaultValue(self): ...
    def setDefault(self, val, updatePristineValues: bool = False) -> None: ...
    def setToDefault(self) -> None: ...
    def hasDefault(self): ...
    def valueIsDefault(self): ...
    def setLimits(self, limits): ...
    def writable(self): ...
    def setWritable(self, writable: bool = True) -> None: ...
    def readonly(self): ...
    def setReadonly(self, readonly: bool = True) -> None: ...
    def setOpts(self, **opts) -> None: ...
    def emitStateChanged(self, changeDesc, data) -> None: ...
    def makeTreeItem(self, depth): ...
    def addChild(self, child, autoIncrementName=None, existOk: bool = False): ...
    def addChildren(self, children) -> None: ...
    def insertChild(self, pos, child, autoIncrementName=None, existOk: bool = False): ...
    def removeChild(self, child) -> None: ...
    def clearChildren(self) -> None: ...
    def children(self): ...
    def hasChildren(self): ...
    def parentChanged(self, parent) -> None: ...
    def parent(self): ...
    def remove(self) -> None: ...
    def incrementName(self, name): ...
    def __iter__(self): ...
    def __getitem__(self, names): ...
    def __setitem__(self, names, value) -> None: ...
    def keys(self): ...
    def child(self, *names): ...
    def param(self, *names): ...
    def registerItem(self, item) -> None: ...
    def hide(self) -> None: ...
    def show(self, s: bool = True) -> None: ...
    def treeChangeBlocker(self): ...
    def blockTreeChangeSignal(self) -> None: ...
    def unblockTreeChangeSignal(self) -> None: ...
    def treeStateChanged(self, param, changes) -> None: ...
    def emitTreeChanges(self) -> None: ...

class SignalBlocker:
    enterFn: Incomplete
    exitFn: Incomplete
    def __init__(self, enterFn, exitFn) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(
        self, exc_type: type[BaseException] | None, exc_value: BaseException | None, tb: types.TracebackType | None
    ) -> None: ...
