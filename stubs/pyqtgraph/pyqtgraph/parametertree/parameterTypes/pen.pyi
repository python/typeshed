from _typeshed import Incomplete

from . import GroupParameterItem
from .basetypes import GroupParameter

class PenParameterItem(GroupParameterItem):
    defaultBtn: Incomplete
    itemWidget: Incomplete
    penLabel: Incomplete
    def __init__(self, param, depth) -> None: ...
    def optsChanged(self, param, opts) -> None: ...
    def treeWidgetChanged(self) -> None: ...
    defaultClicked: Incomplete
    makeDefaultButton: Incomplete
    def valueChanged(self, param, val) -> None: ...
    def updateDefaultBtn(self) -> None: ...

def cap_first(s: str): ...

class PenParameter(GroupParameter):
    itemClass = PenParameterItem
    pen: Incomplete
    valChangingProxy: Incomplete
    def __init__(self, **opts) -> None: ...
    def setDefault(self, val, **kwargs): ...
    def saveState(self, filter=None): ...
    def restoreState(
        self, state, recursive: bool = True, addChildren: bool = True, removeChildren: bool = True, blockSignals: bool = True
    ): ...
    def setValue(self, value, blockSignal=None): ...
    def applyOptsToPen(self, **opts): ...
    def setOpts(self, **opts): ...
    def mkPen(self, *args, **kwargs): ...
    def penPropertySetter(self, p, value) -> None: ...
    @staticmethod
    def updateFromPen(param, pen) -> None: ...
