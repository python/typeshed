from _typeshed import Incomplete

from . import BoolParameterItem, SimpleParameter
from .basetypes import GroupParameter, GroupParameterItem

class ChecklistParameterItem(GroupParameterItem):
    btnGrp: Incomplete
    def __init__(self, param, depth) -> None: ...
    def treeWidgetChanged(self) -> None: ...
    def selectAllClicked(self) -> None: ...
    def clearAllClicked(self) -> None: ...
    def insertChild(self, pos, item): ...
    def addChild(self, item): ...
    def takeChild(self, i) -> None: ...
    def optsChanged(self, param, opts) -> None: ...
    def expandedChangedEvent(self, expanded) -> None: ...
    def valueChanged(self, param, val) -> None: ...
    def updateDefaultBtn(self) -> None: ...
    makeDefaultButton: Incomplete
    defaultClicked: Incomplete

class RadioParameterItem(BoolParameterItem):
    emitter: Incomplete
    def __init__(self, param, depth) -> None: ...
    hideWidget: bool
    def makeWidget(self): ...
    def maybeSigChanged(self, val) -> None: ...

class BoolOrRadioParameter(SimpleParameter):
    @property
    def itemClass(self): ...

class ChecklistParameter(GroupParameter):
    itemClass = ChecklistParameterItem
    targetValue: Incomplete
    valChangingProxy: Incomplete
    def __init__(self, **opts) -> None: ...
    def childrenValue(self): ...
    def updateLimits(self, _param, limits) -> None: ...
    def optsChanged(self, param, opts) -> None: ...
    def setValue(self, value, blockSignal=None) -> None: ...
    def setToDefault(self) -> None: ...
    def saveState(self, filter=None): ...
    def restoreState(
        self, state, recursive: bool = True, addChildren: bool = True, removeChildren: bool = True, blockSignals: bool = True
    ): ...
