from _typeshed import Incomplete

__all__ = ["ColorMap"]

class ColorMap:
    CLIP: int
    REPEAT: int
    MIRROR: int
    DIVERGING: int
    BYTE: int
    FLOAT: int
    QCOLOR: int
    enumMap: Incomplete
    name: Incomplete
    pos: Incomplete
    color: Incomplete
    mapping_mode: Incomplete
    stopsCache: Incomplete
    def __init__(self, pos, color, mapping=1, mode=None, linearize: bool = False, name: str = "") -> None: ...
    def setMappingMode(self, mapping) -> None: ...
    def __getitem__(self, key): ...
    def linearize(self) -> None: ...
    def reverse(self) -> None: ...
    def getSubset(self, start, span): ...
    def map(self, data, mode=1): ...
    def mapToQColor(self, data): ...
    def mapToByte(self, data): ...
    def mapToFloat(self, data): ...
    def getByIndex(self, idx): ...
    def getGradient(self, p1=None, p2=None): ...
    def getBrush(self, span=(0.0, 1.0), orientation: str = "vertical"): ...
    def getPen(self, span=(0.0, 1.0), orientation: str = "vertical", width: float = 1.0): ...
    def getColors(self, mode=1): ...
    def getStops(self, mode=1): ...
    def getLookupTable(self, start: float = 0.0, stop: float = 1.0, nPts: int = 512, alpha=None, mode=1): ...
    def usesAlpha(self): ...
    def isMapTrivial(self): ...
    def __eq__(self, other): ...
