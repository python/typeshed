from _typeshed import Incomplete

USE_HDF5: bool
HAVE_HDF5: bool

def axis(name=None, cols=None, values=None, units=None): ...

class sliceGenerator:
    def __getitem__(self, arg): ...
    def __getslice__(self, arg): ...

SLICER: Incomplete

class MetaArray:
    version: str
    defaultCompression: Incomplete
    nameTypes: Incomplete
    @staticmethod
    def isNameType(var): ...
    wrapMethods: Incomplete
    def __init__(self, data=None, info=None, dtype=None, file=None, copy: bool = False, **kwargs) -> None: ...
    def checkInfo(self) -> None: ...
    def implements(self, name=None): ...
    def __getitem__(self, ind): ...
    @property
    def ndim(self): ...
    @property
    def shape(self): ...
    @property
    def dtype(self): ...
    def __len__(self) -> int: ...
    def __getslice__(self, *args): ...
    def __setitem__(self, ind, val) -> None: ...
    def __getattr__(self, attr): ...
    def __eq__(self, b): ...
    def __ne__(self, b): ...
    def __sub__(self, b): ...
    def __add__(self, b): ...
    def __mul__(self, b): ...
    def __div__(self, b): ...
    def __truediv__(self, b): ...
    def asarray(self): ...
    def __array__(self, dtype=None): ...
    def axisValues(self, axis): ...
    def xvals(self, axis): ...
    def axisHasValues(self, axis): ...
    def axisHasColumns(self, axis): ...
    def axisUnits(self, axis): ...
    def hasColumn(self, axis, col): ...
    def listColumns(self, axis=None): ...
    def columnName(self, axis, col): ...
    def axisName(self, n): ...
    def columnUnits(self, axis, column): ...
    def rowsort(self, axis, key: int = 0): ...
    def append(self, val, axis): ...
    def extend(self, val, axis): ...
    def infoCopy(self, axis=None): ...
    def copy(self): ...
    def prettyInfo(self): ...
    def axisCollapsingFn(self, fn, axis=None, *args, **kargs): ...
    def mean(self, axis=None, *args, **kargs): ...
    def min(self, axis=None, *args, **kargs): ...
    def max(self, axis=None, *args, **kargs): ...
    def transpose(self, *args): ...
    def readFile(self, filename, **kwargs) -> None: ...
    @staticmethod
    def mapHDF5Array(data, writable: bool = False): ...
    @staticmethod
    def readHDF5Meta(root, mmap: bool = False): ...
    def write(self, fileName, **opts): ...
    def writeMeta(self, fileName) -> None: ...
    def writeHDF5(self, fileName, **opts) -> None: ...
    def writeHDF5Meta(self, root, name, data, **dsOpts) -> None: ...
    def writeMa(self, fileName, appendAxis=None, newFile: bool = False) -> None: ...
    def writeCsv(self, fileName=None): ...
