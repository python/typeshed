import contextlib
from _typeshed import Incomplete
from collections.abc import Generator

from .Qt import QT_LIB as QT_LIB

@contextlib.contextmanager
def open_maybe_console(filename=None) -> Generator[Incomplete]: ...
def ftrace(func): ...

class Tracer:
    count: int
    stack: Incomplete
    def __init__(self) -> None: ...
    def trace(self, frame, event, arg): ...
    def stop(self) -> None: ...
    def start(self) -> None: ...
    def frameInfo(self, fr): ...

def warnOnException(func): ...
def getExc(indent: int = 4, prefix: str = "|  ", skip: int = 1): ...
def printExc(msg: str = "", indent: int = 4, prefix: str = "|") -> None: ...
def printTrace(msg: str = "", indent: int = 4, prefix: str = "|") -> None: ...
def backtrace(skip: int = 0): ...
def formatException(exctype, value, tb, skip: int = 0): ...
def printException(exctype, value, traceback) -> None: ...
def listObjs(regex: str = "Q", typ=None): ...
def findRefPath(startObj, endObj, maxLen: int = 8, restart: bool = True, seen=None, path=None, ignore=None): ...
def objString(obj): ...
def refPathString(chain): ...
def objectSize(obj, ignore=None, verbose: bool = False, depth: int = 0, recursive: bool = False): ...

class GarbageWatcher:
    objs: Incomplete
    allNames: Incomplete
    def __init__(self) -> None: ...
    def add(self, obj, name) -> None: ...
    def __setitem__(self, name, obj) -> None: ...
    def check(self) -> None: ...
    def __getitem__(self, item): ...

class Profiler:
    disable: bool

    class DisabledProfiler:
        def __init__(self, *args, **kwds) -> None: ...
        def __call__(self, *args) -> None: ...
        def finish(self) -> None: ...
        def mark(self, msg=None) -> None: ...

    def __new__(cls, msg=None, disabled: str = "env", delayed: bool = True): ...
    def __call__(self, msg=None) -> None: ...
    def mark(self, msg=None) -> None: ...
    def __del__(self) -> None: ...
    def finish(self, msg=None) -> None: ...
    def flush(self) -> None: ...

def profile(code, name: str = "profile_run", sort: str = "cumulative", num: int = 30): ...
def get_all_objects(): ...
def lookup(oid, objects=None): ...

class ObjTracker:
    allObjs: Incomplete
    startRefs: Incomplete
    startCount: Incomplete
    newRefs: Incomplete
    persistentRefs: Incomplete
    objTypes: Incomplete
    objs: Incomplete
    def __init__(self) -> None: ...
    def findNew(self, regex): ...
    def findPersistent(self, regex): ...
    def start(self) -> None: ...
    def diff(self, **kargs): ...
    def __del__(self) -> None: ...
    @classmethod
    def isObjVar(cls, o): ...
    def collect(self): ...
    def forgetRef(self, ref) -> None: ...
    def rememberRef(self, ref) -> None: ...
    def lookup(self, oid, ref, objs=None): ...
    def report(self, refs, allobjs=None, showIDs: bool = False): ...
    def findTypes(self, refs, regex): ...

def describeObj(obj, depth: int = 4, path=None, ignore=None) -> None: ...
def typeStr(obj): ...
def searchRefs(obj, *args): ...
def allFrameObjs(): ...
def findObj(regex): ...
def listRedundantModules() -> None: ...
def walkQObjectTree(obj, counts=None, verbose: bool = False, depth: int = 0): ...

QObjCache: Incomplete

def qObjectReport(verbose: bool = False) -> None: ...

class PrintDetector:
    stdout: Incomplete
    def __init__(self) -> None: ...
    def remove(self) -> None: ...
    def __del__(self) -> None: ...
    def write(self, x) -> None: ...
    def flush(self) -> None: ...

def listQThreads() -> None: ...
def pretty(data, indent: str = ""): ...

class ThreadTrace:
    interval: Incomplete
    lock: Incomplete
    logFile: Incomplete
    def __init__(self, interval: float = 10.0, logFile=None) -> None: ...
    def stop(self) -> None: ...
    thread: Incomplete
    def start(self, interval=None) -> None: ...
    def run(self) -> None: ...

def threadName(threadId=None): ...

class ThreadColor:
    colors: Incomplete
    lock: Incomplete
    stream: Incomplete
    err: Incomplete
    def __init__(self, stream) -> None: ...
    def write(self, msg) -> None: ...
    def flush(self) -> None: ...
    def color(self): ...

def enableFaulthandler(): ...
