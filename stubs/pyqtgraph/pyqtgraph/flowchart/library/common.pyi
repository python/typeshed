from _typeshed import Incomplete

from ..Node import Node

__all__ = ["CtrlNode", "PlottingCtrlNode", "metaArrayWrapper"]

class CtrlNode(Node):
    sigStateChanged: Incomplete
    def __init__(self, name, ui=None, terminals=None) -> None: ...
    def ctrlWidget(self): ...
    def changed(self) -> None: ...
    def process(self, In, display: bool = True): ...
    def saveState(self): ...
    def restoreState(self, state) -> None: ...
    def hideRow(self, name) -> None: ...
    def showRow(self, name) -> None: ...

class PlottingCtrlNode(CtrlNode):
    plotTerminal: Incomplete
    def __init__(self, name, ui=None, terminals=None) -> None: ...
    def connected(self, term, remote) -> None: ...
    def disconnected(self, term, remote) -> None: ...
    def connectToPlot(self, node) -> None: ...
    def disconnectFromPlot(self, plot) -> None: ...
    def process(self, In, display: bool = True): ...

def metaArrayWrapper(fn): ...
