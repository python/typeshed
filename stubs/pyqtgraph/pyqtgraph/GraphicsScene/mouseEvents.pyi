from _typeshed import Incomplete

__all__ = ["MouseDragEvent", "MouseClickEvent", "HoverEvent"]

class MouseDragEvent:
    start: Incomplete
    finish: Incomplete
    accepted: bool
    currentItem: Incomplete
    acceptedItem: Incomplete
    def __init__(self, moveEvent, pressEvent, lastEvent, start: bool = False, finish: bool = False) -> None: ...
    def accept(self) -> None: ...
    def ignore(self) -> None: ...
    def isAccepted(self): ...
    def scenePos(self): ...
    def screenPos(self): ...
    def buttonDownScenePos(self, btn=None): ...
    def buttonDownScreenPos(self, btn=None): ...
    def lastScenePos(self): ...
    def lastScreenPos(self): ...
    def buttons(self): ...
    def button(self): ...
    def pos(self): ...
    def lastPos(self): ...
    def buttonDownPos(self, btn=None): ...
    def isStart(self): ...
    def isFinish(self): ...
    def modifiers(self): ...

class MouseClickEvent:
    accepted: bool
    currentItem: Incomplete
    acceptedItem: Incomplete
    def __init__(self, pressEvent, double: bool = False) -> None: ...
    def accept(self) -> None: ...
    def ignore(self) -> None: ...
    def isAccepted(self): ...
    def scenePos(self): ...
    def screenPos(self): ...
    def buttons(self): ...
    def button(self): ...
    def double(self): ...
    def pos(self): ...
    def lastPos(self): ...
    def modifiers(self): ...
    def time(self): ...

class HoverEvent:
    enter: bool
    acceptable: Incomplete
    exit: bool
    currentItem: Incomplete
    def __init__(self, moveEvent, acceptable) -> None: ...
    def isEnter(self): ...
    def isExit(self): ...
    def acceptClicks(self, button): ...
    def acceptDrags(self, button): ...
    def scenePos(self): ...
    def screenPos(self): ...
    def lastScenePos(self): ...
    def lastScreenPos(self): ...
    def buttons(self): ...
    def pos(self): ...
    def lastPos(self): ...
    def modifiers(self): ...
    def clickItems(self): ...
    def dragItems(self): ...
