import os
from collections.abc import Callable, Mapping, MutableMapping
from logging import Logger
from typing import Any, TypeVar
from typing_extensions import TypeAlias
from urllib.parse import ParseResult

from .fileaware_mapping import FileAwareMapping

Openable = ...
logger: Logger

class NoValue: ...

# Some type aliases to make our life easier
_Str = str
_Bytes = bytes
_Bool = bool
_Int = int
_Float = float
_List = list
_Tuple = tuple
_Dict = dict

_T = TypeVar("_T")
_Cast: TypeAlias = Callable[[_Str], _T]
_SchemeValue: TypeAlias = _Cast[Any] | tuple[_Cast[Any], Any]
_BooleanTrueStrings: TypeAlias = tuple[str, ...]

class Env:
    ENVIRON: MutableMapping[_Str, _Str]
    NOTSET: NoValue
    BOOLEAN_TRUE_STRINGS: _BooleanTrueStrings
    URL_CLASS = ParseResult
    POSTGRES_FAMILY: _List[_Str]
    DEFAULT_DATABASE_ENV: _Str = "DATABASE_URL"
    DB_SCHEMES: _Dict[_Str, _Str]
    DEFAULT_CACHE_ENV: _Str = "CACHE_URL"
    CACHE_SCHEMES: _Dict[_Str, _Str]
    DEFAULT_EMAIL_ENV: _Str = "EMAIL_URL"
    EMAIL_SCHEMES: _Dict[_Str, _Str]
    DEFAULT_SEARCH_ENV: _Str = "SEARCH_URL"
    SEARCH_SCHEMES: _Dict[_Str, _Str]
    ELASTICSEARCH_FAMILY: _List[_Str]
    CLOUDSQL: _Str
    DEFAULT_CHANNELS_ENV: _Str = "CHANNELS_URL"
    CHANNELS_SCHEMES: _Dict[_Str, _Str]
    smart_cast: _Bool
    escape_proxy: _Bool
    prefix: _Str
    scheme: Mapping[_Str, _SchemeValue]

    def __init__(self, **scheme: _SchemeValue) -> None: ...
    def __call__(
        self, var: _Str, cast: _Cast[_T] | None = None, default: _T | NoValue = ..., parse_default: _Bool = False
    ) -> _T: ...
    def __contains__(self, var: _Str) -> _Bool: ...
    def str(self, var: _Str, default: _Str | NoValue = ..., multiline: _Bool = False) -> _Str: ...
    def bytes(self, var: _Str, default: _Bytes | NoValue = ..., encoding: _Str = "utf8") -> _Bytes: ...
    def bool(self, var: _Str, default: _Bool | NoValue = ...) -> _Bool: ...
    def int(self, var: _Str, default: _Int | NoValue = ...) -> _Int: ...
    def float(self, var: _Str, default: _Float | NoValue = ...) -> _Float: ...
    def json(self, var: _Str, default: Any | NoValue = ...) -> Any: ...
    def list(self, var: _Str, cast: _Cast[_List] | None = None, default: _List | NoValue = ...) -> _List: ...
    def tuple(self, var: _Str, cast: _Cast[_Tuple] | None = None, default: _Tuple | NoValue = ...) -> _Tuple: ...
    def dict(self, var: _Str, cast: _Cast[_Dict] | None = None, default: _Dict | NoValue = ...) -> _Dict: ...
    def url(self, var: _Str, default: _Str | NoValue = ...) -> _Str: ...
    def db_url(self, var: _Str = ..., default: _Str | NoValue = ..., engine: _Str | None = None) -> _Dict: ...

    db = db_url

    def cache_url(self, var: _Str = ..., default: _Str | NoValue = ..., backend: _Str | None = None) -> _Dict: ...

    cache = cache_url

    def email_url(self, var: _Str = ..., default: _Str | NoValue = ..., backend: _Str | None = None) -> _Dict: ...

    email = email_url

    def search_url(self, var: _Str = ..., default: _Str | NoValue = ..., engine: _Str | None = None) -> _Dict: ...
    def channels_url(self, var: _Str = ..., default: _Str | NoValue = ..., backend: _Str | None = None) -> _Dict: ...

    channels = channels_url

    def path(self, var: _Str, default: _Str | NoValue = ..., **kwargs) -> Path: ...
    def get_value(
        self, var: _Str, cast: _Cast[_T] | None = None, default: _T | NoValue = ..., parse_default: _Bool = False
    ) -> _T: ...
    @classmethod
    def parse_value(cls, value: _Str, cast: _Cast[_T]) -> _T: ...
    @classmethod
    def db_url_config(cls, url: _Str | ParseResult, engine: _Str | None = None) -> _Dict: ...
    @classmethod
    def cache_url_config(cls, url: _Str | ParseResult, backend: _Str | None = None) -> _Dict: ...
    @classmethod
    def email_url_config(cls, url: _Str | ParseResult, backend: _Str | None = None) -> _Dict: ...
    @classmethod
    def channels_url_config(cls, url: _Str | ParseResult, backend: _Str | None = None) -> _Dict: ...
    @classmethod
    def search_url_config(cls, url: _Str | ParseResult, engine: _Str | None = None) -> _Dict: ...
    @classmethod
    def read_env(
        cls,
        env_file: _Str | os.PathLike[_Str] | None = None,
        overwrite: _Bool = False,
        parse_comments: _Bool = False,
        encoding: _Str = "utf8",
        **overrides: _Dict[_Str, _Str],
    ) -> None: ...

class FileAwareEnv(Env):
    ENVIRON: FileAwareMapping

class Path:
    def path(self, *paths, **kwargs): ...
    def file(self, name, *args, **kwargs): ...
    @property
    def root(self): ...

    __root__: str

    def __init__(self, start="", *paths, **kwargs) -> None: ...
    def __call__(self, *paths, **kwargs): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __invert__(self): ...
    def __contains__(self, item) -> bool: ...
    def __unicode__(self): ...
    def __getitem__(self, *args, **kwargs): ...
    def __fspath__(self): ...
    def rfind(self, *args, **kwargs): ...
    def find(self, *args, **kwargs): ...
