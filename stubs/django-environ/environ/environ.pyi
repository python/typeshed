from _typeshed import Incomplete
from urllib.parse import ParseResult

Openable: Incomplete
logger: Incomplete

class NoValue: ...

class Env:
    ENVIRON: Incomplete
    NOTSET: Incomplete
    BOOLEAN_TRUE_STRINGS: Incomplete
    URL_CLASS = ParseResult
    POSTGRES_FAMILY: Incomplete
    DEFAULT_DATABASE_ENV: str
    DB_SCHEMES: Incomplete
    DEFAULT_CACHE_ENV: str
    CACHE_SCHEMES: Incomplete
    DEFAULT_EMAIL_ENV: str
    EMAIL_SCHEMES: Incomplete
    DEFAULT_SEARCH_ENV: str
    SEARCH_SCHEMES: Incomplete
    ELASTICSEARCH_FAMILY: Incomplete
    CLOUDSQL: str
    DEFAULT_CHANNELS_ENV: str
    CHANNELS_SCHEMES: Incomplete
    smart_cast: bool
    escape_proxy: bool
    prefix: str
    scheme: Incomplete
    def __init__(self, **scheme) -> None: ...
    def __call__(self, var, cast: Incomplete | None = None, default=..., parse_default: bool = False): ...
    def __contains__(self, var) -> bool: ...
    def str(self, var, default=..., multiline: bool = False): ...
    def bytes(self, var, default=..., encoding: str = "utf8"): ...
    def bool(self, var, default=...): ...
    def int(self, var, default=...): ...
    def float(self, var, default=...): ...
    def json(self, var, default=...): ...
    def list(self, var, cast: Incomplete | None = None, default=...): ...
    def tuple(self, var, cast: Incomplete | None = None, default=...): ...
    def dict(self, var, cast=..., default=...): ...
    def url(self, var, default=...): ...
    def db_url(self, var="DATABASE_URL", default=..., engine: Incomplete | None = None): ...
    db = db_url
    def cache_url(self, var="CACHE_URL", default=..., backend: Incomplete | None = None): ...
    cache = cache_url
    def email_url(self, var="EMAIL_URL", default=..., backend: Incomplete | None = None): ...
    email = email_url
    def search_url(self, var="SEARCH_URL", default=..., engine: Incomplete | None = None): ...
    def channels_url(self, var="CHANNELS_URL", default=..., backend: Incomplete | None = None): ...
    channels = channels_url
    def path(self, var, default=..., **kwargs): ...
    def get_value(self, var, cast: Incomplete | None = None, default=..., parse_default: bool = False): ...
    @classmethod
    def parse_value(cls, value, cast): ...
    @classmethod
    def db_url_config(cls, url, engine: Incomplete | None = None): ...
    @classmethod
    def cache_url_config(cls, url, backend: Incomplete | None = None): ...
    @classmethod
    def email_url_config(cls, url, backend: Incomplete | None = None): ...
    @classmethod
    def channels_url_config(cls, url, backend: Incomplete | None = None): ...
    @classmethod
    def search_url_config(cls, url, engine: Incomplete | None = None): ...
    @classmethod
    def read_env(
        cls,
        env_file: Incomplete | None = None,
        overwrite: bool = False,
        parse_comments: bool = False,
        encoding: str = "utf8",
        **overrides,
    ): ...

class FileAwareEnv(Env):
    ENVIRON: Incomplete

class Path:
    def path(self, *paths, **kwargs): ...
    def file(self, name, *args, **kwargs): ...
    @property
    def root(self): ...
    __root__: Incomplete
    def __init__(self, start: str = "", *paths, **kwargs) -> None: ...
    def __call__(self, *paths, **kwargs): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __invert__(self): ...
    def __contains__(self, item) -> bool: ...
    def __unicode__(self): ...
    def __getitem__(self, *args, **kwargs): ...
    def __fspath__(self): ...
    def rfind(self, *args, **kwargs): ...
    def find(self, *args, **kwargs): ...
