from .decorators import cached as cached, cachedmethod as cachedmethod
from .lfu import LFUCache as LFUCache
from .lru import LRUCache as LRUCache
from .rr import RRCache as RRCache
from .ttl import TTLCache as TTLCache

from typing import Callable, Generic, Iterator, TypeVar

from _typeshed import IdentityFunction
from typing import Any, Callable, ContextManager, MutableMapping, TypeVar

_KT = TypeVar("_KT")

def cached(
    cache: MutableMapping[_KT, Any] | None, key: Callable[..., _KT] = ..., lock: ContextManager[Any] | None = ...
) -> IdentityFunction: ...
def cachedmethod(
    cache: Callable[[Any], MutableMapping[_KT, Any] | None], key: Callable[..., _KT] = ..., lock: ContextManager[Any] | None = ...
) -> IdentityFunction: ...

_KT = TypeVar("_KT")
_VT = TypeVar("_VT")

class Cache(MutableMapping[_KT, _VT], Generic[_KT, _VT]):
    def __init__(self, maxsize: float, getsizeof: Callable[[_VT], float] | None = ...) -> None: ...
    def __getitem__(self, key: _KT) -> _VT: ...
    def __setitem__(self, key: _KT, value: _VT) -> None: ...
    def __delitem__(self, key: _KT) -> None: ...
    def __iter__(self) -> Iterator[_KT]: ...
    def __len__(self) -> int: ...
    @property
    def maxsize(self) -> float: ...
    @property
    def currsize(self) -> float: ...
    @staticmethod
    def getsizeof(value: _VT) -> float: ...
