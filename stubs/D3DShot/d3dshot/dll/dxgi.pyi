import ctypes
from _typeshed import Incomplete
from collections.abc import Callable
from typing_extensions import TypeAlias

# TODO: Complete types once we can import non-types dependencies
# See: https://github.com/python/typeshed/issues/5768
# from torch import Tensor
# import comtypes
_IUnknown: TypeAlias = Incomplete

_Frame: TypeAlias = Incomplete
# _Frame: TypeAlias = Image | npt.NDArray[np.int32] | npt.NDArray[np.float32] | Tensor
_Pointer: TypeAlias = Incomplete

class LUID(ctypes.Structure): ...
class DXGI_ADAPTER_DESC1(ctypes.Structure): ...
class DXGI_OUTPUT_DESC(ctypes.Structure): ...
class DXGI_OUTDUPL_POINTER_POSITION(ctypes.Structure): ...
class DXGI_OUTDUPL_FRAME_INFO(ctypes.Structure): ...
class DXGI_MAPPED_RECT(ctypes.Structure): ...
class IDXGIObject(_IUnknown): ...
class IDXGIDeviceSubObject(IDXGIObject): ...
class IDXGIResource(IDXGIDeviceSubObject): ...
class IDXGISurface(IDXGIDeviceSubObject): ...
class IDXGIOutputDuplication(IDXGIObject): ...
class IDXGIOutput(IDXGIObject): ...
class IDXGIOutput1(IDXGIOutput): ...
class IDXGIAdapter(IDXGIObject): ...
class IDXGIAdapter1(IDXGIAdapter): ...
class IDXGIFactory(IDXGIObject): ...
class IDXGIFactory1(IDXGIFactory): ...

def initialize_dxgi_factory() -> _Pointer: ...  # ctypes.POINTER(IDXGIFactory1)(handle.value)
def discover_dxgi_adapters(dxgi_factory: _Pointer) -> list[_Pointer]: ...
def describe_dxgi_adapter(dxgi_adapter: _Pointer) -> _Pointer: ...
def discover_dxgi_outputs(dxgi_adapter: _Pointer) -> list[_Pointer]: ...
def describe_dxgi_output(dxgi_output: _Pointer) -> _Pointer: ...
def initialize_dxgi_output_duplication(dxgi_output: _Pointer, d3d_device: _Pointer) -> _Pointer: ...
def get_dxgi_output_duplication_frame(
    dxgi_output_duplication: _Pointer,
    d3d_device: _Pointer,
    process_func: Callable[[_Pointer, int, int, int, tuple[int, int, int, int], int], _Frame | None] | None = ...,
    width: int = ...,
    height: int = ...,
    region: tuple[int, int, int, int] | None = ...,
    rotation: int = ...,
) -> _Frame: ...
