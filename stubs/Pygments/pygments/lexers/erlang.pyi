from pygments.lexer import Lexer, RegexLexer
from typing import Any

class ErlangLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    keywords: Any = ...
    builtins: Any = ...
    operators: str = ...
    word_operators: Any = ...
    atom_re: str = ...
    variable_re: str = ...
    esc_char_re: str = ...
    esc_octal_re: str = ...
    esc_hex_re: str = ...
    esc_ctrl_re: str = ...
    escape_re: Any = ...
    macro_re: Any = ...
    base_re: str = ...
    tokens: Any = ...

class ErlangShellLexer(Lexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def get_tokens_unprocessed(self, text: Any) -> None: ...

class ElixirLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    KEYWORD: Any = ...
    KEYWORD_OPERATOR: Any = ...
    BUILTIN: Any = ...
    BUILTIN_DECLARATION: Any = ...
    BUILTIN_NAMESPACE: Any = ...
    CONSTANT: Any = ...
    PSEUDO_VAR: Any = ...
    OPERATORS3: Any = ...
    OPERATORS2: Any = ...
    OPERATORS1: Any = ...
    PUNCTUATION: Any = ...
    def get_tokens_unprocessed(self, text: Any) -> None: ...
    def gen_elixir_sigil_rules(): ...
    op3_re: Any = ...
    op2_re: Any = ...
    op1_re: Any = ...
    ops_re: Any = ...
    punctuation_re: Any = ...
    alnum: str = ...
    name_re: Any = ...
    modname_re: Any = ...
    complex_name_re: Any = ...
    special_atom_re: str = ...
    long_hex_char_re: str = ...
    hex_char_re: str = ...
    escape_char_re: str = ...
    tokens: Any = ...

class ElixirConsoleLexer(Lexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def get_tokens_unprocessed(self, text: Any) -> None: ...
