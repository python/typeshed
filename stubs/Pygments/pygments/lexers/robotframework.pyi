from pygments.lexer import Lexer
from typing import Any, Optional

class RobotFrameworkLexer(Lexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def get_tokens_unprocessed(self, text: Any) -> None: ...

class VariableTokenizer:
    def tokenize(self, string: Any, token: Any) -> None: ...

class RowTokenizer:
    def __init__(self) -> None: ...
    def tokenize(self, row: Any) -> None: ...

class RowSplitter:
    def split(self, row: Any) -> None: ...

class Tokenizer:
    def __init__(self) -> None: ...
    def tokenize(self, value: Any): ...

class Comment(Tokenizer): ...

class Setting(Tokenizer):
    def __init__(self, template_setter: Optional[Any] = ...) -> None: ...

class ImportSetting(Tokenizer): ...
class TestCaseSetting(Setting): ...
class KeywordSetting(TestCaseSetting): ...
class Variable(Tokenizer): ...

class KeywordCall(Tokenizer):
    def __init__(self, support_assign: bool = ...) -> None: ...

class GherkinTokenizer:
    def tokenize(self, value: Any, token: Any): ...

class TemplatedKeywordCall(Tokenizer): ...

class ForLoop(Tokenizer):
    def __init__(self) -> None: ...

class _Table:
    def __init__(self, prev_tokenizer: Optional[Any] = ...) -> None: ...
    def tokenize(self, value: Any, index: Any) -> None: ...
    def end_row(self) -> None: ...

class UnknownTable(_Table): ...
class VariableTable(_Table): ...

class SettingTable(_Table):
    def __init__(self, template_setter: Any, prev_tokenizer: Optional[Any] = ...) -> None: ...
    def end_row(self) -> None: ...

class TestCaseTable(_Table):
    def set_test_template(self, template: Any) -> None: ...
    def set_default_template(self, template: Any) -> None: ...

class KeywordTable(TestCaseTable): ...

class VariableSplitter:
    identifier: Any = ...
    base: Any = ...
    index: Any = ...
    start: int = ...
    end: int = ...
    def __init__(self, string: Any, identifiers: Any) -> None: ...
    def get_replaced_base(self, variables: Any): ...
