from pygments.lexer import Lexer, RegexLexer
from typing import Any

class PostgresBase:
    text: Any = ...
    def get_tokens_unprocessed(self, text: Any, *args: Any) -> None: ...

class PostgresLexer(PostgresBase, RegexLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...

class PlPgsqlLexer(PostgresBase, RegexLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...

class PsqlRegexLexer(PostgresBase, RegexLexer):
    name: str = ...
    aliases: Any = ...
    flags: Any = ...
    tokens: Any = ...

class lookahead:
    iter: Any = ...
    def __init__(self, x: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def send(self, i: Any): ...
    def __next__(self): ...
    next: Any = ...

class PostgresConsoleLexer(Lexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def get_tokens_unprocessed(self, data: Any) -> None: ...

class SqlLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...

class TransactSqlLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class MySqlLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class SqliteConsoleLexer(Lexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def get_tokens_unprocessed(self, data: Any) -> None: ...

class RqlLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
