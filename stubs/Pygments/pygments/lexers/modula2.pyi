from pygments.lexer import RegexLexer
from typing import Any

class Modula2Lexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    common_reserved_words: Any = ...
    common_builtins: Any = ...
    common_pseudo_builtins: Any = ...
    pim_lexemes_to_reject: Any = ...
    pim_additional_reserved_words: Any = ...
    pim_additional_builtins: Any = ...
    pim_additional_pseudo_builtins: Any = ...
    iso_lexemes_to_reject: Any = ...
    iso_additional_reserved_words: Any = ...
    iso_additional_builtins: Any = ...
    iso_additional_pseudo_builtins: Any = ...
    m2r10_lexemes_to_reject: Any = ...
    m2r10_additional_reserved_words: Any = ...
    m2r10_additional_builtins: Any = ...
    m2r10_additional_pseudo_builtins: Any = ...
    objm2_lexemes_to_reject: Any = ...
    objm2_additional_reserved_words: Any = ...
    objm2_additional_builtins: Any = ...
    objm2_additional_pseudo_builtins: Any = ...
    aglet_additional_reserved_words: Any = ...
    aglet_additional_builtins: Any = ...
    aglet_additional_pseudo_builtins: Any = ...
    gm2_additional_reserved_words: Any = ...
    gm2_additional_builtins: Any = ...
    gm2_additional_pseudo_builtins: Any = ...
    p1_additional_reserved_words: Any = ...
    p1_additional_builtins: Any = ...
    p1_additional_pseudo_builtins: Any = ...
    xds_additional_reserved_words: Any = ...
    xds_additional_builtins: Any = ...
    xds_additional_pseudo_builtins: Any = ...
    pim_stdlib_module_identifiers: Any = ...
    pim_stdlib_type_identifiers: Any = ...
    pim_stdlib_proc_identifiers: Any = ...
    pim_stdlib_var_identifiers: Any = ...
    pim_stdlib_const_identifiers: Any = ...
    iso_stdlib_module_identifiers: Any = ...
    iso_stdlib_type_identifiers: Any = ...
    iso_stdlib_proc_identifiers: Any = ...
    iso_stdlib_var_identifiers: Any = ...
    iso_stdlib_const_identifiers: Any = ...
    m2r10_stdlib_adt_identifiers: Any = ...
    m2r10_stdlib_blueprint_identifiers: Any = ...
    m2r10_stdlib_module_identifiers: Any = ...
    m2r10_stdlib_type_identifiers: Any = ...
    m2r10_stdlib_proc_identifiers: Any = ...
    m2r10_stdlib_var_identifiers: Any = ...
    m2r10_stdlib_const_identifiers: Any = ...
    dialects: Any = ...
    lexemes_to_reject_db: Any = ...
    reserved_words_db: Any = ...
    builtins_db: Any = ...
    pseudo_builtins_db: Any = ...
    stdlib_adts_db: Any = ...
    stdlib_modules_db: Any = ...
    stdlib_types_db: Any = ...
    stdlib_procedures_db: Any = ...
    stdlib_variables_db: Any = ...
    stdlib_constants_db: Any = ...
    dialect_set_by_tag: bool = ...
    algol_publication_mode: bool = ...
    treat_stdlib_adts_as_builtins: Any = ...
    def __init__(self, **options: Any) -> None: ...
    dialect: Any = ...
    lexemes_to_reject: Any = ...
    reserved_words: Any = ...
    builtins: Any = ...
    pseudo_builtins: Any = ...
    adts: Any = ...
    modules: Any = ...
    types: Any = ...
    procedures: Any = ...
    variables: Any = ...
    constants: Any = ...
    def set_dialect(self, dialect_id: Any) -> None: ...
    def get_dialect_from_dialect_tag(self, dialect_tag: Any): ...
    def get_tokens_unprocessed(self, text: Any) -> None: ...
    def analyse_text(text: Any): ...
