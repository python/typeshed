from pygments.lexer import RegexLexer
from typing import Any

class SMLLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    alphanumid_reserved: Any = ...
    symbolicid_reserved: Any = ...
    nonid_reserved: Any = ...
    alphanumid_re: str = ...
    symbolicid_re: str = ...
    def stringy(whatkind: Any): ...
    def long_id_callback(self, match: Any) -> None: ...
    def end_id_callback(self, match: Any) -> None: ...
    def id_callback(self, match: Any) -> None: ...
    tokens: Any = ...

class OcamlLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    keywords: Any = ...
    keyopts: Any = ...
    operators: str = ...
    word_operators: Any = ...
    prefix_syms: str = ...
    infix_syms: str = ...
    primitives: Any = ...
    tokens: Any = ...

class OpaLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    keywords: Any = ...
    ident_re: str = ...
    op_re: str = ...
    punc_re: str = ...
    tokens: Any = ...

class ReasonLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    keywords: Any = ...
    keyopts: Any = ...
    operators: str = ...
    word_operators: Any = ...
    prefix_syms: str = ...
    infix_syms: str = ...
    primitives: Any = ...
    tokens: Any = ...

class FStarLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    keywords: Any = ...
    decl_keywords: Any = ...
    assume_keywords: Any = ...
    keyopts: Any = ...
    operators: str = ...
    prefix_syms: str = ...
    infix_syms: str = ...
    primitives: Any = ...
    tokens: Any = ...
