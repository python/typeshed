from pygments.lexer import ExtendedRegexLexer, RegexLexer
from typing import Any

class DuelLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...

class XQueryLexer(ExtendedRegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    xquery_parse_state: Any = ...
    ncnamestartchar: str = ...
    ncnamechar: Any = ...
    ncname: Any = ...
    pitarget_namestartchar: str = ...
    pitarget_namechar: Any = ...
    pitarget: Any = ...
    prefixedname: Any = ...
    unprefixedname: Any = ...
    qname: Any = ...
    entityref: str = ...
    charref: str = ...
    stringdouble: Any = ...
    stringsingle: Any = ...
    elementcontentchar: str = ...
    quotattrcontentchar: str = ...
    aposattrcontentchar: str = ...
    flags: Any = ...
    def punctuation_root_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def operator_root_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def popstate_tag_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def popstate_xmlcomment_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def popstate_kindtest_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def popstate_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_element_content_starttag_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_cdata_section_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_starttag_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_order_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_map_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_root_validate(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_root_validate_withmode(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_processing_instruction_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_element_content_processing_instruction_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_element_content_cdata_section_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_cdata_section_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_element_content_xmlcomment_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_xmlcomment_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_kindtest_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_kindtestforpi_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_kindtest_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_occurrenceindicator_kindtest_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_starttag_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_root_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_root_construct_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_root_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_attribute_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    def pushstate_operator_callback(lexer: Any, match: Any, ctx: Any) -> None: ...
    tokens: Any = ...

class QmlLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...

class CirruLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...

class SlimLexer(ExtendedRegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
