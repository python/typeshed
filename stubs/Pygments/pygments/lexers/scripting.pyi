from pygments.lexer import RegexLexer
from typing import Any

class LuaLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...
    func_name_highlighting: Any = ...
    disabled_modules: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def get_tokens_unprocessed(self, text: Any) -> None: ...

class MoonScriptLexer(LuaLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...
    def get_tokens_unprocessed(self, text: Any) -> None: ...

class ChaiscriptLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...

class LSLLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    lsl_keywords: str = ...
    lsl_types: str = ...
    lsl_states: str = ...
    lsl_events: str = ...
    lsl_functions_builtin: str = ...
    lsl_constants_float: str = ...
    lsl_constants_integer: str = ...
    lsl_constants_integer_boolean: str = ...
    lsl_constants_rotation: str = ...
    lsl_constants_string: str = ...
    lsl_constants_vector: str = ...
    lsl_invalid_broken: str = ...
    lsl_invalid_deprecated: str = ...
    lsl_invalid_illegal: str = ...
    lsl_invalid_unimplemented: str = ...
    lsl_reserved_godmode: str = ...
    lsl_reserved_log: str = ...
    lsl_operators: str = ...
    tokens: Any = ...

class AppleScriptLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    flags: Any = ...
    Identifiers: str = ...
    Literals: Any = ...
    Classes: Any = ...
    BuiltIn: Any = ...
    HandlerParams: Any = ...
    Commands: Any = ...
    References: Any = ...
    Operators: Any = ...
    Control: Any = ...
    Declarations: Any = ...
    Reserved: Any = ...
    StudioClasses: Any = ...
    StudioEvents: Any = ...
    StudioCommands: Any = ...
    StudioProperties: Any = ...
    tokens: Any = ...

class RexxLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    PATTERNS_AND_WEIGHTS: Any = ...
    def analyse_text(text: Any): ...

class MOOCodeLexer(RegexLexer):
    name: str = ...
    filenames: Any = ...
    aliases: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class HybrisLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class EasytrieveLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: int = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class JclLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class MiniScriptLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...
