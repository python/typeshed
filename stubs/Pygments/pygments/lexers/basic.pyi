from pygments.lexer import RegexLexer
from typing import Any

class BlitzMaxLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    bmax_vopwords: str = ...
    bmax_sktypes: str = ...
    bmax_lktypes: str = ...
    bmax_name: str = ...
    bmax_var: Any = ...
    bmax_func: Any = ...
    flags: Any = ...
    tokens: Any = ...

class BlitzBasicLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    bb_sktypes: str = ...
    bb_name: str = ...
    bb_var: Any = ...
    flags: Any = ...
    tokens: Any = ...

class MonkeyLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    name_variable: str = ...
    name_function: str = ...
    name_constant: str = ...
    name_class: str = ...
    name_module: str = ...
    keyword_type: str = ...
    keyword_type_special: str = ...
    flags: Any = ...
    tokens: Any = ...

class CbmBasicV2Lexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class QBasicLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    declarations: Any = ...
    functions: Any = ...
    metacommands: Any = ...
    operators: Any = ...
    statements: Any = ...
    keywords: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class VBScriptLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    flags: Any = ...
    tokens: Any = ...

class BBCBasicLexer(RegexLexer):
    base_keywords: Any = ...
    basic5_keywords: Any = ...
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...
