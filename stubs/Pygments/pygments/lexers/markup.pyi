from pygments.lexer import DelegatingLexer, RegexLexer
from typing import Any

class BBCodeLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class MoinWikiLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...

class RstLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    closers: str = ...
    unicode_delimiters: str = ...
    end_string_suffix: Any = ...
    tokens: Any = ...
    handlecodeblocks: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class TexLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class GroffLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class MozPreprocHashLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class MozPreprocPercentLexer(MozPreprocHashLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class MozPreprocXulLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class MozPreprocJavascriptLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class MozPreprocCssLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class MarkdownLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    handlecodeblocks: Any = ...
    def __init__(self, **options: Any) -> None: ...

class TiddlyWiki5Lexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    handlecodeblocks: Any = ...
    def __init__(self, **options: Any) -> None: ...
