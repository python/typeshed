from pygments.lexer import DelegatingLexer, RegexLexer
from typing import Any

class GasLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    string: str = ...
    char: str = ...
    identifier: Any = ...
    number: str = ...
    register: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class ObjdumpLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class DObjdumpLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class CppObjdumpLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class CObjdumpLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class HsailLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    string: str = ...
    identifier: str = ...
    register_number: str = ...
    register: Any = ...
    alignQual: str = ...
    widthQual: str = ...
    allocQual: str = ...
    roundingMod: str = ...
    datatypeMod: str = ...
    float: str = ...
    hexfloat: str = ...
    ieeefloat: str = ...
    tokens: Any = ...

class LlvmLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    string: str = ...
    identifier: Any = ...
    tokens: Any = ...

class LlvmMirBodyLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class LlvmMirLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    tokens: Any = ...

class NasmLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    priority: float = ...
    identifier: str = ...
    hexn: str = ...
    octn: str = ...
    binn: str = ...
    decn: str = ...
    floatn: Any = ...
    string: Any = ...
    declkw: str = ...
    register: str = ...
    wordop: str = ...
    type: str = ...
    directives: str = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class NasmObjdumpLexer(ObjdumpLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class TasmLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    identifier: str = ...
    hexn: str = ...
    octn: str = ...
    binn: str = ...
    decn: str = ...
    floatn: Any = ...
    string: Any = ...
    declkw: str = ...
    register: str = ...
    wordop: str = ...
    type: str = ...
    directives: str = ...
    datatype: str = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class Ca65Lexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(self, text: Any): ...

class Dasm16Lexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    INSTRUCTIONS: Any = ...
    REGISTERS: Any = ...
    char: str = ...
    identifier: Any = ...
    number: str = ...
    binary_number: str = ...
    instruction: Any = ...
    single_char: Any = ...
    string: str = ...
    def guess_identifier(lexer: Any, match: Any) -> None: ...
    tokens: Any = ...
