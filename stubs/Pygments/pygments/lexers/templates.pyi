from pygments.lexer import DelegatingLexer, Lexer, RegexLexer
from typing import Any

class ErbLexer(Lexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    ruby_lexer: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def get_tokens_unprocessed(self, text: Any) -> None: ...
    def analyse_text(text: Any): ...

class SmartyLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class VelocityLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    flags: Any = ...
    identifier: str = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class VelocityHtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class VelocityXmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class DjangoLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class MyghtyLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class MyghtyHtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class MyghtyXmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class MyghtyJavascriptLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class MyghtyCssLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class MasonLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class MakoLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class MakoHtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class MakoXmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class MakoJavascriptLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class MakoCssLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class CheetahPythonLexer(Lexer):
    def get_tokens_unprocessed(self, text: Any) -> None: ...

class CheetahLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class CheetahHtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class CheetahXmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class CheetahJavascriptLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class GenshiTextLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class GenshiMarkupLexer(RegexLexer):
    flags: Any = ...
    tokens: Any = ...

class HtmlGenshiLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class GenshiLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class JavascriptGenshiLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class CssGenshiLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class RhtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class XmlErbLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class CssErbLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class JavascriptErbLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class HtmlPhpLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class XmlPhpLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class CssPhpLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class JavascriptPhpLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class HtmlSmartyLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class XmlSmartyLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class CssSmartyLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class JavascriptSmartyLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class HtmlDjangoLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class XmlDjangoLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class CssDjangoLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class JavascriptDjangoLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class JspRootLexer(RegexLexer):
    tokens: Any = ...

class JspLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class EvoqueLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...
    def analyse_text(text: Any): ...

class EvoqueHtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class EvoqueXmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class ColdfusionLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...

class ColdfusionMarkupLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class ColdfusionHtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class ColdfusionCFCLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class SspLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class TeaTemplateRootLexer(RegexLexer):
    tokens: Any = ...

class TeaTemplateLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class LassoHtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class LassoXmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class LassoCssLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class LassoJavascriptLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    alias_filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def analyse_text(text: Any): ...

class HandlebarsLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    tokens: Any = ...

class HandlebarsHtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class YamlJinjaLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class LiquidLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    tokens: Any = ...

class TwigLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    tokens: Any = ...

class TwigHtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class Angular2Lexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    tokens: Any = ...

class Angular2HtmlLexer(DelegatingLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    def __init__(self, **options: Any) -> None: ...
