from pygments.lexer import Lexer, RegexLexer
from typing import Any

class HaskellLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    flags: Any = ...
    reserved: Any = ...
    ascii: Any = ...
    tokens: Any = ...

class HspecLexer(HaskellLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    tokens: Any = ...

class IdrisLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    reserved: Any = ...
    ascii: Any = ...
    directives: Any = ...
    tokens: Any = ...

class AgdaLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    reserved: Any = ...
    tokens: Any = ...

class CryptolLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    reserved: Any = ...
    ascii: Any = ...
    tokens: Any = ...
    EXTRA_KEYWORDS: Any = ...
    def get_tokens_unprocessed(self, text: Any) -> None: ...

class LiterateLexer(Lexer):
    bird_re: Any = ...
    baselexer: Any = ...
    def __init__(self, baselexer: Any, **options: Any) -> None: ...
    def get_tokens_unprocessed(self, text: Any) -> None: ...

class LiterateHaskellLexer(LiterateLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class LiterateIdrisLexer(LiterateLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class LiterateAgdaLexer(LiterateLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class LiterateCryptolLexer(LiterateLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    def __init__(self, **options: Any) -> None: ...

class KokaLexer(RegexLexer):
    name: str = ...
    aliases: Any = ...
    filenames: Any = ...
    mimetypes: Any = ...
    keywords: Any = ...
    typeStartKeywords: Any = ...
    typekeywords: Any = ...
    builtin: Any = ...
    symbols: str = ...
    sboundary: Any = ...
    boundary: str = ...
    tokenType: Any = ...
    tokenTypeDef: Any = ...
    tokenConstructor: Any = ...
    tokens: Any = ...
