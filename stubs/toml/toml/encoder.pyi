from _typeshed import SupportsWrite
from typing import Any, Callable, Iterable, Mapping, MutableMapping

def dump(o: Mapping[str, Any], f: SupportsWrite[str], encoder: TomlEncoder | None = ...) -> str: ...
def dumps(o: Mapping[str, Any], encoder: TomlEncoder | None = ...) -> str: ...

class TomlEncoder:
    _dict: type[Mapping[str, Any]]
    preserve: bool
    dump_funcs: MutableMapping[type[Any], Callable[[Any], str]]
    def __init__(self, _dict: type[Mapping[str, Any]] = ..., preserve: bool = ...) -> None: ...
    def get_empty_table(self) -> Mapping[str, Any]: ...
    def dump_list(self, v: Iterable[object]) -> str: ...
    def dump_inline_table(self, section: dict[str, Any] | Any) -> str: ...
    def dump_value(self, v: Any) -> str: ...
    def dump_sections(self, o: Mapping[str, Any], sup: str) -> tuple[str, Mapping[str, Any]]: ...

class TomlPreserveInlineDictEncoder(TomlEncoder):
    def __init__(self, _dict: type[Mapping[str, Any]] = ...) -> None: ...

class TomlArraySeparatorEncoder(TomlEncoder):
    separator: str
    def __init__(self, _dict: type[Mapping[str, Any]] = ..., preserve: bool = ..., separator: str = ...) -> None: ...
    def dump_list(self, v: Iterable[Any]) -> str: ...

class TomlNumpyEncoder(TomlEncoder): ...
class TomlPreserveCommentEncoder(TomlEncoder): ...
class TomlPathlibEncoder(TomlEncoder): ...
