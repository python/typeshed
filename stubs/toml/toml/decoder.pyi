import sys
from _typeshed import StrPath, SupportsRead
from typing import Any, Callable, Generic, MutableMapping, Pattern, Text, TypeVar

_T = TypeVar("_T")

if sys.version_info >= (3, 3):
    FNFError = FileNotFoundError
else:
    FNFError = IOError

TIME_RE: Pattern[str]

class TomlDecodeError(ValueError):
    msg: str
    doc: str
    pos: int
    lineno: int
    colno: int
    def __init__(self, msg: str, doc: str, pos: int) -> None: ...

class CommentValue(Generic[_T]):
    val: _T
    comment: str
    def __init__(
        self,
        val: _T,
        comment: str,
        beginline: bool,
        _dict: type[MutableMapping[str, _T]],
    ) -> None: ...
    def __getitem__(self, key: _T) -> _T: ...
    def __setitem__(self, key: _T, value: _T) -> None: ...
    def dump(self, dump_value_func: Callable[[_T], str]) -> str: ...

def load(
    f: StrPath | list[Text] | SupportsRead[str], _dict: type[MutableMapping[str, _T]] = ..., decoder: TomlDecoder[_T] | None = ...
) -> MutableMapping[str, _T]: ...
def loads(
    s: Text, _dict: type[MutableMapping[str, _T]] = ..., decoder: TomlDecoder[_T] | None = ...
) -> MutableMapping[str, _T]: ...

class InlineTableDict: ...

class TomlDecoder(Generic[_T]):
    _dict: type[MutableMapping[str, _T]]
    def __init__(self, _dict: type[MutableMapping[str, _T]] = ...) -> None: ...
    def get_empty_table(self) -> MutableMapping[str, _T]: ...
    def get_empty_inline_table(self) -> InlineTableDict: ...  # incomplete python/typing#213
    def load_inline_object(
        self, line: str, currentlevel: MutableMapping[str, _T], multikey: bool = ..., multibackslash: bool = ...
    ) -> None: ...
    def load_line(
        self, line: str, currentlevel: MutableMapping[str, _T], multikey: bool | None, multibackslash: bool
    ) -> tuple[bool | None, str, bool] | None: ...
    def load_value(self, v: str, strictly_valid: bool = ...) -> tuple[Any, str]: ...
    def bounded_string(self, s: str) -> bool: ...
    def load_array(self, a: str) -> list[_T]: ...
    def preserve_comment(self, line_no: int, key: str, comment: str, beginline: bool) -> None: ...
    def embed_comments(self, idx: int, currentlevel: MutableMapping[str, _T]) -> None: ...

class TomlPreserveCommentDecoder(TomlDecoder[_T]):
    saved_comments: MutableMapping[int, tuple[str, str, bool]]
