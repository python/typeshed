from _typeshed import Incomplete
from collections.abc import Generator

from antlr4.tree.Tree import INVALID_INTERVAL as INVALID_INTERVAL, ParseTreeVisitor as ParseTreeVisitor, RuleNode as RuleNode
from antlr4.tree.Trees import Trees as Trees

Parser: Incomplete

class RuleContext(RuleNode):
    EMPTY: Incomplete
    parentCtx: Incomplete
    invokingState: Incomplete
    def __init__(self, parent: RuleContext | None = None, invokingState: int = ...) -> None: ...
    def depth(self) -> Incomplete: ...
    def isEmpty(self) -> Incomplete: ...
    def getSourceInterval(self) -> Incomplete: ...
    def getRuleContext(self) -> Incomplete: ...
    def getPayload(self) -> Incomplete: ...
    def getText(self) -> Incomplete: ...
    def getRuleIndex(self) -> Incomplete: ...
    def getAltNumber(self) -> Incomplete: ...
    def setAltNumber(self, altNumber: int) -> Incomplete: ...
    def getChild(self, i: int) -> Incomplete: ...
    def getChildCount(self) -> Incomplete: ...
    def getChildren(self) -> Generator[Incomplete, None, None]: ...
    def accept(self, visitor: ParseTreeVisitor) -> Incomplete: ...
    def toStringTree(self, ruleNames: list[Incomplete] | None = None, recog: Parser | None = None) -> Incomplete: ...
    def toString(self, ruleNames: list[Incomplete], stop: RuleContext) -> str: ...
