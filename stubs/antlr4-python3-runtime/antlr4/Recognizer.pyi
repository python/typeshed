from _typeshed import Incomplete

from antlr4.error.ErrorListener import ConsoleErrorListener as ConsoleErrorListener, ProxyErrorListener as ProxyErrorListener
from antlr4.RuleContext import RuleContext as RuleContext
from antlr4.Token import Token as Token

RecognitionException: Incomplete

class Recognizer:
    tokenTypeMapCache: Incomplete
    ruleIndexMapCache: Incomplete
    def __init__(self) -> None: ...
    def extractVersion(self, version: Incomplete) -> Incomplete: ...
    def checkVersion(self, toolVersion: Incomplete) -> None: ...
    def addErrorListener(self, listener: Incomplete) -> None: ...
    def removeErrorListener(self, listener: Incomplete) -> None: ...
    def removeErrorListeners(self) -> None: ...
    def getTokenTypeMap(self) -> Incomplete: ...
    def getRuleIndexMap(self) -> Incomplete: ...
    def getTokenType(self, tokenName: str) -> Incomplete: ...
    def getErrorHeader(self, e: RecognitionException) -> Incomplete: ...
    def getTokenErrorDisplay(self, t: Token) -> Incomplete: ...
    def getErrorListenerDispatch(self) -> Incomplete: ...
    def sempred(self, localctx: RuleContext, ruleIndex: int, actionIndex: int) -> Incomplete: ...
    def precpred(self, localctx: RuleContext, precedence: int) -> Incomplete: ...
    @property
    def state(self) -> Incomplete: ...
    @state.setter
    def state(self, atnState: int) -> Incomplete: ...
