from _typeshed import Incomplete

from antlr4.Recognizer import Recognizer as Recognizer
from antlr4.RuleContext import RuleContext as RuleContext

class SemanticContext:
    NONE: Incomplete
    def eval(self, parser: Recognizer, outerContext: RuleContext) -> Incomplete: ...
    def evalPrecedence(self, parser: Recognizer, outerContext: RuleContext) -> Incomplete: ...

def andContext(a: SemanticContext, b: SemanticContext) -> Incomplete: ...
def orContext(a: SemanticContext, b: SemanticContext) -> Incomplete: ...
def filterPrecedencePredicates(collection: set[SemanticContext]) -> Incomplete: ...

class EmptySemanticContext(SemanticContext): ...

class Predicate(SemanticContext):
    ruleIndex: Incomplete
    predIndex: Incomplete
    isCtxDependent: Incomplete
    def __init__(self, ruleIndex: int = ..., predIndex: int = ..., isCtxDependent: bool = ...) -> None: ...
    def eval(self, parser: Recognizer, outerContext: RuleContext) -> Incomplete: ...
    def __hash__(self) -> Incomplete: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...

class PrecedencePredicate(SemanticContext):
    precedence: Incomplete
    def __init__(self, precedence: int = ...) -> None: ...
    def eval(self, parser: Recognizer, outerContext: RuleContext) -> Incomplete: ...
    def evalPrecedence(self, parser: Recognizer, outerContext: RuleContext) -> Incomplete: ...
    def __lt__(self, other: Incomplete) -> Incomplete: ...
    def __hash__(self) -> Incomplete: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...

class AND(SemanticContext):
    opnds: Incomplete
    def __init__(self, a: SemanticContext, b: SemanticContext) -> None: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __hash__(self) -> Incomplete: ...
    def eval(self, parser: Recognizer, outerContext: RuleContext) -> Incomplete: ...
    def evalPrecedence(self, parser: Recognizer, outerContext: RuleContext) -> Incomplete: ...

class OR(SemanticContext):
    opnds: Incomplete
    def __init__(self, a: SemanticContext, b: SemanticContext) -> None: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __hash__(self) -> Incomplete: ...
    def eval(self, parser: Recognizer, outerContext: RuleContext) -> Incomplete: ...
    def evalPrecedence(self, parser: Recognizer, outerContext: RuleContext) -> Incomplete: ...
