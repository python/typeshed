from _typeshed import Incomplete

from antlr4.Token import Token as Token

class IntervalSet:
    intervals: list[range] | None
    readonly: bool
    def __init__(self) -> None: ...
    def __iter__(self) -> Incomplete: ...
    def __getitem__(self, item: Incomplete) -> Incomplete: ...
    def addOne(self, v: int) -> Incomplete: ...
    def addRange(self, v: range) -> Incomplete: ...
    def addSet(self, other: IntervalSet) -> Incomplete: ...
    def reduce(self, k: int) -> Incomplete: ...
    def complement(self, start: int, stop: int) -> Incomplete: ...
    def __contains__(self, item: Incomplete) -> bool: ...
    def __len__(self) -> int: ...
    def removeRange(self, v: Incomplete) -> None: ...
    def removeOne(self, v: Incomplete) -> None: ...
    def toString(self, literalNames: list[str], symbolicNames: list[str]) -> Incomplete: ...
    def elementName(self, literalNames: list[str], symbolicNames: list[str], a: int) -> Incomplete: ...
