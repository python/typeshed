from _typeshed import Incomplete

from antlr4.CommonTokenStream import CommonTokenStream as CommonTokenStream
from antlr4.Token import Token as Token

class TokenStreamRewriter:
    DEFAULT_PROGRAM_NAME: str
    PROGRAM_INIT_SIZE: int
    MIN_TOKEN_INDEX: int
    tokens: Incomplete
    programs: Incomplete
    lastRewriteTokenIndexes: Incomplete
    def __init__(self, tokens: Incomplete) -> None: ...
    def getTokenStream(self) -> Incomplete: ...
    def rollback(self, instruction_index: Incomplete, program_name: Incomplete) -> None: ...
    def deleteProgram(self, program_name: Incomplete = ...) -> None: ...
    def insertAfterToken(self, token: Incomplete, text: Incomplete, program_name: Incomplete = ...) -> None: ...
    def insertAfter(self, index: Incomplete, text: Incomplete, program_name: Incomplete = ...) -> None: ...
    def insertBeforeIndex(self, index: Incomplete, text: Incomplete) -> None: ...
    def insertBeforeToken(self, token: Incomplete, text: Incomplete, program_name: Incomplete = ...) -> None: ...
    def insertBefore(self, program_name: Incomplete, index: Incomplete, text: Incomplete) -> None: ...
    def replaceIndex(self, index: Incomplete, text: Incomplete) -> None: ...
    def replaceRange(self, from_idx: Incomplete, to_idx: Incomplete, text: Incomplete) -> None: ...
    def replaceSingleToken(self, token: Incomplete, text: Incomplete) -> None: ...
    def replaceRangeTokens(
        self, from_token: Incomplete, to_token: Incomplete, text: Incomplete, program_name: Incomplete = ...
    ) -> None: ...
    def replace(self, program_name: Incomplete, from_idx: Incomplete, to_idx: Incomplete, text: Incomplete) -> None: ...
    def deleteToken(self, token: Incomplete) -> None: ...
    def deleteIndex(self, index: Incomplete) -> None: ...
    def delete(self, program_name: Incomplete, from_idx: Incomplete, to_idx: Incomplete) -> None: ...
    def lastRewriteTokenIndex(self, program_name: Incomplete = ...) -> Incomplete: ...
    def setLastRewriteTokenIndex(self, program_name: Incomplete, i: Incomplete) -> None: ...
    def getProgram(self, program_name: Incomplete) -> Incomplete: ...
    def getDefaultText(self) -> Incomplete: ...
    def getText(self, program_name: Incomplete, start: int, stop: int) -> Incomplete: ...

    class RewriteOperation:
        tokens: Incomplete
        index: Incomplete
        text: Incomplete
        instructionIndex: int
        def __init__(self, tokens: Incomplete, index: Incomplete, text: str = ...) -> None: ...
        def execute(self, buf: Incomplete) -> Incomplete: ...

    class InsertBeforeOp(RewriteOperation):
        def __init__(self, tokens: Incomplete, index: Incomplete, text: str = ...) -> None: ...
        def execute(self, buf: Incomplete) -> Incomplete: ...

    class InsertAfterOp(InsertBeforeOp): ...

    class ReplaceOp(RewriteOperation):
        last_index: Incomplete
        def __init__(self, from_idx: Incomplete, to_idx: Incomplete, tokens: Incomplete, text: Incomplete) -> None: ...
        def execute(self, buf: Incomplete) -> Incomplete: ...
