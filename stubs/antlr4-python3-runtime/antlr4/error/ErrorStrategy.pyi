from _typeshed import Incomplete

from antlr4.atn.ATNState import ATNState as ATNState
from antlr4.error.Errors import (
    FailedPredicateException as FailedPredicateException,
    InputMismatchException as InputMismatchException,
    NoViableAltException as NoViableAltException,
    ParseCancellationException as ParseCancellationException,
    RecognitionException as RecognitionException,
)
from antlr4.IntervalSet import IntervalSet as IntervalSet
from antlr4.Token import Token as Token

Parser: Incomplete

class ErrorStrategy:
    def reset(self, recognizer: Parser) -> Incomplete: ...
    def recoverInline(self, recognizer: Parser) -> Incomplete: ...
    def recover(self, recognizer: Parser, e: RecognitionException) -> Incomplete: ...
    def sync(self, recognizer: Parser) -> Incomplete: ...
    def inErrorRecoveryMode(self, recognizer: Parser) -> Incomplete: ...
    def reportError(self, recognizer: Parser, e: RecognitionException) -> Incomplete: ...

class DefaultErrorStrategy(ErrorStrategy):
    errorRecoveryMode: bool
    lastErrorIndex: int
    lastErrorStates: Incomplete
    nextTokensContext: Incomplete
    nextTokenState: int
    def __init__(self) -> None: ...
    def reset(self, recognizer: Parser) -> Incomplete: ...
    def beginErrorCondition(self, recognizer: Parser) -> Incomplete: ...
    def inErrorRecoveryMode(self, recognizer: Parser) -> Incomplete: ...
    def endErrorCondition(self, recognizer: Parser) -> Incomplete: ...
    def reportMatch(self, recognizer: Parser) -> Incomplete: ...
    def reportError(self, recognizer: Parser, e: RecognitionException) -> Incomplete: ...
    def recover(self, recognizer: Parser, e: RecognitionException) -> Incomplete: ...
    nextTokensState: Incomplete
    def sync(self, recognizer: Parser) -> Incomplete: ...
    def reportNoViableAlternative(self, recognizer: Parser, e: NoViableAltException) -> Incomplete: ...
    def reportInputMismatch(self, recognizer: Parser, e: InputMismatchException) -> Incomplete: ...
    def reportFailedPredicate(self, recognizer: Incomplete, e: Incomplete) -> None: ...
    def reportUnwantedToken(self, recognizer: Parser) -> Incomplete: ...
    def reportMissingToken(self, recognizer: Parser) -> Incomplete: ...
    def recoverInline(self, recognizer: Parser) -> Incomplete: ...
    def singleTokenInsertion(self, recognizer: Parser) -> Incomplete: ...
    def singleTokenDeletion(self, recognizer: Parser) -> Incomplete: ...
    def getMissingSymbol(self, recognizer: Parser) -> Incomplete: ...
    def getExpectedTokens(self, recognizer: Parser) -> Incomplete: ...
    def getTokenErrorDisplay(self, t: Token) -> Incomplete: ...
    def escapeWSAndQuote(self, s: str) -> Incomplete: ...
    def getErrorRecoverySet(self, recognizer: Parser) -> Incomplete: ...
    def consumeUntil(self, recognizer: Parser, set_: set[int]) -> Incomplete: ...

class BailErrorStrategy(DefaultErrorStrategy):
    def recover(self, recognizer: Parser, e: RecognitionException) -> Incomplete: ...
    def recoverInline(self, recognizer: Parser) -> Incomplete: ...
    def sync(self, recognizer: Parser) -> Incomplete: ...
