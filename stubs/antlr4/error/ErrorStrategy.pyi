from _typeshed import Incomplete
from antlr4.IntervalSet import IntervalSet as IntervalSet
from antlr4.Token import Token as Token
from antlr4.atn.ATNState import ATNState as ATNState
from antlr4.error.Errors import FailedPredicateException as FailedPredicateException, InputMismatchException as InputMismatchException, NoViableAltException as NoViableAltException, ParseCancellationException as ParseCancellationException, RecognitionException as RecognitionException

Parser: Incomplete

class ErrorStrategy:
    def reset(self, recognizer: Parser): ...
    def recoverInline(self, recognizer: Parser): ...
    def recover(self, recognizer: Parser, e: RecognitionException): ...
    def sync(self, recognizer: Parser): ...
    def inErrorRecoveryMode(self, recognizer: Parser): ...
    def reportError(self, recognizer: Parser, e: RecognitionException): ...

class DefaultErrorStrategy(ErrorStrategy):
    errorRecoveryMode: bool
    lastErrorIndex: int
    lastErrorStates: Incomplete
    nextTokensContext: Incomplete
    nextTokenState: int
    def __init__(self) -> None: ...
    def reset(self, recognizer: Parser): ...
    def beginErrorCondition(self, recognizer: Parser): ...
    def inErrorRecoveryMode(self, recognizer: Parser): ...
    def endErrorCondition(self, recognizer: Parser): ...
    def reportMatch(self, recognizer: Parser): ...
    def reportError(self, recognizer: Parser, e: RecognitionException): ...
    def recover(self, recognizer: Parser, e: RecognitionException): ...
    nextTokensState: Incomplete
    def sync(self, recognizer: Parser): ...
    def reportNoViableAlternative(self, recognizer: Parser, e: NoViableAltException): ...
    def reportInputMismatch(self, recognizer: Parser, e: InputMismatchException): ...
    def reportFailedPredicate(self, recognizer, e) -> None: ...
    def reportUnwantedToken(self, recognizer: Parser): ...
    def reportMissingToken(self, recognizer: Parser): ...
    def recoverInline(self, recognizer: Parser): ...
    def singleTokenInsertion(self, recognizer: Parser): ...
    def singleTokenDeletion(self, recognizer: Parser): ...
    def getMissingSymbol(self, recognizer: Parser): ...
    def getExpectedTokens(self, recognizer: Parser): ...
    def getTokenErrorDisplay(self, t: Token): ...
    def escapeWSAndQuote(self, s: str): ...
    def getErrorRecoverySet(self, recognizer: Parser): ...
    def consumeUntil(self, recognizer: Parser, set_: set): ...

class BailErrorStrategy(DefaultErrorStrategy):
    def recover(self, recognizer: Parser, e: RecognitionException): ...
    def recoverInline(self, recognizer: Parser): ...
    def sync(self, recognizer: Parser): ...
