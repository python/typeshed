from _typeshed import Incomplete
from antlr4.Token import Token as Token
from antlr4.error.Errors import IllegalStateException as IllegalStateException

Lexer: Incomplete

class TokenStream: ...

class BufferedTokenStream(TokenStream):
    tokenSource: Incomplete
    tokens: Incomplete
    index: int
    fetchedEOF: bool
    def __init__(self, tokenSource: Lexer) -> None: ...
    def mark(self): ...
    def release(self, marker: int): ...
    def reset(self) -> None: ...
    def seek(self, index: int): ...
    def get(self, index: int): ...
    def consume(self) -> None: ...
    def sync(self, i: int): ...
    def fetch(self, n: int): ...
    def getTokens(self, start: int, stop: int, types: set = ...): ...
    def LA(self, i: int): ...
    def LB(self, k: int): ...
    def LT(self, k: int): ...
    def adjustSeekIndex(self, i: int): ...
    def lazyInit(self) -> None: ...
    def setup(self) -> None: ...
    def setTokenSource(self, tokenSource: Lexer): ...
    def nextTokenOnChannel(self, i: int, channel: int): ...
    def previousTokenOnChannel(self, i: int, channel: int): ...
    def getHiddenTokensToRight(self, tokenIndex: int, channel: int = ...): ...
    def getHiddenTokensToLeft(self, tokenIndex: int, channel: int = ...): ...
    def filterForChannel(self, left: int, right: int, channel: int): ...
    def getSourceName(self): ...
    def getText(self, start: int = ..., stop: int = ...): ...
    def fill(self) -> None: ...
