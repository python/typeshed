from typing import Any, Optional

from dateparser.conf import apply_settings, check_settings
from dateparser.date_parser import date_parser
from dateparser.freshness_date_parser import freshness_date_parser
from dateparser.languages.loader import LocaleDataLoader
from dateparser.timezone_parser import pop_tz_offset_from_string
from dateparser.utils import apply_timezone_from_settings, set_correct_day_from_settings

APOSTROPHE_LOOK_ALIKE_CHARS: Any
RE_NBSP: Any
RE_SPACES: Any
RE_TRIM_SPACES: Any
RE_TRIM_COLONS: Any
RE_SANITIZE_SKIP: Any
RE_SANITIZE_RUSSIAN: Any
RE_SANITIZE_PERIOD: Any
RE_SANITIZE_ON: Any
RE_SANITIZE_APOSTROPHE: Any
RE_SEARCH_TIMESTAMP: Any

def sanitize_spaces(date_string: Any): ...
def date_range(begin: Any, end: Any, **kwargs: Any) -> None: ...
def get_intersecting_periods(low: Any, high: Any, period: str = ...) -> None: ...
def sanitize_date(date_string: Any): ...
def get_date_from_timestamp(date_string: Any, settings: Any): ...
def parse_with_formats(date_string: Any, date_formats: Any, settings: Any): ...

class _DateLocaleParser:
    locale: Any = ...
    date_string: Any = ...
    date_formats: Any = ...
    def __init__(self, locale: Any, date_string: Any, date_formats: Any, settings: Optional[Any] = ...) -> None: ...
    @classmethod
    def parse(cls, locale: Any, date_string: Any, date_formats: Optional[Any] = ..., settings: Optional[Any] = ...): ...

class DateData:
    date_obj: Any = ...
    period: Any = ...
    locale: Any = ...
    def __init__(self, *, date_obj: Optional[Any] = ..., period: Optional[Any] = ..., locale: Optional[Any] = ...) -> None: ...
    def __getitem__(self, k: Any): ...
    def __setitem__(self, k: Any, v: Any) -> None: ...

class DateDataParser:
    locale_loader: Any = ...
    try_previous_locales: Any = ...
    use_given_order: Any = ...
    languages: Any = ...
    locales: Any = ...
    region: Any = ...
    previous_locales: Any = ...
    def __init__(
        self,
        languages: Optional[Any] = ...,
        locales: Optional[Any] = ...,
        region: Optional[Any] = ...,
        try_previous_locales: bool = ...,
        use_given_order: bool = ...,
        settings: Optional[Any] = ...,
    ) -> None: ...
    def get_date_data(self, date_string: Any, date_formats: Optional[Any] = ...): ...
    def get_date_tuple(self, *args: Any, **kwargs: Any): ...
