from typing_extensions import Literal, TypeAlias

unicode = str

# jcconv.HIRA | jcconv.KATA | ...
Mode: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8]

# Output type matches input type (str | bytes)
def hira2kata(text: str, reserved: list[unicode] = ...) -> str: ...
def kata2hira(text: str, reserved: list[unicode] = ...) -> str: ...
def half2hira(text: str, reserved: list[unicode] = ...) -> str: ...
def hira2half(text: str, reserved: list[unicode] = ...) -> str: ...
def kata2half(text: str, reserved: list[unicode] = ...) -> str: ...
def half2kata(text: str, reserved: list[unicode] = ...) -> str: ...
def half2wide(text: str, reserved: list[unicode] = ...) -> str: ...
def wide2half(text: str, reserved: list[unicode] = ...) -> str: ...
def check_hira(text: str) -> bool: ...
def check_kata(text: str) -> bool: ...
def check_half(text: str) -> bool: ...
def convert(text: str, frm: Mode, to: Mode, reserved: list[unicode] = ...) -> str: ...

class jcconv:
    HIRA: int
    KATA: int
    HALF: int
    WNUM: int
    HNUM: int
    WALP: int
    HALP: int
    WSYM: int
    HSYM: int
    hira: list[unicode]
    kata: list[unicode]
    half: list[unicode]
    wnum: list[unicode]
    hnum: list[unicode]
    walp: list[unicode]
    halp: list[unicode]
    wsym: list[unicode]
    hsym: list[unicode]
    char_sets: list[list[unicode]]
