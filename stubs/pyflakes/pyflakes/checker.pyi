import ast
import tokenize
from collections.abc import Generator
from pyflakes import messages as messages
from typing import Any

PY2: Any
PY35_PLUS: Any
PY36_PLUS: Any
PY38_PLUS: Any
PYPY: bool
builtin_vars: Any
parse_format_string: Any
tokenize_tokenize = tokenize.tokenize

def getNodeType(node_class): ...
def get_raise_argument(node): ...

unicode = str

def getAlternatives(n): ...

FOR_TYPES: Any
LOOP_TYPES: Any
FUNCTION_TYPES: Any
ANNASSIGN_TYPES: Any
TYPE_COMMENT_RE: Any
ASCII_NON_ALNUM: Any
TYPE_IGNORE_RE: Any
TYPE_FUNC_RE: Any
MAPPING_KEY_RE: Any
CONVERSION_FLAG_RE: Any
WIDTH_RE: Any
PRECISION_RE: Any
LENGTH_RE: Any
VALID_CONVERSIONS: Any

def parse_percent_format(s: str) -> Tuple[PercentFormat, ...]: ...

class _FieldsOrder(dict):
    def __missing__(self, node_class): ...

def counter(items): ...
def iter_child_nodes(node, omit: Any | None = ..., _fields_order=...) -> Generator[Any, None, None]: ...
def convert_to_value(item): ...
def is_notimplemented_name_node(node): ...

class Binding:
    name: Any
    source: Any
    used: bool
    def __init__(self, name, source) -> None: ...
    def redefines(self, other): ...

class Definition(Binding): ...

class Builtin(Definition):
    def __init__(self, name) -> None: ...

class UnhandledKeyType: ...

class VariableKey:
    name: Any
    def __init__(self, item) -> None: ...
    def __eq__(self, compare): ...
    def __hash__(self): ...

class Importation(Definition):
    fullName: Any
    redefined: Any
    def __init__(self, name, source, full_name: Any | None = ...) -> None: ...
    def redefines(self, other): ...
    @property
    def source_statement(self): ...

class SubmoduleImportation(Importation):
    fullName: Any
    def __init__(self, name, source) -> None: ...
    def redefines(self, other): ...
    @property
    def source_statement(self): ...

class ImportationFrom(Importation):
    module: Any
    real_name: Any
    def __init__(self, name, source, module, real_name: Any | None = ...) -> None: ...
    @property
    def source_statement(self): ...

class StarImportation(Importation):
    name: Any
    fullName: Any
    def __init__(self, name, source) -> None: ...
    @property
    def source_statement(self): ...

class FutureImportation(ImportationFrom):
    used: Any
    def __init__(self, name, source, scope) -> None: ...

class Argument(Binding): ...
class Assignment(Binding): ...

class Annotation(Binding):
    def redefines(self, other): ...

class FunctionDefinition(Definition): ...
class ClassDefinition(Definition): ...

class ExportBinding(Binding):
    names: Any
    def __init__(self, name, source, scope) -> None: ...

class Scope(dict):
    importStarred: bool

class ClassScope(Scope): ...

class FunctionScope(Scope):
    usesLocals: bool
    alwaysUsed: Any
    globals: Any
    returnValue: Any
    isGenerator: bool
    def __init__(self) -> None: ...
    def unusedAssignments(self) -> Generator[Any, None, None]: ...

class GeneratorScope(Scope): ...
class ModuleScope(Scope): ...
class DoctestScope(ModuleScope): ...

class DummyNode:
    lineno: Any
    col_offset: Any
    def __init__(self, lineno, col_offset) -> None: ...

class DetectClassScopedMagic:
    names: Any

def getNodeName(node): ...

TYPING_MODULES: Any

def is_typing_overload(value, scope_stack): ...

class AnnotationState:
    NONE: int
    STRING: int
    BARE: int

def in_annotation(func): ...
def in_string_annotation(func): ...
def make_tokens(code): ...

class _TypeableVisitor(ast.NodeVisitor):
    typeable_lines: Any
    typeable_nodes: Any
    def __init__(self) -> None: ...
    visit_Assign: Any
    visit_For: Any
    visit_FunctionDef: Any
    visit_With: Any
    visit_AsyncFor: Any
    visit_AsyncFunctionDef: Any
    visit_AsyncWith: Any

class Checker:
    nodeDepth: int
    offset: Any
    builtIns: Any
    deadScopes: Any
    messages: Any
    filename: Any
    withDoctest: Any
    scopeStack: Any
    exceptHandlers: Any
    root: Any
    def __init__(self, tree, filename: str = ..., builtins: Any | None = ..., withDoctest=..., file_tokens=...) -> None: ...
    def deferFunction(self, callable) -> None: ...
    def deferAssignment(self, callable) -> None: ...
    def runDeferred(self, deferred) -> None: ...
    @property
    def futuresAllowed(self): ...
    @futuresAllowed.setter
    def futuresAllowed(self, value) -> None: ...
    @property
    def annotationsFutureEnabled(self): ...
    @annotationsFutureEnabled.setter
    def annotationsFutureEnabled(self, value) -> None: ...
    @property
    def scope(self): ...
    def popScope(self) -> None: ...
    def checkDeadScopes(self) -> None: ...
    def pushScope(self, scopeClass=...) -> None: ...
    def report(self, messageClass, *args, **kwargs) -> None: ...
    def getParent(self, node): ...
    def getCommonAncestor(self, lnode, rnode, stop): ...
    def descendantOf(self, node, ancestors, stop): ...
    def getScopeNode(self, node): ...
    def differentForks(self, lnode, rnode): ...
    def addBinding(self, node, value) -> None: ...
    def getNodeHandler(self, node_class): ...
    def handleNodeLoad(self, node) -> None: ...
    def handleNodeStore(self, node) -> None: ...
    def handleNodeDelete(self, node): ...
    def handleChildren(self, tree, omit: Any | None = ...) -> None: ...
    def isLiteralTupleUnpacking(self, node): ...
    def isDocstring(self, node): ...
    def getDocstring(self, node): ...
    def handleNode(self, node, parent) -> None: ...
    def handleDoctests(self, node) -> None: ...
    def handleStringAnnotation(self, s, node, ref_lineno, ref_col_offset, err) -> None: ...
    def handleAnnotation(self, annotation, node): ...
    def ignore(self, node) -> None: ...
    DELETE: Any
    PRINT: Any
    FOR: Any
    ASYNCFOR: Any
    WHILE: Any
    WITH: Any
    WITHITEM: Any
    ASYNCWITH: Any
    ASYNCWITHITEM: Any
    TRYFINALLY: Any
    EXEC: Any
    EXPR: Any
    ASSIGN: Any
    PASS: Any
    BOOLOP: Any
    UNARYOP: Any
    SET: Any
    REPR: Any
    ATTRIBUTE: Any
    STARRED: Any
    NAMECONSTANT: Any
    NAMEDEXPR: Any
    def SUBSCRIPT(self, node) -> None: ...
    def CALL(self, node) -> None: ...
    def BINOP(self, node) -> None: ...
    def STR(self, node) -> None: ...
    def CONSTANT(self, node): ...
    NUM: Any
    BYTES: Any
    ELLIPSIS: Any
    CONSTANT: Any
    SLICE: Any
    EXTSLICE: Any
    INDEX: Any
    LOAD: Any
    STORE: Any
    DEL: Any
    AUGLOAD: Any
    AUGSTORE: Any
    PARAM: Any
    AND: Any
    OR: Any
    ADD: Any
    SUB: Any
    MULT: Any
    DIV: Any
    MOD: Any
    POW: Any
    LSHIFT: Any
    RSHIFT: Any
    BITOR: Any
    BITXOR: Any
    BITAND: Any
    FLOORDIV: Any
    INVERT: Any
    NOT: Any
    UADD: Any
    USUB: Any
    EQ: Any
    NOTEQ: Any
    LT: Any
    LTE: Any
    GT: Any
    GTE: Any
    IS: Any
    ISNOT: Any
    IN: Any
    NOTIN: Any
    MATMULT: Any
    def RAISE(self, node) -> None: ...
    COMPREHENSION: Any
    KEYWORD: Any
    FORMATTEDVALUE: Any
    def JOINEDSTR(self, node) -> None: ...
    def DICT(self, node) -> None: ...
    def IF(self, node) -> None: ...
    IFEXP: Any
    def ASSERT(self, node) -> None: ...
    def GLOBAL(self, node) -> None: ...
    NONLOCAL: Any
    def GENERATOREXP(self, node) -> None: ...
    LISTCOMP: Any
    DICTCOMP: Any
    SETCOMP: Any
    def NAME(self, node) -> None: ...
    def CONTINUE(self, node) -> None: ...
    BREAK: Any
    def RETURN(self, node) -> None: ...
    def YIELD(self, node) -> None: ...
    AWAIT: Any
    YIELDFROM: Any
    def FUNCTIONDEF(self, node): ...
    ASYNCFUNCTIONDEF: Any
    def LAMBDA(self, node) -> None: ...
    def ARGUMENTS(self, node) -> None: ...
    def ARG(self, node) -> None: ...
    def CLASSDEF(self, node): ...
    def AUGASSIGN(self, node) -> None: ...
    def TUPLE(self, node) -> None: ...
    LIST: Any
    def IMPORT(self, node) -> None: ...
    def IMPORTFROM(self, node) -> None: ...
    def TRY(self, node) -> None: ...
    TRYEXCEPT: Any
    def EXCEPTHANDLER(self, node) -> None: ...
    def ANNASSIGN(self, node) -> None: ...
    def COMPARE(self, node) -> None: ...
    MATCH: Any
    MATCH_CASE: Any
    MATCHCLASS: Any
    MATCHOR: Any
    MATCHSEQUENCE: Any
    MATCHSINGLETON: Any
    MATCHVALUE: Any
    MATCHAS: Any
    MATCHMAPPING: Any
    MATCHSTAR: Any
