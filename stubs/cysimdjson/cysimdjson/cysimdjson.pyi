from collections.abc import Generator

MAXSIZE_BYTES: int
PADDING: int
SIMDJSON_VERSION: str

class JSONArray:
    def at_pointer(self, key: str) -> JSONElement: ...
    def export(self) -> list[object]: ...
    def get_addr(self) -> int: ...
    def get_value(self) -> JSONElement: ...
    def __contains__(self, item: JSONElement) -> bool: ...
    def __getitem__(self, key: int) -> JSONElement: ...
    def __iter__(self) -> Generator[JSONElement]: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class JSONElement:
    def at_pointer(self, key: str) -> JSONElement: ...
    def export(self) -> object: ...
    def get_addr(self) -> int: ...
    def get_value(self) -> JSONElement: ...
    def __reduce__(self): ...

class JSONObject:
    def at_pointer(self, key: str) -> JSONElement: ...
    def export(self) -> dict[str, object]: ...
    def get(self, key: str, default: JSONElement | None = None) -> JSONElement | None: ...
    def get_addr(self, *args, **kwargs) -> int: ...
    def get_value(self) -> JSONElement: ...
    def items(self) -> Generator[tuple[str, JSONElement]]: ...
    def keys(self) -> Generator[str]: ...
    def __contains__(self, key: str) -> bool: ...
    def __getitem__(self, key: str) -> JSONElement: ...
    def __iter__(self) -> Generator[str]: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class JSONParser:
    def __init__(self, max_capacity: int | None = None) -> None: ...
    def active_implementation(self) -> str: ...
    def load(self, path: str) -> JSONElement: ...
    def loads(self, content: str) -> JSONElement: ...
    def parse(self, event: bytes) -> JSONElement: ...
    def parse_in_place(self, event: bytes) -> JSONElement: ...
    def parse_string(self, event: str) -> JSONElement: ...
    def __reduce__(self): ...

def addr_to_element(element_addr: int) -> JSONElement: ...
