from _typeshed import Incomplete
from collections.abc import MutableMapping
from threading import Thread
from typing import Any, Callable, Literal, TypeVar
from typing_extensions import TypeAlias

import pywsgi
import socketio
from flask import Flask
from flask.sessions import SessionMixin
from socketio import socketio_manage as socketio_manage

from .namespace import Namespace
from .test_client import SocketIOTestClient

_ExceptionHandler = TypeVar("_ExceptionHandler", Callable)
_Handler = TypeVar("Handler", Callable)
_Environ = TypeVar("Environ", MutableMapping[str, Any])

_HandlerDecorator: TypeAlias = Callable[_Handler, _Handler]

gevent_socketio_found: bool

class _SocketIOMiddleware(socketio.WSGIApp):
    flask_app: Incomplete
    def __init__(self, socketio_app: socketio.Server, flask_app: Flask, socketio_path: str = "socket.io") -> None: ...
    def __call__(self, environ: _Environ, start_response: Callable[[str, list[tuple[str, str]]]]): ...

class _ManagedSession(dict, SessionMixin): ...

class SocketIO:
    server: socketio.Server | None
    server_options: dict[str, Any]
    wsgi_server: pywsgi.WSGIServer | None
    handlers: list[_Handler]
    namespace_handlers: list
    exception_handlers: list[_ExceptionHandler]
    default_exception_handler: None | _ExceptionHandler
    manage_session: bool
    def __init__(self, app: Flask | None = None, **kwargs) -> None: ...
    async_mode: Literal["threading", "eventlet", "gevent", "gevent_uwsgi"]
    sockio_mw: _SocketIOMiddleware | None
    def init_app(self, app: Flask, **kwargs): ...
    def on(self, message: str, namespace=None) -> _HandlerDecorator: ...
    def on_error(self, namespace=None) -> Callable[_ExceptionHandler, _ExceptionHandler]: ...
    def on_error_default(self, exception_handler: _ExceptionHandler) -> Callable[_ExceptionHandler, _ExceptionHandler]: ...
    def on_event(self, message: str, handler: _Handler, namespace=None) -> None: ...
    def event(self, *args, **kwargs) -> _Handler | Callable[[_Handler], _HandlerDecorator]: ...
    def on_namespace(self, namespace_handler: Namespace) -> None: ...
    def emit(self, event: str, *args, **kwargs) -> None: ...
    def call(self, event: str, *args, **kwargs): ...
    def send(
        self,
        data: Any,
        json: bool = False,
        namespace=None,
        to=None,
        callback: Callable | None = None,
        include_self: bool = True,
        skip_sid: list[str] | str | None = None,
        **kwargs,
    ) -> None: ...
    def close_room(self, room, namespace=None) -> None: ...
    def run(self, app, host: str | None = None, port: int | str | None = None, **kwargs) -> None: ...
    def stop(self) -> None: ...
    def start_background_task(self, target: Callable, *args, **kwargs) -> Thread: ...
    def sleep(self, seconds: int = 0): ...
    def test_client(
        self,
        app: Flask,
        namespace=None,
        query_string: str | None = None,
        headers: dict[str, Any] | None = None,
        auth: dict[str, Any] | None = None,
        flask_test_client: Incomplete | None = None,
    ) -> SocketIOTestClient: ...

def emit(event, *args, **kwargs) -> None: ...
def call(event, *args, **kwargs): ...
def send(message: str, **kwargs) -> None: ...
def join_room(room, sid: str | None = None, namespace=None) -> None: ...
def leave_room(room, sid: str | None = None, namespace=None) -> None: ...
def close_room(room, namespace=None) -> None: ...
def rooms(sid: str | None = None, namespace=None) -> list[str]: ...
def disconnect(sid: str | None = None, namespace=None, silent: bool = False) -> None: ...
