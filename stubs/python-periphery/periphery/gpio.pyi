import ctypes
from _typeshed import Incomplete

KERNEL_VERSION: Incomplete

class GPIOError(IOError): ...

class EdgeEvent:
    def __new__(cls, edge, timestamp): ...

class GPIO:
    def __new__(cls, *args, **kwargs): ...
    def __del__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t, value, traceback) -> None: ...
    def read(self) -> None: ...
    def write(self, value) -> None: ...
    def poll(self, timeout: Incomplete | None = ...) -> None: ...
    def read_event(self) -> None: ...
    @staticmethod
    def poll_multiple(gpios, timeout: Incomplete | None = ...): ...
    def close(self) -> None: ...
    @property
    def devpath(self) -> None: ...
    @property
    def fd(self) -> None: ...
    @property
    def line(self) -> None: ...
    @property
    def name(self) -> None: ...
    @property
    def label(self) -> None: ...
    @property
    def chip_fd(self) -> None: ...
    @property
    def chip_name(self) -> None: ...
    @property
    def chip_label(self) -> None: ...
    direction: Incomplete
    edge: Incomplete
    bias: Incomplete
    drive: Incomplete
    inverted: Incomplete

class _CGpiochipInfo(ctypes.Structure): ...
class _CGpiolineInfo(ctypes.Structure): ...
class _CGpiohandleRequest(ctypes.Structure): ...
class _CGpiohandleData(ctypes.Structure): ...
class _CGpioeventRequest(ctypes.Structure): ...
class _CGpioeventData(ctypes.Structure): ...

class CdevGPIO(GPIO):
    def __init__(
        self,
        path,
        line,
        direction,
        edge: str = ...,
        bias: str = ...,
        drive: str = ...,
        inverted: bool = ...,
        label: Incomplete | None = ...,
    ) -> None: ...
    def __new__(self, path, line, direction, **kwargs): ...
    def read(self): ...
    def write(self, value) -> None: ...
    def poll(self, timeout: Incomplete | None = ...): ...
    def read_event(self): ...
    def close(self) -> None: ...
    @property
    def devpath(self): ...
    @property
    def fd(self): ...
    @property
    def line(self): ...
    @property
    def name(self): ...
    @property
    def label(self): ...
    @property
    def chip_fd(self): ...
    @property
    def chip_name(self): ...
    @property
    def chip_label(self): ...
    direction: Incomplete
    edge: Incomplete
    bias: Incomplete
    drive: Incomplete
    inverted: Incomplete

class SysfsGPIO(GPIO):
    GPIO_OPEN_RETRIES: int
    GPIO_OPEN_DELAY: float
    def __init__(self, line, direction) -> None: ...
    def __new__(self, line, direction): ...
    def read(self): ...
    def write(self, value) -> None: ...
    def poll(self, timeout: Incomplete | None = ...): ...
    def read_event(self) -> None: ...
    def close(self) -> None: ...
    @property
    def devpath(self): ...
    @property
    def fd(self): ...
    @property
    def line(self): ...
    @property
    def name(self): ...
    @property
    def label(self): ...
    @property
    def chip_fd(self) -> None: ...
    @property
    def chip_name(self): ...
    @property
    def chip_label(self): ...
    direction: Incomplete
    edge: Incomplete
    bias: Incomplete
    drive: Incomplete
    inverted: Incomplete
