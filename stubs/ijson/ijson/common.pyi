from _typeshed import Incomplete
from collections.abc import Generator

class JSONError(Exception): ...
class IncompleteJSONError(JSONError): ...

def parse_basecoro(target) -> Generator[None, Incomplete]: ...

class ObjectBuilder:
    value: Incomplete
    containers: Incomplete
    map_type: Incomplete
    def __init__(self, map_type: Incomplete | None = None) -> None: ...
    key: Incomplete
    def event(self, event, value) -> None: ...

def items_basecoro(target, prefix, map_type: Incomplete | None = None) -> Generator[None, Incomplete]: ...
def kvitems_basecoro(target, prefix, map_type: Incomplete | None = None) -> Generator[None, Incomplete]: ...
def integer_or_decimal(str_value): ...
def integer_or_float(str_value): ...
def number(str_value): ...
def file_source(f, buf_size=65536) -> Generator[Incomplete]: ...
def is_awaitablefunction(func): ...
def is_async_file(f): ...
def is_file(x): ...
def is_iterable(x): ...
def parse(events): ...
def kvitems(events, prefix, map_type: Incomplete | None = None): ...
def items(events, prefix, map_type: Incomplete | None = None): ...
def enrich_backend(backend) -> None: ...
