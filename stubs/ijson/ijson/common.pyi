from _typeshed import Incomplete, ReadableBuffer, SupportsRead
from collections.abc import Generator
from decimal import Decimal
from typing import Any, Callable, Iterable, MutableMapping
from typing_extensions import TypeGuard

class JSONError(Exception): ...
class IncompleteJSONError(JSONError): ...

def parse_basecoro(target: Generator[Any, tuple[str, str, Any]]) -> Generator[None, None, None]: ...

class ObjectBuilder:
    value: Any
    containers: list[Callable[[object], object]]
    map_type: type[MutableMapping[Any, Any]]
    def __init__(self, map_type: type[MutableMapping[Any, Any]] | None = None) -> None: ...
    key: Any
    def event(self, event: str, value: Any) -> None: ...

def items_basecoro(target, prefix, map_type: Incomplete | None = None) -> Generator[None, Incomplete]: ...
def kvitems_basecoro(target, prefix, map_type: Incomplete | None = None) -> Generator[None, Incomplete]: ...
def integer_or_decimal(str_value: str): ...
def integer_or_float(str_value: str) -> Decimal | int: ...
def number(str_value: str) -> int | float: ...
def file_source(f: SupportsRead[str] | SupportsRead[ReadableBuffer], buf_size: int = 65536) -> Generator[bytes]: ...
def is_awaitablefunction(func: Callable[..., Any]) -> bool: ...
def is_async_file(f: Any) -> bool: ...
def is_file(x: object) -> TypeGuard[SupportsRead[Any]]: ...
def is_iterable(x: object) -> TypeGuard[Iterable[Any]]: ...
def parse(events): ...
def kvitems(events, prefix, map_type: Incomplete | None = None): ...
def items(events, prefix, map_type: Incomplete | None = None): ...
def enrich_backend(backend: dict[str, Any]) -> None: ...
