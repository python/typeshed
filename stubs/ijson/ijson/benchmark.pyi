from _typeshed import Incomplete

def benchmark(f): ...
def long_list(n): ...
def big_int_object(n): ...
def big_decimal_object(n): ...
def big_null_object(n): ...
def big_bool_object(n): ...
def big_str_object(n): ...
def big_longstr_object(n): ...
def object_with_10_keys(n): ...
def empty_lists(n): ...
def empty_objects(n): ...
def parse_benchmarks(s): ...

BACKEND_NAMES: Incomplete

def load_backends(): ...
def parse_backends(s): ...

class progress_message:
    message: Incomplete
    def __init__(self, message) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...

class AsyncReader:
    data: Incomplete
    def __init__(self, data) -> None: ...
    async def read(self, n: int = -1): ...
    def close(self) -> None: ...

def median(values): ...
def stats(values): ...
def run_benchmarks(args, benchmark_func: Incomplete | None = None, fname: Incomplete | None = None): ...
def main() -> None: ...
