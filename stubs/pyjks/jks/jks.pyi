from _typeshed import Incomplete

from pyasn1.type import namedtype as namedtype, univ as univ

from .util import *

__version_info__: Incomplete
MAGIC_NUMBER_JKS: Incomplete
MAGIC_NUMBER_JCEKS: Incomplete
SIGNATURE_WHITENING: bytes

class TrustedCertEntry(AbstractKeystoreEntry):
    type: Incomplete
    cert: Incomplete
    def __init__(self, **kwargs) -> None: ...
    @classmethod
    def new(cls, alias, cert): ...
    def is_decrypted(self): ...
    def decrypt(self, key_password) -> None: ...
    def encrypt(self, key_password) -> None: ...

class PrivateKeyEntry(AbstractKeystoreEntry):
    cert_chain: Incomplete
    def __init__(self, **kwargs) -> None: ...
    @classmethod
    def new(cls, alias, certs, key, key_format: str = "pkcs8"): ...
    def __getattr__(self, name): ...
    def is_decrypted(self): ...
    def decrypt(self, key_password) -> None: ...
    def encrypt(self, key_password) -> None: ...

class SecretKeyEntry(AbstractKeystoreEntry):
    def __init__(self, **kwargs) -> None: ...
    @classmethod
    def new(cls, alias, sealed_obj, algorithm, key, key_size) -> None: ...
    def __getattr__(self, name): ...
    def is_decrypted(self): ...
    def decrypt(self, key_password) -> None: ...
    def encrypt(self, key_password) -> None: ...

class KeyStore(AbstractKeystore):
    @classmethod
    def new(cls, store_type, store_entries): ...
    @classmethod
    def loads(cls, data, store_password, try_decrypt_keys: bool = True): ...
    def saves(self, store_password): ...
    def __init__(self, store_type, entries) -> None: ...
    @property
    def certs(self): ...
    @property
    def secret_keys(self): ...
    @property
    def private_keys(self): ...
