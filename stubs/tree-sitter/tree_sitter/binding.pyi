from typing import Any, ClassVar
from _typeshed import Incomplete
from tree_sitter import Language

class Node:
    @property
    def start_byte(self) ->  int: ...
    @property
    def start_point(self) ->  tuple[int,int]: ...
    @property
    def end_byte(self) -> int: ...
    @property
    def end_point(self) -> tuple[int,int]: ...
    @property
    def has_changes(self) -> bool: ...
    @property
    def has_error(self) -> bool: ...
    @property
    def is_missing(self) -> bool: ...
    @property
    def is_named(self) -> bool: ...
    @property
    def child_count(self) -> int: ...
    @property
    def named_child_count(self) -> bool: ...
    @property
    def children(self) -> list[Node]: ...
    @property
    def next_named_sibling(self) ->  Node|None: ...
    @property
    def next_sibling(self) ->  Node|None: ...
    @property
    def parent(self) ->  Node|None: ...
    @property
    def prev_named_sibling(self) ->  Node|None: ...
    @property
    def prev_sibling(self) ->  Node|None: ...
    @property
    def text(self) ->  bytes: ...
    @property
    def type(self) ->  str: ...
    __hash__: ClassVar[None]  # type: ignore[assignment]
    def child_by_field_id(self, __id: int) -> Node|None: ...
    def child_by_field_name(self,__name:str)->Node|None: ...
    def sexp(self)->str: ...
    def walk(self)->TreeCursor: ...
    def __eq__(self, other:object)->bool: ...
    def __ne__(self, other:object)->bool: ...
    # There are __ge__, __gt__, __le__, __lt__ methods but they seem to always return False
    #
    #    >>> n
    #    <Node kind=call, start_point=(0, 0), end_point=(0, 14)>
    #    >>> n >= "", n <= "", n >= 0, n <= 0, n >= (0,0), n <= (0,0)
    #    (False, False, False, False, False, False)
    def __ge__(self, other:object)->bool: ...
    def __gt__(self, other:object)->bool: ...
    def __le__(self, other:object)->bool: ...
    def __lt__(self, other:object)->bool: ...

class Parser:
    # At runtime, Parser(1, 2, 3) ignores the arguments, but that's most likely buggy code
    def __init__(self) -> None: ...
    def parse(self, source: bytes, old_tree: Tree | None = ..., keep_text: bool = ...) -> Tree: ...
    def set_language(self, __language: Language) -> None: ...

class Query:
    def captures(self, *args, **kwargs): ...
    def matches(self, *args, **kwargs): ...

class Tree:
    @property
    def root_node(self)-> Node:...
    @property
    def text(self)->bytes:...
    def edit(self, start_byte: int, old_end_byte: int, new_end_byte: int, start_point: tuple[int, int], old_end_point: tuple[int, int], new_end_point: tuple[int, int])->None: ...
    def walk(self) -> TreeCursor: ...

class TreeCursor:
    @property
    def node(self)->Node:...
    def current_field_name(self) -> None | Incomplete: ...
    def goto_first_child(self) -> bool: ...
    def goto_next_sibling(self) -> bool: ...
    def goto_parent(self) -> bool: ...
