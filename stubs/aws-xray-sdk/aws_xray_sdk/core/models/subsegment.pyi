from typing import Any

from ..exceptions.exceptions import SegmentNotFoundException as SegmentNotFoundException
from .entity import Entity as Entity

SUBSEGMENT_RECORDING_ATTRIBUTE: str

def set_as_recording(decorated_func, wrapped) -> None: ...
def is_already_recording(func): ...
def subsegment_decorator(wrapped, instance, args, kwargs): ...

class SubsegmentContextManager:
    name: Any
    subsegment_kwargs: Any
    recorder: Any
    subsegment: Any
    def __init__(self, recorder, name: Any | None = ..., **subsegment_kwargs) -> None: ...
    def __call__(self, wrapped, instance, args, kwargs): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

class Subsegment(Entity):
    parent_segment: Any
    trace_id: Any
    type: str
    namespace: Any
    sql: Any
    def __init__(self, name, namespace, segment) -> None: ...
    def add_subsegment(self, subsegment) -> None: ...
    def remove_subsegment(self, subsegment) -> None: ...
    def close(self, end_time: Any | None = ...) -> None: ...
    def set_sql(self, sql) -> None: ...
    def to_dict(self): ...
