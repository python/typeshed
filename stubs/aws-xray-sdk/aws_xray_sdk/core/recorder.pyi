from typing import Any

from aws_xray_sdk import global_sdk_config as global_sdk_config
from aws_xray_sdk.version import VERSION as VERSION

from .context import Context as Context
from .daemon_config import DaemonConfig as DaemonConfig
from .emitters.udp_emitter import UDPEmitter as UDPEmitter
from .exceptions.exceptions import (
    SegmentNameMissingException as SegmentNameMissingException,
    SegmentNotFoundException as SegmentNotFoundException,
)
from .lambda_launcher import check_in_lambda as check_in_lambda
from .models.default_dynamic_naming import DefaultDynamicNaming as DefaultDynamicNaming
from .models.dummy_entities import DummySegment as DummySegment, DummySubsegment as DummySubsegment
from .models.segment import Segment as Segment, SegmentContextManager as SegmentContextManager
from .models.subsegment import Subsegment as Subsegment, SubsegmentContextManager as SubsegmentContextManager
from .plugins.utils import get_plugin_modules as get_plugin_modules
from .sampling.local.sampler import LocalSampler as LocalSampler
from .sampling.sampler import DefaultSampler as DefaultSampler
from .streaming.default_streaming import DefaultStreaming as DefaultStreaming
from .utils import stacktrace as stacktrace
from .utils.compat import string_types as string_types

log: Any
TRACING_NAME_KEY: str
DAEMON_ADDR_KEY: str
CONTEXT_MISSING_KEY: str
XRAY_META: Any
SERVICE_INFO: Any

class AWSXRayRecorder:
    def __init__(self) -> None: ...
    def configure(
        self,
        sampling: Any | None = ...,
        plugins: Any | None = ...,
        context_missing: Any | None = ...,
        sampling_rules: Any | None = ...,
        daemon_address: Any | None = ...,
        service: Any | None = ...,
        context: Any | None = ...,
        emitter: Any | None = ...,
        streaming: Any | None = ...,
        dynamic_naming: Any | None = ...,
        streaming_threshold: Any | None = ...,
        max_trace_back: Any | None = ...,
        sampler: Any | None = ...,
        stream_sql: bool = ...,
    ) -> None: ...
    def in_segment(self, name: Any | None = ..., **segment_kwargs): ...
    def in_subsegment(self, name: Any | None = ..., **subsegment_kwargs): ...
    def begin_segment(
        self, name: Any | None = ..., traceid: Any | None = ..., parent_id: Any | None = ..., sampling: Any | None = ...
    ): ...
    def end_segment(self, end_time: Any | None = ...) -> None: ...
    def current_segment(self): ...
    def begin_subsegment(self, name, namespace: str = ...): ...
    def current_subsegment(self): ...
    def end_subsegment(self, end_time: Any | None = ...) -> None: ...
    def put_annotation(self, key, value) -> None: ...
    def put_metadata(self, key, value, namespace: str = ...) -> None: ...
    def is_sampled(self): ...
    def get_trace_entity(self): ...
    def set_trace_entity(self, trace_entity) -> None: ...
    def clear_trace_entities(self) -> None: ...
    def stream_subsegments(self) -> None: ...
    def capture(self, name: Any | None = ...): ...
    def record_subsegment(self, wrapped, instance, args, kwargs, name, namespace, meta_processor): ...
    @property
    def enabled(self): ...
    @enabled.setter
    def enabled(self, value) -> None: ...
    @property
    def sampling(self): ...
    @sampling.setter
    def sampling(self, value) -> None: ...
    @property
    def sampler(self): ...
    @sampler.setter
    def sampler(self, value) -> None: ...
    @property
    def service(self): ...
    @service.setter
    def service(self, value) -> None: ...
    @property
    def dynamic_naming(self): ...
    @dynamic_naming.setter
    def dynamic_naming(self, value) -> None: ...
    @property
    def context(self): ...
    @context.setter
    def context(self, cxt) -> None: ...
    @property
    def emitter(self): ...
    @emitter.setter
    def emitter(self, value) -> None: ...
    @property
    def streaming(self): ...
    @streaming.setter
    def streaming(self, value) -> None: ...
    @property
    def streaming_threshold(self): ...
    @streaming_threshold.setter
    def streaming_threshold(self, value) -> None: ...
    @property
    def max_trace_back(self): ...
    @max_trace_back.setter
    def max_trace_back(self, value) -> None: ...
    @property
    def stream_sql(self): ...
    @stream_sql.setter
    def stream_sql(self, value) -> None: ...
