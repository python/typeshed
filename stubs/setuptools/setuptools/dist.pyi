from _typeshed import Incomplete
from collections.abc import Generator, Iterable, Mapping
from typing import Any

from setuptools import SetuptoolsDeprecationWarning

from ._distutils.dist import Distribution as _Distribution

class Distribution(_Distribution):
    def patch_missing_pkg_info(self, attrs: Mapping[str, Any]) -> None: ...
    package_data: dict[str, list[str]]
    dist_files: list[str]
    src_root: str | None
    dependency_links: list[str]
    setup_requires: list[str]
    def __init__(self, attrs: dict[str, Any] | None = ...) -> None: ...
    def warn_dash_deprecation(self, opt: str, section: str) -> str: ...
    def make_option_lowercase(self, opt: str, section: str) -> str: ...
    def parse_config_files(self, filenames: Iterable[str] | None = ..., ignore_option_errors: bool = ...) -> None: ...
    def fetch_build_eggs(self, requires: str | Iterable[str]): ...
    def finalize_options(self) -> None: ...
    def get_egg_cache_dir(self) -> str: ...
    def fetch_build_egg(self, req): ...
    def get_command_class(self, command: str): ...
    def print_commands(self): ...
    def get_command_list(self): ...
    def include(self, **attrs) -> None: ...
    packages: Incomplete
    py_modules: Incomplete
    ext_modules: Incomplete
    def exclude_package(self, package: str) -> None: ...
    def has_contents_for(self, package: str) -> bool | None: ...
    def exclude(self, **attrs) -> None: ...
    def get_cmdline_options(self) -> dict[str, dict[str, str | None]]: ...
    def iter_distribution_names(self) -> Generator[str, None, None]: ...
    def handle_display_options(self, option_order): ...
    def run_command(self, command: str) -> None: ...

class DistDeprecationWarning(SetuptoolsDeprecationWarning): ...
