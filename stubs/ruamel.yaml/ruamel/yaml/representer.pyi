from _typeshed import Unused
from collections import OrderedDict
from collections.abc import Collection, Mapping, Set as AbstractSet
from datetime import date, datetime
from types import ModuleType
from typing import Any, ClassVar, Final, NoReturn, Protocol, TypeVar
from typing_extensions import Self

from .anchor import Anchor
from .comments import CommentedMap, CommentedSeq, CommentedSet, TaggedScalar
from .dumper import _Dumper
from .error import YAMLError
from .main import YAML
from .nodes import MappingNode, Node, ScalarNode, SequenceNode
from .scalarbool import ScalarBoolean
from .scalarfloat import ScalarFloat
from .scalarint import BinaryInt, HexCapsInt, HexInt, OctalInt, ScalarInt, _Underscore
from .scalarstring import (
    DoubleQuotedScalarString,
    FoldedScalarString,
    LiteralScalarString,
    PlainScalarString,
    SingleQuotedScalarString,
)
from .serializer import Serializer
from .tag import Tag
from .timestamp import TimeStamp
from .tokens import _CommentGroup, _ScalarStyle

__all__ = ["BaseRepresenter", "SafeRepresenter", "Representer", "RepresenterError", "RoundTripRepresenter"]

_T = TypeVar("_T")
_T_contra = TypeVar("_T_contra", contravariant=True)
_Representer = TypeVar("_Representer", bound=BaseRepresenter, contravariant=True)

class _RepresenterFunction(Protocol[_Representer, _T_contra]):
    def __call__(self, dumper: _Representer, data: _T_contra, /) -> Node: ...

class RepresenterError(YAMLError): ...

class BaseRepresenter:
    yaml_representers: ClassVar[dict[type | None, _RepresenterFunction[Self, Any]]]
    yaml_multi_representers: ClassVar[dict[type | None, _RepresenterFunction[Self, Any]]]
    dumper: YAML | _Dumper | None
    default_style: _ScalarStyle | None
    default_flow_style: bool | None
    represented_objects: dict[int, Node]
    object_keeper: list[Any]
    alias_key: int | None
    sort_base_mapping_type_on_output: bool
    def __init__(
        self,
        default_style: _ScalarStyle | None = None,
        default_flow_style: bool | None = None,
        dumper: YAML | _Dumper | None = None,
    ) -> None: ...
    @property
    def serializer(self) -> Serializer: ...
    def represent(self, data: Any) -> None: ...
    def represent_data(self, data: Any) -> Node: ...
    def represent_key(self, data: Any) -> Node: ...
    @classmethod
    def add_representer(cls, data_type: type[_T] | None, representer: _RepresenterFunction[Self, _T]) -> None: ...
    @classmethod
    def add_multi_representer(cls, data_type: type[_T] | None, representer: _RepresenterFunction[Self, _T]) -> None: ...
    def represent_scalar(
        self, tag: Tag | str | None, value: str, style: _ScalarStyle | None = None, anchor: Anchor | None = None
    ) -> ScalarNode: ...
    def represent_sequence(
        self, tag: Tag | str | None, sequence: Collection[Any], flow_style: bool | None = None
    ) -> SequenceNode: ...
    def represent_omap(
        self, tag: Tag | str | None, omap: OrderedDict[Any, Any], flow_style: bool | None = None
    ) -> SequenceNode: ...
    def represent_mapping(
        self, tag: Tag | str | None, mapping: Mapping[Any, Any], flow_style: bool | None = None
    ) -> MappingNode: ...
    def ignore_aliases(self, data: Any) -> bool: ...

class SafeRepresenter(BaseRepresenter):
    def ignore_aliases(self, data: Any) -> bool: ...
    def represent_none(self, data: None) -> ScalarNode: ...
    def represent_str(self, data: str) -> ScalarNode: ...
    def represent_binary(self, data: bytes) -> ScalarNode: ...
    def represent_bool(self, data: bool, anchor: Anchor | None = None) -> ScalarNode: ...
    def represent_int(self, data: int) -> ScalarNode: ...
    inf_value: Final[float]
    def represent_float(self, data: float) -> ScalarNode: ...
    def represent_list(self, data: Collection[Any]) -> SequenceNode: ...
    def represent_dict(self, data: Mapping[Any, Any]) -> MappingNode: ...
    def represent_ordereddict(self, data: OrderedDict[Any, Any]) -> SequenceNode: ...
    def represent_set(self, data: AbstractSet[Any]) -> MappingNode: ...
    def represent_date(self, data: date) -> ScalarNode: ...
    def represent_datetime(self, data: datetime) -> ScalarNode: ...
    def represent_yaml_object(
        self, tag: Tag | str | None, data: Any, cls: Unused, flow_style: bool | None = None
    ) -> MappingNode: ...
    def represent_undefined(self, data: object) -> NoReturn: ...

class Representer(SafeRepresenter):
    def represent_complex(self, data: complex) -> ScalarNode: ...
    def represent_tuple(self, data: tuple[Any, ...]) -> SequenceNode: ...
    def represent_name(self, data: Any) -> ScalarNode: ...
    def represent_module(self, data: ModuleType) -> ScalarNode: ...
    def represent_object(self, data: Any) -> Node: ...

class RoundTripRepresenter(SafeRepresenter):
    def __init__(
        self,
        default_style: _ScalarStyle | None = None,
        default_flow_style: bool | None = None,
        dumper: YAML | _Dumper | None = None,
    ) -> None: ...
    def ignore_aliases(self, data: Any) -> bool: ...
    def represent_none(self, data: None) -> ScalarNode: ...
    def represent_literal_scalarstring(self, data: LiteralScalarString) -> ScalarNode: ...
    represent_preserved_scalarstring = represent_literal_scalarstring
    def represent_folded_scalarstring(self, data: FoldedScalarString) -> ScalarNode: ...
    def represent_single_quoted_scalarstring(self, data: SingleQuotedScalarString) -> ScalarNode: ...
    def represent_double_quoted_scalarstring(self, data: DoubleQuotedScalarString) -> ScalarNode: ...
    def represent_plain_scalarstring(self, data: PlainScalarString) -> ScalarNode: ...
    def insert_underscore(
        self, prefix: str, s: str, underscore: _Underscore | None, anchor: Anchor | None = None
    ) -> ScalarNode: ...
    def represent_scalar_int(self, data: ScalarInt) -> ScalarNode: ...
    def represent_binary_int(self, data: BinaryInt) -> ScalarNode: ...
    def represent_octal_int(self, data: OctalInt) -> ScalarNode: ...
    def represent_hex_int(self, data: HexInt) -> ScalarNode: ...
    def represent_hex_caps_int(self, data: HexCapsInt) -> ScalarNode: ...
    def represent_scalar_float(self, data: ScalarFloat) -> ScalarNode: ...
    def represent_sequence(
        self, tag: Tag | str | None, sequence: Collection[Any], flow_style: bool | None = None
    ) -> SequenceNode: ...
    def merge_comments(self, node: Node, comments: _CommentGroup | None) -> Node: ...
    def represent_key(self, data: Any) -> Node: ...
    def represent_mapping(
        self, tag: Tag | str | None, mapping: Mapping[Any, Any], flow_style: bool | None = None
    ) -> MappingNode: ...
    def represent_omap(
        self, tag: Tag | str | None, omap: OrderedDict[Any, Any], flow_style: bool | None = None
    ) -> SequenceNode: ...
    def represent_set(self, setting: CommentedSet[Any]) -> MappingNode: ...  # type: ignore[override]
    def represent_dict(self, data: CommentedMap[Any, Any]) -> MappingNode: ...  # type: ignore[override]
    def represent_list(self, data: CommentedSeq[Any]) -> SequenceNode: ...  # type: ignore[override]
    def represent_datetime(self, data: TimeStamp) -> ScalarNode: ...  # type: ignore[override]
    def represent_tagged_scalar(self, data: TaggedScalar) -> ScalarNode: ...
    def represent_scalar_bool(self, data: ScalarBoolean) -> ScalarNode: ...
    def represent_yaml_object(
        self, tag: Tag | str | None, data: Any, cls: Unused, flow_style: bool | None = None
    ) -> MappingNode: ...
