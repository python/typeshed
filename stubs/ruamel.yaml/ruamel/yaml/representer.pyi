from _typeshed import Incomplete

from .error import *
from .nodes import *

__all__ = ["BaseRepresenter", "SafeRepresenter", "Representer", "RepresenterError", "RoundTripRepresenter"]

class RepresenterError(YAMLError): ...

class BaseRepresenter:
    yaml_representers: dict
    yaml_multi_representers: dict
    dumper: Incomplete
    default_style: Incomplete
    default_flow_style: Incomplete
    represented_objects: Incomplete
    object_keeper: Incomplete
    alias_key: Incomplete
    sort_base_mapping_type_on_output: bool
    def __init__(
        self,
        default_style: Incomplete | None = None,
        default_flow_style: Incomplete | None = None,
        dumper: Incomplete | None = None,
    ) -> None: ...
    @property
    def serializer(self): ...
    def represent(self, data) -> None: ...
    def represent_data(self, data): ...
    def represent_key(self, data): ...
    @classmethod
    def add_representer(cls, data_type, representer) -> None: ...
    @classmethod
    def add_multi_representer(cls, data_type, representer) -> None: ...
    def represent_scalar(self, tag, value, style: Incomplete | None = None, anchor: Incomplete | None = None) -> ScalarNode: ...
    def represent_sequence(self, tag, sequence, flow_style: Incomplete | None = None) -> SequenceNode: ...
    def represent_omap(self, tag, omap, flow_style: Incomplete | None = None) -> SequenceNode: ...
    def represent_mapping(self, tag, mapping, flow_style: Incomplete | None = None) -> MappingNode: ...
    def ignore_aliases(self, data) -> bool: ...

class SafeRepresenter(BaseRepresenter):
    def ignore_aliases(self, data) -> bool: ...
    def represent_none(self, data) -> ScalarNode: ...
    def represent_str(self, data): ...
    def represent_binary(self, data) -> ScalarNode: ...
    def represent_bool(self, data, anchor: Incomplete = None) -> ScalarNode: ...
    def represent_int(self, data) -> ScalarNode: ...
    inf_value: float
    def represent_float(self, data) -> ScalarNode: ...
    def represent_list(self, data) -> SequenceNode: ...
    def represent_dict(self, data) -> MappingNode: ...
    def represent_ordereddict(self, data) -> SequenceNode: ...
    def represent_set(self, data) -> MappingNode: ...
    def represent_date(self, data) -> ScalarNode: ...
    def represent_datetime(self, data) -> ScalarNode: ...
    def represent_yaml_object(self, tag, data, cls, flow_style: Incomplete | None = None) -> MappingNode: ...
    def represent_undefined(self, data) -> None: ...

class Representer(SafeRepresenter):
    def represent_complex(self, data): ...
    def represent_tuple(self, data) -> SequenceNode: ...
    def represent_name(self, data) -> ScalarNode: ...
    def represent_module(self, data) -> ScalarNode: ...
    def represent_object(self, data) -> SequenceNode | MappingNode: ...

class RoundTripRepresenter(SafeRepresenter):
    def __init__(
        self,
        default_style: Incomplete | None = None,
        default_flow_style: Incomplete | None = None,
        dumper: Incomplete | None = None,
    ) -> None: ...
    def ignore_aliases(self, data) -> bool: ...
    def represent_none(self, data) -> ScalarNode: ...
    def represent_literal_scalarstring(self, data) -> ScalarNode: ...
    represent_preserved_scalarstring = represent_literal_scalarstring
    def represent_folded_scalarstring(self, data) -> ScalarNode: ...
    def represent_single_quoted_scalarstring(self, data) -> ScalarNode: ...
    def represent_double_quoted_scalarstring(self, data) -> ScalarNode: ...
    def represent_plain_scalarstring(self, data) -> ScalarNode: ...
    def insert_underscore(self, prefix, s, underscore, anchor: Incomplete | None = None) -> ScalarNode: ...
    def represent_scalar_int(self, data) -> ScalarNode: ...
    def represent_binary_int(self, data) -> ScalarNode: ...
    def represent_octal_int(self, data) -> ScalarNode: ...
    def represent_hex_int(self, data) -> ScalarNode: ...
    def represent_hex_caps_int(self, data) -> ScalarNode: ...
    def represent_scalar_float(self, data) -> ScalarNode: ...
    def represent_sequence(self, tag, sequence, flow_style: Incomplete | None = None) -> SequenceNode: ...
    def merge_comments(self, node, comments): ...
    alias_key: Incomplete
    def represent_key(self, data): ...
    def represent_mapping(self, tag, mapping, flow_style: Incomplete | None = None) -> MappingNode: ...
    def represent_omap(self, tag, omap, flow_style: Incomplete | None = None) -> SequenceNode: ...
    def represent_set(self, setting) -> MappingNode: ...
    def represent_dict(self, data) -> MappingNode: ...
    def represent_list(self, data) -> SequenceNode: ...
    def represent_datetime(self, data) -> ScalarNode: ...
    def represent_tagged_scalar(self, data) -> ScalarNode: ...
    def represent_scalar_bool(self, data) -> ScalarNode: ...
    def represent_yaml_object(self, tag, data, cls, flow_style: Incomplete = None) -> MappingNode: ...
