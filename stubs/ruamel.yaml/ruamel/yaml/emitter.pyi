from collections.abc import Callable
from typing import Final, Literal, TypeAlias

from .compat import _WriteStream
from .dumper import _Dumper
from .error import YAMLError
from .events import Event
from .main import YAML
from .serializer import Serializer
from .tag import Tag, _TagHandleToPrefix
from .tokens import CommentToken, _ScalarStyle, _VersionTuple

__all__ = ["Emitter", "EmitterError"]

# https://github.com/python/typeshed/pull/8973
_Inf: TypeAlias = float

_LineBreak: TypeAlias = Literal["\r", "\n", "\r\n"]

class EmitterError(YAMLError): ...

class ScalarAnalysis:
    scalar: str
    empty: bool
    multiline: bool
    allow_flow_plain: bool
    allow_block_plain: bool
    allow_single_quoted: bool
    allow_double_quoted: bool
    allow_block: bool
    def __init__(
        self,
        scalar: str,
        empty: bool,
        multiline: bool,
        allow_flow_plain: bool,
        allow_block_plain: bool,
        allow_single_quoted: bool,
        allow_double_quoted: bool,
        allow_block: bool,
    ) -> None: ...

class Indents:
    values: list[tuple[int | None, bool | None]]
    def __init__(self) -> None: ...
    def append(self, val: int | None, seq: bool | None) -> None: ...
    def pop(self) -> int | None: ...
    def seq_seq(self) -> bool: ...
    def last_seq(self) -> bool | None: ...
    def seq_flow_align(self, seq_indent: int, column: int, pre_comment: bool | None = False) -> int: ...
    def __len__(self) -> int: ...

class Emitter:
    DEFAULT_TAG_PREFIXES: Final[_TagHandleToPrefix]
    MAX_SIMPLE_KEY_LENGTH: Final = 128
    flow_seq_start: Final = "["
    flow_seq_end: Final = "]"
    flow_seq_separator: Final = ","
    flow_map_start: Final = "{"
    flow_map_end: Final = "}"
    flow_map_separator: Final = ","
    dumper: YAML | _Dumper | None
    encoding: str | None
    allow_space_break: bool | None
    states: list[Callable[[], None]]
    state: Callable[[], None] | None
    events: list[Event]
    event: Event | None
    indents: Indents
    indent: int | None
    flow_context: list[str]
    root_context: bool
    sequence_context: bool
    mapping_context: bool
    simple_key_context: bool
    line: int
    column: int
    whitespace: bool
    indention: bool
    compact_seq_seq: bool
    compact_seq_map: bool
    no_newline: bool | None
    open_ended: bool
    colon: str
    prefixed_colon: str
    brace_single_entry_mapping_in_flow_sequence: bool | None
    canonical: bool | None
    allow_unicode: bool | None
    unicode_supplementary: bool
    sequence_dash_offset: int
    top_level_colon_align: int | None
    best_sequence_indent: int
    requested_indent: int | None
    best_map_indent: int
    best_width: int | _Inf
    best_line_break: _LineBreak
    tag_prefixes: _TagHandleToPrefix | None
    prepared_anchor: str | None
    prepared_tag: str | None
    analysis: ScalarAnalysis | None
    style: _ScalarStyle | None
    scalar_after_indicator: bool
    alt_null: str
    def __init__(
        self,
        stream: _WriteStream,
        canonical: bool | None = None,
        indent: int | None = None,
        width: int | _Inf | None = None,
        allow_unicode: bool | None = None,
        line_break: _LineBreak | None = None,
        block_seq_indent: int | None = None,
        top_level_colon_align: int | None = None,
        prefix_colon: str | None = None,
        brace_single_entry_mapping_in_flow_sequence: bool | None = None,
        dumper: YAML | _Dumper | None = None,
    ) -> None: ...
    @property
    def stream(self) -> _WriteStream: ...
    @stream.setter
    def stream(self, val: _WriteStream) -> None: ...
    @property
    def serializer(self) -> Serializer: ...
    @property
    def flow_level(self) -> int: ...
    def dispose(self) -> None: ...
    def emit(self, event: Event) -> None: ...
    def need_more_events(self) -> bool: ...
    def need_events(self, count: int) -> bool: ...
    def increase_indent(self, flow: bool = False, sequence: bool | None = None, indentless: bool = False) -> None: ...
    def expect_stream_start(self) -> None: ...
    def expect_nothing(self) -> None: ...
    def expect_first_document_start(self) -> None: ...
    def expect_document_start(self, first: bool = False) -> None: ...
    def expect_document_end(self) -> None: ...
    def expect_document_root(self) -> None: ...
    def expect_node(
        self, root: bool = False, sequence: bool = False, mapping: bool = False, simple_key: bool = False
    ) -> None: ...
    def expect_alias(self) -> None: ...
    def expect_scalar(self) -> None: ...
    def expect_flow_sequence(self, force_flow_indent: bool | None = False) -> None: ...
    def expect_first_flow_sequence_item(self) -> None: ...
    def expect_flow_sequence_item(self) -> None: ...
    def expect_flow_mapping(self, single: bool | None = False, force_flow_indent: bool | None = False) -> None: ...
    def expect_first_flow_mapping_key(self) -> None: ...
    def expect_flow_mapping_key(self) -> None: ...
    def expect_flow_mapping_simple_value(self) -> None: ...
    def expect_flow_mapping_value(self) -> None: ...
    def expect_block_sequence(self) -> None: ...
    def expect_first_block_sequence_item(self) -> None: ...
    def expect_block_sequence_item(self, first: bool = False) -> None: ...
    def expect_block_mapping(self) -> None: ...
    def expect_first_block_mapping_key(self) -> None: ...
    def expect_block_mapping_key(self, first: bool = False) -> None: ...
    def expect_block_mapping_simple_value(self) -> None: ...
    def expect_block_mapping_value(self) -> None: ...
    def check_empty_sequence(self) -> bool: ...
    def check_empty_mapping(self) -> bool: ...
    def check_empty_document(self) -> bool: ...
    def check_simple_key(self) -> bool: ...
    def process_anchor(self, indicator: str) -> bool: ...
    def process_tag(self) -> None: ...
    def choose_scalar_style(self) -> _ScalarStyle | None: ...
    def process_scalar(self) -> None: ...
    def prepare_version(self, version: _VersionTuple) -> str: ...
    def prepare_tag_handle(self, handle: str) -> str: ...
    def prepare_tag_prefix(self, prefix: str) -> str: ...
    def prepare_tag(self, tag: Tag) -> str: ...
    def prepare_anchor(self, anchor: str) -> str: ...
    def analyze_scalar(self, scalar: str) -> ScalarAnalysis: ...
    def flush_stream(self) -> None: ...
    def write_stream_start(self) -> None: ...
    def write_stream_end(self) -> None: ...
    def write_indicator(
        self, indicator: str, need_whitespace: bool, whitespace: bool = False, indention: bool = False
    ) -> None: ...
    def write_indent(self) -> None: ...
    def write_line_break(self, data: str | None = None) -> None: ...
    def write_version_directive(self, version_text: str) -> None: ...
    def write_tag_directive(self, handle_text: str, prefix_text: str) -> None: ...
    def write_single_quoted(self, text: str, split: bool = True) -> None: ...
    ESCAPE_REPLACEMENTS: Final[dict[str, str]]
    def write_double_quoted(self, text: str, split: bool = True) -> None: ...
    def determine_block_hints(self, text: str) -> tuple[str, int, str]: ...
    def write_folded(self, text: str, comment: str) -> None: ...
    def write_literal(self, text: str, comment: str | None = None) -> None: ...
    def write_plain(self, text: str, split: bool = True) -> None: ...
    def write_comment(self, comment: CommentToken, pre: bool = False) -> None: ...
    def write_pre_comment(self, event: Event) -> bool: ...
    def write_post_comment(self, event: Event) -> bool: ...

class RoundTripEmitter(Emitter):
    def prepare_tag(self, ctag: Tag) -> str: ...
