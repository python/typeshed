from _typeshed import Incomplete

from .compat import VersionType
from .error import *

__all__ = ["BaseResolver", "Resolver", "VersionedResolver"]

class ResolverError(YAMLError): ...

class BaseResolver:
    DEFAULT_SCALAR_TAG: Incomplete
    DEFAULT_SEQUENCE_TAG: Incomplete
    DEFAULT_MAPPING_TAG: Incomplete
    yaml_implicit_resolvers: dict
    yaml_path_resolvers: dict
    loadumper: Incomplete
    resolver_exact_paths: Incomplete
    resolver_prefix_paths: Incomplete
    def __init__(self, loadumper: Incomplete | None = None) -> None: ...
    @property
    def parser(self): ...
    @classmethod
    def add_implicit_resolver_base(cls, tag, regexp, first) -> None: ...
    @classmethod
    def add_implicit_resolver(cls, tag, regexp, first) -> None: ...
    @classmethod
    def add_path_resolver(cls, tag, path, kind: Incomplete | None = None) -> None: ...
    def descend_resolver(self, current_node, current_index) -> None: ...
    def ascend_resolver(self) -> None: ...
    def check_resolver_prefix(self, depth: int, path, kind, current_node, current_index) -> bool: ...
    def resolve(self, kind, value, implicit): ...
    @property
    def processing_version(self) -> None: ...

class Resolver(BaseResolver): ...

class VersionedResolver(BaseResolver):
    def __init__(
        self, version: VersionType | None = None, loader: Incomplete | None = None, loadumper: Incomplete | None = None
    ) -> None: ...
    def add_version_implicit_resolver(self, version: VersionType, tag, regexp, first) -> None: ...
    def get_loader_version(self, version: VersionType | None): ...
    @property
    def versioned_resolver(self): ...
    def resolve(self, kind, value, implicit): ...
    @property
    def processing_version(self): ...
