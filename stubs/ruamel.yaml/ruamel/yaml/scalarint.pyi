from _typeshed import Incomplete

__all__ = ["ScalarInt", "BinaryInt", "OctalInt", "HexInt", "HexCapsInt", "DecimalInt"]

class ScalarInt(int):
    def __new__(cls, *args, **kw): ...
    def __iadd__(self, a): ...
    def __ifloordiv__(self, a): ...
    def __imul__(self, a): ...
    def __ipow__(self, a): ...
    def __isub__(self, a): ...
    @property
    def anchor(self): ...
    def yaml_anchor(self, any: bool = False): ...
    def yaml_set_anchor(self, value, always_dump: bool = False) -> None: ...

class BinaryInt(ScalarInt):
    def __new__(
        cls, value, width: Incomplete | None = None, underscore: Incomplete | None = None, anchor: Incomplete | None = None
    ): ...

class OctalInt(ScalarInt):
    def __new__(
        cls, value, width: Incomplete | None = None, underscore: Incomplete | None = None, anchor: Incomplete | None = None
    ): ...

class HexInt(ScalarInt):
    def __new__(
        cls, value, width: Incomplete | None = None, underscore: Incomplete | None = None, anchor: Incomplete | None = None
    ): ...

class HexCapsInt(ScalarInt):
    def __new__(
        cls, value, width: Incomplete | None = None, underscore: Incomplete | None = None, anchor: Incomplete | None = None
    ): ...

class DecimalInt(ScalarInt):
    def __new__(
        cls, value, width: Incomplete | None = None, underscore: Incomplete | None = None, anchor: Incomplete | None = None
    ): ...
