from .error import MarkedYAMLError
from .events import MappingEndEvent, SequenceEndEvent
from .main import YAML
from .nodes import CollectionNode, MappingNode, Node, ScalarNode, SequenceNode
from .parser import Parser
from .resolver import BaseResolver

__all__ = ["Composer", "ComposerError"]

class ComposerError(MarkedYAMLError): ...

class Composer:
    loader: YAML | None
    anchors: dict[str, Node]
    warn_double_anchors: bool
    def __init__(self, loader: YAML | None = None) -> None: ...
    @property
    def parser(self) -> Parser: ...
    @property
    def resolver(self) -> BaseResolver: ...
    def check_node(self) -> bool: ...
    def get_node(self) -> Node: ...
    def get_single_node(self) -> Node: ...
    def compose_document(self) -> Node: ...
    def return_alias(self, a: Node) -> Node: ...
    def compose_node(self, parent: CollectionNode | None, index: int | Node | None) -> Node: ...
    def compose_scalar_node(self, anchor: str | None) -> ScalarNode: ...
    def compose_sequence_node(self, anchor: str | None) -> SequenceNode: ...
    def compose_mapping_node(self, anchor: str | None) -> MappingNode: ...
    def check_end_doc_comment(self, end_event: SequenceEndEvent | MappingEndEvent, node: SequenceNode | MappingNode) -> None: ...
