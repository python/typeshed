from _typeshed import Incomplete
from collections.abc import Generator

from .error import MarkedYAMLError
from .tokens import *

__all__ = ["Scanner", "RoundTripScanner", "ScannerError"]

class ScannerError(MarkedYAMLError): ...

class SimpleKey:
    token_number: Incomplete
    required: Incomplete
    index: Incomplete
    line: Incomplete
    column: Incomplete
    mark: Incomplete
    def __init__(self, token_number, required, index: int, line: int, column: int, mark) -> None: ...

class Scanner:
    loader: Incomplete
    first_time: bool
    def __init__(self, loader: Incomplete | None = None) -> None: ...
    @property
    def flow_level(self) -> int: ...
    done: bool
    flow_context: Incomplete
    tokens: Incomplete
    tokens_taken: int
    indent: int
    indents: Incomplete
    allow_simple_key: bool
    possible_simple_keys: Incomplete
    yaml_version: Incomplete
    tag_directives: Incomplete
    def reset_scanner(self) -> None: ...
    @property
    def reader(self): ...
    @property
    def scanner_processing_version(self): ...
    def check_token(self, *choices) -> bool: ...
    def peek_token(self): ...
    def get_token(self): ...
    def need_more_tokens(self) -> bool: ...
    def fetch_comment(self, comment) -> None: ...
    def fetch_more_tokens(self): ...
    def next_possible_simple_key(self): ...
    def stale_possible_simple_keys(self) -> None: ...
    def save_possible_simple_key(self) -> None: ...
    def remove_possible_simple_key(self) -> None: ...
    def unwind_indent(self, column) -> None: ...
    def add_indent(self, column: int) -> bool: ...
    def fetch_stream_start(self) -> None: ...
    def fetch_stream_end(self) -> None: ...
    def fetch_directive(self) -> None: ...
    def fetch_document_start(self) -> None: ...
    def fetch_document_end(self) -> None: ...
    def fetch_document_indicator(self, TokenClass) -> None: ...
    def fetch_flow_sequence_start(self) -> None: ...
    def fetch_flow_mapping_start(self) -> None: ...
    def fetch_flow_collection_start(self, TokenClass, to_push: str) -> None: ...
    def fetch_flow_sequence_end(self) -> None: ...
    def fetch_flow_mapping_end(self) -> None: ...
    def fetch_flow_collection_end(self, TokenClass) -> None: ...
    def fetch_flow_entry(self) -> None: ...
    def fetch_block_entry(self) -> None: ...
    def fetch_key(self) -> None: ...
    def fetch_value(self) -> None: ...
    def fetch_alias(self) -> None: ...
    def fetch_anchor(self) -> None: ...
    def fetch_tag(self) -> None: ...
    def fetch_literal(self) -> None: ...
    def fetch_folded(self) -> None: ...
    def fetch_block_scalar(self, style) -> None: ...
    def fetch_single(self) -> None: ...
    def fetch_double(self) -> None: ...
    def fetch_flow_scalar(self, style) -> None: ...
    def fetch_plain(self) -> None: ...
    def check_directive(self): ...
    def check_document_start(self): ...
    def check_document_end(self): ...
    def check_block_entry(self): ...
    def check_key(self): ...
    def check_value(self): ...
    def check_plain(self): ...
    def scan_to_next_token(self) -> None: ...
    def scan_directive(self): ...
    def scan_directive_name(self, start_mark): ...
    def scan_yaml_directive_value(self, start_mark): ...
    def scan_yaml_directive_number(self, start_mark): ...
    def scan_tag_directive_value(self, start_mark): ...
    def scan_tag_directive_handle(self, start_mark): ...
    def scan_tag_directive_prefix(self, start_mark): ...
    def scan_directive_ignored_line(self, start_mark) -> None: ...
    def scan_anchor(self, TokenClass): ...
    def scan_tag(self): ...
    def scan_block_scalar(self, style, rt: bool | None = False): ...
    def scan_block_scalar_indicators(self, start_mark): ...
    def scan_block_scalar_ignored_line(self, start_mark): ...
    def scan_block_scalar_indentation(self): ...
    def scan_block_scalar_breaks(self, indent: int): ...
    def scan_flow_scalar(self, style): ...
    ESCAPE_REPLACEMENTS: Incomplete
    ESCAPE_CODES: Incomplete
    def scan_flow_scalar_non_spaces(self, double, start_mark): ...
    def scan_flow_scalar_spaces(self, double, start_mark): ...
    def scan_flow_scalar_breaks(self, double, start_mark): ...
    def scan_plain(self): ...
    def scan_plain_spaces(self, indent, start_mark): ...
    def scan_tag_handle(self, name, start_mark): ...
    def scan_tag_uri(self, name, start_mark): ...
    def scan_uri_escapes(self, name, start_mark): ...
    def scan_line_break(self): ...

class RoundTripScanner(Scanner):
    def check_token(self, *choices) -> bool: ...
    def peek_token(self): ...
    def get_token(self): ...
    def fetch_comment(self, comment) -> None: ...
    allow_simple_key: bool
    def scan_to_next_token(self): ...
    def scan_line_break(self, empty_line: bool = False) -> str: ...
    def scan_block_scalar(self, style, rt: bool | None = True): ...
    def scan_uri_escapes(self, name, start_mark): ...

class CommentBase:
    value: Incomplete
    line: Incomplete
    column: Incomplete
    used: str
    function: Incomplete
    fline: Incomplete
    ufun: Incomplete
    uline: Incomplete
    def __init__(self, value, line, column) -> None: ...
    def set_used(self, v: str = "+") -> None: ...
    def set_assigned(self) -> None: ...
    def info(self) -> str: ...

class EOLComment(CommentBase):
    name: str
    def __init__(self, value, line, column) -> None: ...

class FullLineComment(CommentBase):
    name: str
    def __init__(self, value, line, column) -> None: ...

class BlankLineComment(CommentBase):
    name: str
    def __init__(self, value, line, column) -> None: ...

class ScannedComments:
    comments: Incomplete
    unused: Incomplete
    def __init__(self) -> None: ...
    def add_eol_comment(self, comment, column, line): ...
    def add_blank_line(self, comment, column, line): ...
    def add_full_line_comment(self, comment, column, line): ...
    def __getitem__(self, idx): ...
    def last(self) -> str: ...
    def any_unprocessed(self) -> bool: ...
    def unprocessed(self, use: bool = False) -> Generator[Incomplete, None, None]: ...
    def assign_pre(self, token): ...
    def assign_eol(self, tokens) -> None: ...
    def assign_post(self, token): ...
    def str_unprocessed(self): ...

class RoundTripScannerSC(Scanner):
    comments: Incomplete
    def __init__(self, *arg, **kw) -> None: ...
    def get_token(self): ...
    def need_more_tokens(self) -> bool: ...
    allow_simple_key: bool
    def scan_to_next_token(self) -> None: ...
    def scan_empty_or_full_line_comments(self) -> None: ...
    def scan_block_scalar_ignored_line(self, start_mark) -> None: ...
