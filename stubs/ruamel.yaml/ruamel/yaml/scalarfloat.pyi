from _typeshed import Incomplete

__all__ = ["ScalarFloat", "ExponentialFloat", "ExponentialCapsFloat"]

class ScalarFloat(float):
    def __new__(cls, *args, **kw): ...
    def __iadd__(self, a): ...
    def __ifloordiv__(self, a): ...
    def __imul__(self, a): ...
    def __ipow__(self, a): ...
    def __isub__(self, a): ...
    @property
    def anchor(self): ...
    def yaml_anchor(self, any: bool = False): ...
    def yaml_set_anchor(self, value, always_dump: bool = False) -> None: ...
    def dump(self, out=...) -> None: ...

class ExponentialFloat(ScalarFloat):
    def __new__(cls, value, width: Incomplete | None = None, underscore: Incomplete | None = None): ...

class ExponentialCapsFloat(ScalarFloat):
    def __new__(cls, value, width: Incomplete | None = None, underscore: Incomplete | None = None): ...
