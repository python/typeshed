import sys
from _typeshed import SupportsWrite, sentinel
from collections.abc import Hashable, Iterable, Iterator, Mapping, MutableSet, Set as AbstractSet, Sized
from typing import Any, Final, Generic, NoReturn, Self, TypeAlias, TypeVar

from .anchor import Anchor
from .compat import MutableSliceableSequence, ordereddict
from .nodes import _ScalarNodeStyle
from .tag import Tag
from .tokens import CommentToken, _CommentGroup

_Index: TypeAlias = int
_Key: TypeAlias = Hashable

_T = TypeVar("_T")
_KT = TypeVar("_KT")
_VT = TypeVar("_VT")
_KT_co = TypeVar("_KT_co", covariant=True)
_VT_co = TypeVar("_VT_co", covariant=True)
_Commented = TypeVar("_Commented", bound=CommentedBase)

__all__ = [
    "CommentedSeq",
    "CommentedKeySeq",
    "CommentedMap",
    "CommentedOrderedMap",
    "CommentedSet",
    "comment_attrib",
    "merge_attrib",
    "TaggedScalar",
    "C_POST",
    "C_PRE",
    "C_SPLIT_ON_FIRST_BLANK",
    "C_BLANK_LINE_PRESERVE_SPACE",
]

C_POST: Final = 0b00
C_PRE: Final = 0b01
C_SPLIT_ON_FIRST_BLANK: Final = 0b10
C_BLANK_LINE_PRESERVE_SPACE: Final = 0b100

comment_attrib: Final = "_yaml_comment"
format_attrib: Final = "_yaml_format"
line_col_attrib: Final = "_yaml_line_col"
merge_attrib: Final = "_yaml_merge"

class Comment:
    attrib: Final = comment_attrib
    comment: _CommentGroup | None
    def __init__(self, *, old: bool = True) -> None: ...
    @property
    def items(self) -> dict[_Index | _Key, _CommentGroup]: ...
    @property
    def end(self): ...  # RTSC
    @end.setter
    def end(self, value) -> None: ...  # RTSC
    @property
    def pre(self): ...  # RTSC
    @pre.setter
    def pre(self, value) -> None: ...  # RTSC
    def get(self, item: _Index | _Key, pos: int): ...  # RTSC
    def set(self, item: _Index | _Key, pos: int, value: list[int]): ...  # RTSC
    def __contains__(self, x: str, /) -> bool: ...

class Format:
    attrib: Final = format_attrib
    def __init__(self) -> None: ...
    def set_flow_style(self) -> None: ...
    def set_block_style(self) -> None: ...
    def flow_style(self, default: bool | None = None) -> bool | None: ...

class LineCol:
    attrib: Final = line_col_attrib
    line: int | None
    col: int | None
    data: dict[_Key, list[int]] | None
    def __init__(self) -> None: ...
    def add_kv_line_col(self, key: _Key, data: list[int]) -> None: ...
    def key(self, k: str, /) -> tuple[int, int] | None: ...
    def value(self, k: str, /) -> tuple[int, int] | None: ...
    def item(self, idx: int, /) -> tuple[int, int] | None: ...
    def add_idx_line_col(self, key: _Index, data: list[int]) -> None: ...

class CommentedBase:
    @property
    def ca(self) -> Comment: ...
    def yaml_end_comment_extend(self, comment: list[CommentToken] | None, *, clear: bool = False) -> None: ...
    def yaml_key_comment_extend(self, key: _Index | _Key, comment: _CommentGroup, *, clear: bool = False) -> None: ...
    def yaml_value_comment_extend(self, key: _Key, comment: _CommentGroup, *, clear: bool = False) -> None: ...
    def yaml_set_start_comment(self, comment: str, *, indent: int = 0) -> None: ...
    def yaml_set_comment_before_after_key(
        self, key: _Key, before: str | None = None, indent: int = 0, after: str | None = None, after_indent: int | None = None
    ) -> None: ...
    @property
    def fa(self) -> Format: ...
    def yaml_add_eol_comment(self, comment: str, key: _Index | _Key = sentinel, column: int | None = None) -> None: ...
    @property
    def lc(self) -> LineCol: ...
    @property
    def anchor(self) -> Anchor: ...
    def yaml_anchor(self) -> Anchor | None: ...
    def yaml_set_anchor(self, value: str, *, always_dump: bool = False) -> None: ...
    @property
    def tag(self) -> Tag: ...
    def yaml_set_ctag(self, value: Tag, /) -> None: ...
    def copy_attributes(self, t: _Commented, memo: dict[int, Any] | None = None) -> _Commented: ...

class CommentedSeq(MutableSliceableSequence[_T], list[_T], CommentedBase):
    def __getsingleitem__(self, idx: int) -> _T: ...
    def __setsingleitem__(self, idx: int, value: _T) -> None: ...
    def __delsingleitem__(self, idx: int): ...
    def __deepcopy__(self, memo: dict[int, Any]) -> Self: ...

class CommentedKeySeq(tuple[_T, ...], CommentedBase): ...

class CommentedMapView(Sized):
    def __init__(self, mapping: CommentedMap[Any, Any]) -> None: ...
    def __len__(self) -> int: ...

class CommentedMapKeysView(CommentedMapView, AbstractSet[_KT_co]):
    def __init__(self, mapping: CommentedMap[_KT_co, Any]) -> None: ...
    def __contains__(self, key: object) -> bool: ...
    def __iter__(self) -> Iterator[_KT_co]: ...

class CommentedMapItemsView(CommentedMapView, AbstractSet[tuple[_KT_co, _VT_co]]):
    def __init__(self, mapping: CommentedMap[_KT_co, _VT_co]) -> None: ...
    def __contains__(self, item: object) -> bool: ...
    def __iter__(self) -> Iterator[tuple[_KT_co, _VT_co]]: ...

class CommentedMapValuesView(CommentedMapView, Generic[_VT_co]):
    def __init__(self, mapping: CommentedMap[Any, _VT_co]) -> None: ...
    def __contains__(self, value: object) -> bool: ...
    def __iter__(self) -> Iterator[_VT_co]: ...

class CommentedMap(ordereddict[_KT, _VT], CommentedBase):
    def insert(self, pos: int, key: _KT, value: _VT, comment: str | None = None) -> None: ...
    def mlget(self, key: list[_Index | _Key], default: Any = None, list_ok: bool = False) -> Any: ...
    def non_merged_items(self) -> Iterator[tuple[_KT, _VT]]: ...
    def keys(self) -> CommentedMapKeysView[_KT]: ...
    def values(self) -> CommentedMapValuesView[_VT]: ...
    def items(self) -> CommentedMapItemsView[_KT, _VT]: ...
    @property
    def merge(self) -> list[tuple[int, Self]]: ...
    def add_referent(self, cm: Self) -> None: ...
    def add_yaml_merge(self, value: list[tuple[int, Self]]) -> None: ...
    def update_key_value(self, key: _KT) -> None: ...
    def __deepcopy__(self, memo: dict[int, Any]) -> Self: ...

@classmethod
def raise_immutable(cls, *args, **kwargs) -> NoReturn: ...

class CommentedKeyMap(CommentedBase, Mapping[_KT, _VT]):
    __init__ = ordereddict[_KT, _VT].__init__
    __delitem__ = raise_immutable
    __setitem__ = raise_immutable
    clear = raise_immutable
    pop = raise_immutable
    popitem = raise_immutable
    setdefault = raise_immutable
    update = raise_immutable
    def __getitem__(self, index: _KT) -> _VT: ...
    def __iter__(self) -> Iterator[_KT]: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    @classmethod
    def fromkeys(keys, v=None) -> NoReturn: ...  # broken

class CommentedOrderedMap(CommentedMap[_KT, _VT]): ...

class CommentedSet(MutableSet[_T], CommentedBase):
    odict: ordereddict[_T, None]
    def __init__(self, values: Iterable[_T] | None = None) -> None: ...
    def add(self, value: _T) -> None: ...
    def discard(self, value: _T) -> None: ...
    def __contains__(self, x: object) -> bool: ...
    def __iter__(self) -> Iterator[_T]: ...
    def __len__(self) -> int: ...

class TaggedScalar(CommentedBase):
    value: str | None
    style: _ScalarNodeStyle | None
    def __init__(self, value: str | None = None, style: _ScalarNodeStyle | None = None, tag: Tag | str | None = None) -> None: ...
    def count(self, s: str, start: int | None = None, end: int | None = None) -> int: ...
    def __getitem__(self, pos: int) -> str: ...

def dump_comments(d: object, name: str = "", sep: str = ".", out: SupportsWrite[str] = sys.stdout) -> None: ...
