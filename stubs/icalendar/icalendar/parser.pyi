from _typeshed import Incomplete

from icalendar.caselessdict import CaselessDict

def escape_char(text): ...
def unescape_char(text): ...
def tzid_from_dt(dt): ...
def foldline(line, limit: int = 75, fold_sep: str = "\r\n "): ...
def param_value(value): ...

NAME: Incomplete
UNSAFE_CHAR: Incomplete
QUNSAFE_CHAR: Incomplete
FOLD: Incomplete
uFOLD: Incomplete
NEWLINE: Incomplete

def validate_token(name) -> None: ...
def validate_param_value(value, quoted: bool = True) -> None: ...

QUOTABLE: Incomplete

def dquote(val): ...
def q_split(st, sep: str = ",", maxsplit: int = -1): ...
def q_join(lst, sep: str = ","): ...

class Parameters(CaselessDict):
    def params(self): ...
    def to_ical(self, sorted: bool = True): ...
    @classmethod
    def from_ical(cls, st, strict: bool = False): ...

def escape_string(val): ...
def unescape_string(val): ...
def unescape_list_or_string(val): ...

class Contentline(str):
    strict: Incomplete
    def __new__(cls, value, strict: bool = False, encoding="utf-8"): ...
    @classmethod
    def from_parts(cls, name, params, values, sorted: bool = True): ...
    def parts(self): ...
    @classmethod
    def from_ical(cls, ical, strict: bool = False): ...
    def to_ical(self): ...

class Contentlines(list):
    def to_ical(self): ...
    @classmethod
    def from_ical(cls, st): ...
