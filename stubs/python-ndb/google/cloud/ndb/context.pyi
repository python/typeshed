from typing import Any, Optional

from google.cloud.ndb import Client, _cache, _eventloop

class _LocalState:
    def __init__(self) -> None: ...
    @property
    def context(self): ...
    @context.setter
    def context(self, value: Any) -> None: ...
    @property
    def toplevel_context(self): ...
    @toplevel_context.setter
    def toplevel_context(self, value: Any) -> None: ...

def get_context(raise_context_error: bool = ...): ...
def get_toplevel_context(raise_context_error: bool = ...): ...

class _ContextTuple:
    client: Client
    namespace: Any
    eventloop: _eventloop.EventLoop
    batches: dict[Any, Any]
    commit_batches: dict[Any, Any]
    transaction: Any
    cache: _cache.ContextCache
    global_cache: Any
    on_commit_callbacks: list[Any]
    legacy_data: bool

class _Context(_ContextTuple):
    def __new__(
        cls,
        client: Any,
        namespace: Any = ...,
        eventloop: Optional[Any] = ...,
        batches: Optional[Any] = ...,
        commit_batches: Optional[Any] = ...,
        transaction: Optional[Any] = ...,
        cache: Optional[Any] = ...,
        cache_policy: Optional[Any] = ...,
        global_cache: Optional[Any] = ...,
        global_cache_flush_keys: Optional[Any] = ...,
        global_cache_policy: Optional[Any] = ...,
        global_cache_timeout_policy: Optional[Any] = ...,
        datastore_policy: Optional[Any] = ...,
        on_commit_callbacks: Optional[Any] = ...,
        legacy_data: bool = ...,
        retry: Optional[Any] = ...,
        rpc_time: Optional[Any] = ...,
        wait_time: Optional[Any] = ...,
    ): ...
    def new(self, **kwargs: Any): ...
    rpc_time: int = ...
    wait_time: int = ...
    def use(self) -> None: ...

class Context(_Context):
    def clear_cache(self) -> None: ...
    def flush(self) -> None: ...
    def get_namespace(self): ...
    def get_cache_policy(self): ...
    def get_datastore_policy(self) -> None: ...
    def get_global_cache_policy(self): ...
    get_memcache_policy: Any = ...
    def get_global_cache_timeout_policy(self): ...
    get_memcache_timeout_policy: Any = ...
    cache_policy: Any = ...
    def set_cache_policy(self, policy: Any): ...
    datastore_policy: Any = ...
    def set_datastore_policy(self, policy: Any): ...
    global_cache_policy: Any = ...
    def set_global_cache_policy(self, policy: Any): ...
    set_memcache_policy: Any = ...
    global_cache_timeout_policy: Any = ...
    def set_global_cache_timeout_policy(self, policy: Any): ...
    set_memcache_timeout_policy: Any = ...
    def get_retry_state(self): ...
    def set_retry_state(self, state: Any) -> None: ...
    def clear_retry_state(self) -> None: ...
    def call_on_commit(self, callback: Any) -> None: ...
    def in_transaction(self): ...
    def in_retry(self): ...
    def memcache_add(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_cas(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_decr(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_delete(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_get(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_gets(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_incr(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_replace(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_set(self, *args: Any, **kwargs: Any) -> None: ...
    def urlfetch(self, *args: Any, **kwargs: Any) -> None: ...

class ContextOptions:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class TransactionOptions:
    NESTED: int = ...
    MANDATORY: int = ...
    ALLOWED: int = ...
    INDEPENDENT: int = ...

class AutoBatcher:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
