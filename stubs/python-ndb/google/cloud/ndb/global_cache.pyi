import abc
from typing import Any, Optional

ConnectionError: Any

class GlobalCache(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    transient_errors: Any = ...
    strict_read: bool = ...
    strict_write: bool = ...
    @abc.abstractmethod
    def get(self, keys: Any) -> Any: ...
    @abc.abstractmethod
    def set(self, items: Any, expires: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def delete(self, keys: Any) -> Any: ...
    @abc.abstractmethod
    def watch(self, keys: Any) -> Any: ...
    @abc.abstractmethod
    def unwatch(self, keys: Any) -> Any: ...
    @abc.abstractmethod
    def compare_and_swap(self, items: Any, expires: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def clear(self) -> Any: ...

class _InProcessGlobalCache(GlobalCache):
    cache: Any = ...
    def __init__(self) -> None: ...
    def get(self, keys: Any): ...
    def set(self, items: Any, expires: Optional[Any] = ...) -> None: ...
    def delete(self, keys: Any) -> None: ...
    def watch(self, keys: Any) -> None: ...
    def unwatch(self, keys: Any) -> None: ...
    def compare_and_swap(self, items: Any, expires: Optional[Any] = ...) -> None: ...
    def clear(self) -> None: ...

class RedisCache(GlobalCache):
    transient_errors: Any = ...
    @classmethod
    def from_environment(cls, strict_read: bool = ..., strict_write: bool = ...): ...
    redis: Any = ...
    strict_read: Any = ...
    strict_write: Any = ...
    def __init__(self, redis: Any, strict_read: bool = ..., strict_write: bool = ...) -> None: ...
    @property
    def pipes(self): ...
    def get(self, keys: Any): ...
    def set(self, items: Any, expires: Optional[Any] = ...) -> None: ...
    def delete(self, keys: Any) -> None: ...
    def watch(self, keys: Any) -> None: ...
    def unwatch(self, keys: Any) -> None: ...
    def compare_and_swap(self, items: Any, expires: Optional[Any] = ...) -> None: ...
    def clear(self) -> None: ...

class MemcacheCache(GlobalCache):
    class KeyNotSet(Exception):
        key: Any = ...
        def __init__(self, key: Any) -> None: ...
        def __eq__(self, other: Any) -> Any: ...
    transient_errors: Any = ...
    @classmethod
    def from_environment(cls, max_pool_size: int = ..., strict_read: bool = ..., strict_write: bool = ...): ...
    client: Any = ...
    strict_read: Any = ...
    strict_write: Any = ...
    def __init__(self, client: Any, strict_read: bool = ..., strict_write: bool = ...) -> None: ...
    @property
    def caskeys(self): ...
    def get(self, keys: Any): ...
    def set(self, items: Any, expires: Optional[Any] = ...): ...
    def delete(self, keys: Any) -> None: ...
    def watch(self, keys: Any) -> None: ...
    def unwatch(self, keys: Any) -> None: ...
    def compare_and_swap(self, items: Any, expires: Optional[Any] = ...) -> None: ...
    def clear(self) -> None: ...
