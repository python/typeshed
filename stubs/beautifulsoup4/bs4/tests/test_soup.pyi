import unittest
from bs4 import BeautifulSoup as BeautifulSoup, BeautifulStoneSoup as BeautifulStoneSoup, GuessedAtParserWarning as GuessedAtParserWarning, MarkupResemblesLocatorWarning as MarkupResemblesLocatorWarning
from bs4.builder import LXMLTreeBuilder as LXMLTreeBuilder, LXMLTreeBuilderForXML as LXMLTreeBuilderForXML, ParserRejectedMarkup as ParserRejectedMarkup, TreeBuilder as TreeBuilder
from bs4.dammit import EncodingDetector as EncodingDetector, EntitySubstitution as EntitySubstitution, UnicodeDammit as UnicodeDammit
from bs4.element import CharsetMetaAttributeValue as CharsetMetaAttributeValue, Comment as Comment, ContentMetaAttributeValue as ContentMetaAttributeValue, NamespacedAttribute as NamespacedAttribute, NavigableString as NavigableString, SoupStrainer as SoupStrainer, Tag as Tag
from bs4.testing import SoupTest as SoupTest, default_builder as default_builder, skipIf as skipIf
from pdb import set_trace as set_trace
from typing import Any

LXML_PRESENT: bool
PYTHON_3_PRE_3_2: Any

class TestConstructor(SoupTest):
    def test_short_unicode_input(self) -> None: ...
    def test_embedded_null(self) -> None: ...
    def test_exclude_encodings(self) -> None: ...
    called_with: Any
    is_xml: bool
    store_line_numbers: bool
    cdata_list_attributes: Any
    preserve_whitespace_tags: Any
    string_containers: Any
    fed: Any
    def test_custom_builder_class(self) -> None: ...
    def test_parser_markup_rejection(self) -> None: ...
    def test_cdata_list_attributes(self) -> None: ...
    def test_replacement_classes(self) -> None: ...
    def test_alternate_string_containers(self) -> None: ...

class TestWarnings(SoupTest):
    def test_warning_if_no_parser_specified(self) -> None: ...
    def test_warning_if_parser_specified_too_vague(self) -> None: ...
    def test_no_warning_if_explicit_parser_specified(self) -> None: ...
    def test_parseOnlyThese_renamed_to_parse_only(self) -> None: ...
    def test_fromEncoding_renamed_to_from_encoding(self) -> None: ...
    def test_unrecognized_keyword_argument(self) -> None: ...
    def test_disk_file_warning(self) -> None: ...
    def test_url_warning_with_bytes_url(self) -> None: ...
    def test_url_warning_with_unicode_url(self) -> None: ...
    def test_url_warning_with_bytes_and_space(self) -> None: ...
    def test_url_warning_with_unicode_and_space(self) -> None: ...

class TestSelectiveParsing(SoupTest):
    def test_parse_with_soupstrainer(self) -> None: ...

class TestEntitySubstitution(unittest.TestCase):
    sub: Any
    def setUp(self) -> None: ...
    def test_simple_html_substitution(self) -> None: ...
    def test_smart_quote_substitution(self) -> None: ...
    def test_xml_converstion_includes_no_quotes_if_make_quoted_attribute_is_false(self) -> None: ...
    def test_xml_attribute_quoting_normally_uses_double_quotes(self) -> None: ...
    def test_xml_attribute_quoting_uses_single_quotes_when_value_contains_double_quotes(self) -> None: ...
    def test_xml_attribute_quoting_escapes_single_quotes_when_value_contains_both_single_and_double_quotes(self) -> None: ...
    def test_xml_quotes_arent_escaped_when_value_is_not_being_quoted(self) -> None: ...
    def test_xml_quoting_handles_angle_brackets(self) -> None: ...
    def test_xml_quoting_handles_ampersands(self) -> None: ...
    def test_xml_quoting_including_ampersands_when_they_are_part_of_an_entity(self) -> None: ...
    def test_xml_quoting_ignoring_ampersands_when_they_are_part_of_an_entity(self) -> None: ...
    def test_quotes_not_html_substituted(self) -> None: ...

class TestEncodingConversion(SoupTest):
    unicode_data: str
    utf8_data: Any
    def setUp(self) -> None: ...
    def test_ascii_in_unicode_out(self) -> None: ...
    def test_unicode_in_unicode_out(self) -> None: ...
    def test_utf8_in_unicode_out(self) -> None: ...
    def test_utf8_out(self) -> None: ...
    def test_attribute_name_containing_unicode_characters(self) -> None: ...

class TestUnicodeDammit(unittest.TestCase):
    def test_unicode_input(self) -> None: ...
    def test_smart_quotes_to_unicode(self) -> None: ...
    def test_smart_quotes_to_xml_entities(self) -> None: ...
    def test_smart_quotes_to_html_entities(self) -> None: ...
    def test_smart_quotes_to_ascii(self) -> None: ...
    def test_detect_utf8(self) -> None: ...
    def test_convert_hebrew(self) -> None: ...
    def test_dont_see_smart_quotes_where_there_are_none(self) -> None: ...
    def test_ignore_inappropriate_codecs(self) -> None: ...
    def test_ignore_invalid_codecs(self) -> None: ...
    def test_exclude_encodings(self) -> None: ...
    def test_encoding_detector_replaces_junk_in_encoding_name_with_replacement_character(self) -> None: ...
    def test_detect_html5_style_meta_tag(self) -> None: ...
    def test_last_ditch_entity_replacement(self) -> None: ...
    def test_byte_order_mark_removed(self) -> None: ...
    def test_detwingle(self) -> None: ...
    def test_detwingle_ignores_multibyte_characters(self) -> None: ...
    def test_find_declared_encoding(self) -> None: ...

class TestNamedspacedAttribute(SoupTest):
    def test_name_may_be_none_or_missing(self) -> None: ...
    def test_attribute_is_equivalent_to_colon_separated_string(self) -> None: ...
    def test_attributes_are_equivalent_if_prefix_and_name_identical(self) -> None: ...

class TestAttributeValueWithCharsetSubstitution(unittest.TestCase):
    def test_content_meta_attribute_value(self) -> None: ...
    def test_content_meta_attribute_value(self) -> None: ...
