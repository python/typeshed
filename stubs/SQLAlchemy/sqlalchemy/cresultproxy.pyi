from _typeshed import Incomplete
from collections.abc import Callable, Iterable, Iterator
from typing import Any

class BaseRow:
    def __init__(
        self, parent, processors: Iterable[Callable[[Any], Any] | None] | None, keymap, key_style, data: Iterable[Any]
    ) -> None: ...
    def __reduce__(self) -> tuple[Incomplete, tuple[Incomplete, Incomplete]]: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __getitem__(self, key: str | int) -> Any: ...

def safe_rowproxy_reconstructor(__cls, __state): ...
