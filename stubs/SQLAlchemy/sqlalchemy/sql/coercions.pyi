from _typeshed import Incomplete
from collections.abc import Generator, Iterable
from typing import Any, Protocol, TypeVar, overload
from typing_extensions import TypeAlias

from ..orm.decl_api import _DeclarativeBase
from ..schema import Column
from ..sql import (
    elements as elements,
    lambdas as lambdas,
    schema as schema,
    selectable as selectable,
    sqltypes as sqltypes,
    traversals as traversals,
)
from ..sql.base import ExecutableOption
from ..sql.operators import ColumnOperators
from . import roles

class _CallableWithCode(Protocol):
    __code__: Incomplete
    def __call__(self, *args: object, **kwargs: object) -> object: ...

# For use in other modules so we don't have to redefine all overloads
# incomplete: This TypeAlias is a bit of a "catch-all" for elements passed to coercions.expect .
# Still better than using Any/Incomplete when the coercable types are uncertain.
_CoercibleElement: TypeAlias = (  # noqa: Y047
    roles.SQLRole
    | lambdas.PyWrapper[Any]  # Any PyWrapper will do
    | _CallableWithCode
    | str
    | traversals.HasCacheKey
    | ExecutableOption
    | roles.JoinTargetRole
    | bool
    # TODO: Added these extra for mypy_primer, validate if they should be there
    | ColumnOperators[Any]
    | type[_DeclarativeBase]
)

_T = TypeVar("_T")
from _typeshed import Unused

_ExpectColExpressionCollectionResult: TypeAlias = (
    Generator[tuple[_T, Column, str | None, Column], None, None]
    | Generator[tuple[_T, None, str | None, str | None], None, None]
    | Generator[tuple[_T, None, None, None], None, None]
)
_ExpectColExpressionCollectionResultStr: TypeAlias = (
    Generator[tuple[str, Column, str, Column], None, None] | Generator[tuple[str, None, str, str], None, None]
)
_ExpectColExpressionCollectionResultNonStr: TypeAlias = (
    Generator[tuple[_T, Column, None, Column], None, None] | Generator[tuple[_T, None, None, None], None, None]
)

_StrRole: TypeAlias = roles.TruncatedLabelRole | _ReturnsStringKey  # & Not[_NoTextCoercion]

# TODO: @overload for narrowable _literal_coercion
@overload
def expect(
    role: roles.AllowsLambdaRole,
    element: _CallableWithCode,
    apply_propagate_attrs: Incomplete | None = ...,
    argname: Unused = ...,
    post_inspect: Unused = ...,
    **kw,
) -> lambdas.LambdaElement: ...
@overload
def expect(
    role: _StrRole,
    element: roles.SQLRole | str,
    apply_propagate_attrs: Incomplete | None = ...,
    argname: Incomplete | None = ...,
    post_inspect: bool = ...,
    **kw,
) -> str: ...
@overload
def expect(
    role: roles.HasCacheKeyRole,
    element: roles.SQLRole | traversals.HasCacheKey,
    apply_propagate_attrs: Incomplete | None = ...,
    argname: Incomplete | None = ...,
    post_inspect: bool = ...,
    **kw,
) -> Incomplete | traversals.HasCacheKey: ...
@overload
def expect(
    role: roles.ExecutableOptionRole,
    element: roles.SQLRole | ExecutableOption,
    apply_propagate_attrs: Incomplete | None = ...,
    argname: Incomplete | None = ...,
    post_inspect: bool = ...,
    **kw,
) -> Incomplete | ExecutableOption: ...
@overload
def expect(
    role: roles.SQLRole,
    element: lambdas.PyWrapper[Any],
    apply_propagate_attrs: Incomplete | None = ...,
    argname: Incomplete | None = ...,
    post_inspect: bool = ...,
    **kw,
) -> elements.ClauseElement: ...
@overload
def expect(
    role: roles.SQLRole,
    element: roles.SQLRole,
    apply_propagate_attrs: Incomplete | None = ...,
    argname: Incomplete | None = ...,
    post_inspect: bool = ...,
    **kw,
): ...
@overload
def expect_as_key(role: roles.AllowsLambdaRole, element: _CallableWithCode, **kw) -> lambdas.LambdaElement: ...
@overload
def expect_as_key(role: _StrRole, element: roles.SQLRole | str, **kw) -> str: ...
@overload
def expect_as_key(
    role: roles.HasCacheKeyRole, element: roles.SQLRole | traversals.HasCacheKey, **kw
) -> Incomplete | traversals.HasCacheKey: ...
@overload
def expect_as_key(
    role: roles.ExecutableOptionRole, element: roles.SQLRole | ExecutableOption, **kw
) -> Incomplete | ExecutableOption: ...
@overload
def expect_as_key(role: roles.SQLRole, element: lambdas.PyWrapper[Any], **kw) -> elements.ClauseElement: ...
@overload
def expect_as_key(role: roles.SQLRole, element: roles.SQLRole, **kw): ...
@overload
def expect_col_expression_collection(
    role: roles.AllowsLambdaRole, expressions: Iterable[_CallableWithCode]
) -> _ExpectColExpressionCollectionResult[lambdas.LambdaElement]: ...
@overload
def expect_col_expression_collection(
    role: _StrRole, expressions: Iterable[roles.SQLRole | str]
) -> _ExpectColExpressionCollectionResultStr: ...
@overload
def expect_col_expression_collection(
    role: roles.HasCacheKeyRole, expressions: Iterable[roles.SQLRole | traversals.HasCacheKey]
) -> _ExpectColExpressionCollectionResult[Incomplete | traversals.HasCacheKey]: ...
@overload
def expect_col_expression_collection(
    role: roles.ExecutableOptionRole, expressions: Iterable[roles.SQLRole | ExecutableOption]
) -> _ExpectColExpressionCollectionResult[Incomplete | ExecutableOption]: ...
@overload
def expect_col_expression_collection(
    role: roles.SQLRole, expressions: Iterable[lambdas.PyWrapper[Any]]
) -> _ExpectColExpressionCollectionResultNonStr[elements.ClauseElement]: ...
@overload
def expect_col_expression_collection(
    role: roles.SQLRole, expressions: Iterable[roles.SQLRole]
) -> _ExpectColExpressionCollectionResult[Incomplete]: ...

class RoleImpl:
    name: Incomplete
    def __init__(self, role_class) -> None: ...

class _Deannotate: ...
class _StringOnly: ...
class _ReturnsStringKey: ...
class _ColumnCoercions: ...
class _NoTextCoercion: ...
class _CoerceLiterals: ...
class LiteralValueImpl(RoleImpl): ...
class _SelectIsNotFrom: ...
class HasCacheKeyImpl(RoleImpl): ...
class ExecutableOptionImpl(RoleImpl): ...
class ExpressionElementImpl(_ColumnCoercions, RoleImpl): ...
class BinaryElementImpl(ExpressionElementImpl, RoleImpl): ...
class InElementImpl(RoleImpl): ...
class OnClauseImpl(_CoerceLiterals, _ColumnCoercions, RoleImpl): ...
class WhereHavingImpl(_CoerceLiterals, _ColumnCoercions, RoleImpl): ...
class StatementOptionImpl(_CoerceLiterals, RoleImpl): ...
class ColumnArgumentImpl(_NoTextCoercion, RoleImpl): ...
class ColumnArgumentOrKeyImpl(_ReturnsStringKey, RoleImpl): ...
class StrAsPlainColumnImpl(_CoerceLiterals, RoleImpl): ...
class ByOfImpl(_CoerceLiterals, _ColumnCoercions, RoleImpl, roles.ByOfRole): ...
class OrderByImpl(ByOfImpl, RoleImpl): ...
class GroupByImpl(ByOfImpl, RoleImpl): ...
class DMLColumnImpl(_ReturnsStringKey, RoleImpl): ...
class ConstExprImpl(RoleImpl): ...
class TruncatedLabelImpl(_StringOnly, RoleImpl): ...
class DDLExpressionImpl(_Deannotate, _CoerceLiterals, RoleImpl): ...
class DDLConstraintColumnImpl(_Deannotate, _ReturnsStringKey, RoleImpl): ...
class DDLReferredColumnImpl(DDLConstraintColumnImpl): ...
class LimitOffsetImpl(RoleImpl): ...
class LabeledColumnExprImpl(ExpressionElementImpl): ...
class ColumnsClauseImpl(_SelectIsNotFrom, _CoerceLiterals, RoleImpl): ...
class ReturnsRowsImpl(RoleImpl): ...
class StatementImpl(_CoerceLiterals, RoleImpl): ...
class SelectStatementImpl(_NoTextCoercion, RoleImpl): ...
class HasCTEImpl(ReturnsRowsImpl): ...
class IsCTEImpl(RoleImpl): ...
class JoinTargetImpl(RoleImpl): ...
class FromClauseImpl(_SelectIsNotFrom, _NoTextCoercion, RoleImpl): ...
class StrictFromClauseImpl(FromClauseImpl): ...
class AnonymizedFromClauseImpl(StrictFromClauseImpl): ...
class DMLTableImpl(_SelectIsNotFrom, _NoTextCoercion, RoleImpl): ...
class DMLSelectImpl(_NoTextCoercion, RoleImpl): ...
class CompoundElementImpl(_NoTextCoercion, RoleImpl): ...

cls: Incomplete
name: Incomplete
impl: Incomplete
