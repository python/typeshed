from _typeshed import Incomplete, Unused
from abc import abstractmethod
from typing import NoReturn

class IdentityMap:
    def keys(self): ...
    @abstractmethod
    def replace(self, state): ...
    @abstractmethod
    def add(self, state): ...
    def update(self, dict_: Unused) -> NoReturn: ...
    def clear(self) -> NoReturn: ...
    def check_modified(self) -> bool: ...
    def has_key(self, key) -> bool: ...
    def popitem(self) -> NoReturn: ...
    def pop(self, key, *args: Unused) -> NoReturn: ...
    def setdefault(self, key: Unused, default: Unused = None) -> NoReturn: ...
    def __len__(self) -> int: ...
    def copy(self) -> NoReturn: ...
    def __setitem__(self, key: Unused, value: Unused) -> NoReturn: ...
    def __delitem__(self, key: Unused) -> NoReturn: ...

class WeakInstanceDict(IdentityMap):
    def __getitem__(self, key): ...
    def __contains__(self, key) -> bool: ...
    def contains_state(self, state): ...
    def replace(self, state): ...
    def add(self, state): ...
    def get(self, key, default: Incomplete | None = None): ...
    def items(self): ...
    def values(self): ...
    def __iter__(self): ...
    def all_states(self): ...
    def discard(self, state) -> None: ...
    def safe_discard(self, state) -> None: ...
