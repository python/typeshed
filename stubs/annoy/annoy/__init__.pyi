from typing import Sequence, Tuple, overload
from typing_extensions import Literal

_Vector_Float = Sequence[float]
_Vector_Int = Sequence[int]

class AnnoyIndex:
    f: int
    def __init__(self, f: int, metric: Literal["angular", "euclidean", "manhattan", "hamming", "dot"]) -> None: ...
    def load(self, fn: str, prefault: bool = ...) -> Literal[True]: ...
    def save(self, fn: str, prefault: bool = ...) -> Literal[True]: ...
    @overload
    def get_nns_by_item(self, i: int, n: int, search_k: int = ..., include_distances: Literal[False] = ...) -> _Vector_Int: ...
    @overload
    def get_nns_by_item(
        self, i: int, n: int, search_k: int, include_distances: Literal[True]
    ) -> Tuple[_Vector_Int, _Vector_Float]: ...
    @overload
    def get_nns_by_item(
        self, i: int, n: int, search_k: int = ..., *, include_distances: Literal[True]
    ) -> Tuple[_Vector_Int, _Vector_Float]: ...
    @overload
    def get_nns_by_vector(
        self, vector: _Vector_Float, n: int, search_k: int = ..., include_distances: Literal[False] = ...
    ) -> _Vector_Int: ...
    @overload
    def get_nns_by_vector(
        self, vector: _Vector_Float, n: int, search_k: int, include_distances: Literal[True]
    ) -> Tuple[_Vector_Int, _Vector_Float]: ...
    @overload
    def get_nns_by_vector(
        self, vector: _Vector_Float, n: int, search_k: int = ..., *, include_distances: Literal[True]
    ) -> Tuple[_Vector_Int, _Vector_Float]: ...
    def get_item_vector(self, __i: int) -> _Vector_Float: ...
    def add_item(self, i: int, vector: _Vector_Float) -> None: ...
    def on_disk_build(self, fn: str) -> Literal[True]: ...
    def build(self, n_trees: int, n_jobs: int = ...) -> Literal[True]: ...
    def unbuild(self) -> Literal[True]: ...
    def unload(self) -> Literal[True]: ...
    def get_distance(self, __i: int, __j: int) -> float: ...
    def get_n_items(self) -> int: ...
    def get_n_trees(self) -> int: ...
    def verbose(self, __v: bool) -> Literal[True]: ...
    def set_seed(self, __s: int) -> None: ...
