from typing import Any

from ..constants import ALGORITHMS as ALGORITHMS
from ..exceptions import JWEError as JWEError, JWKError as JWKError
from ..utils import base64_to_long as base64_to_long, long_to_base64 as long_to_base64
from ._asn1 import (
    rsa_private_key_pkcs1_to_pkcs8 as rsa_private_key_pkcs1_to_pkcs8,
    rsa_private_key_pkcs8_to_pkcs1 as rsa_private_key_pkcs8_to_pkcs1,
    rsa_public_key_pkcs1_to_pkcs8 as rsa_public_key_pkcs1_to_pkcs8,
)
from .base import Key as Key

LEGACY_INVALID_PKCS8_RSA_HEADER: Any
ASN1_SEQUENCE_ID: Any
RSA_ENCRYPTION_ASN1_OID: str

def pem_to_spki(pem, fmt: str = ...): ...

class RSAKey(Key):
    SHA256: str
    SHA384: str
    SHA512: str
    hash_alg: Any
    def __init__(self, key, algorithm) -> None: ...
    def sign(self, msg): ...
    def verify(self, msg, sig): ...
    def is_public(self): ...
    def public_key(self): ...
    def to_pem(self, pem_format: str = ...): ...
    def to_dict(self): ...
    def wrap_key(self, key_data): ...
    def unwrap_key(self, wrapped_key): ...
