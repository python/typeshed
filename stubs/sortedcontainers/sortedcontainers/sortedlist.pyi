from _typeshed import Self, SupportsRichComparison, SupportsRichComparisonT
from collections.abc import Callable, Iterable, Iterator, MutableSequence
from typing import Generic, NoReturn, TypeVar, overload
from typing_extensions import SupportsIndex

def recursive_repr(fillvalue: object = ...) -> Callable[[Callable], Callable]: ...

_T = TypeVar("_T")
_KeyT = TypeVar("_KeyT", bound=SupportsRichComparison)
_SortedListT = TypeVar("_SortedListT", bound=SortedList)

class SortedList(MutableSequence[SupportsRichComparisonT], Generic[SupportsRichComparisonT]):
    DEFAULT_LOAD_FACTOR: int
    def __init__(self, iterable: Iterable[SupportsRichComparisonT] | None = ..., key: None = ...) -> None: ...
    @overload
    def __new__(cls: type[Self], iterable: Iterable[SupportsRichComparisonT] | None = ..., key: None = ...) -> Self: ...
    @overload
    def __new__(cls, iterable: Iterable[_T] | None = ..., *, key: Callable[[_T], _KeyT]) -> SortedKeyList[_T, _KeyT]: ...
    @property
    def key(self) -> None: ...
    def add(self, value: SupportsRichComparisonT) -> None: ...
    def update(self, iterable: Iterable[SupportsRichComparisonT]) -> None: ...
    def discard(self, value: SupportsRichComparisonT) -> None: ...
    def __delitem__(self, index: int | slice) -> None: ...
    @overload
    def __getitem__(self, index: int) -> SupportsRichComparisonT: ...
    @overload
    def __getitem__(self, index: slice) -> list[SupportsRichComparisonT]: ...
    @overload
    def __setitem__(self, index: int, value: SupportsRichComparisonT) -> NoReturn: ...
    @overload
    def __setitem__(self, index: slice, value: Iterable[SupportsRichComparisonT]) -> NoReturn: ...
    def reverse(self) -> NoReturn: ...
    def islice(
        self, start: int | None = ..., stop: int | None = ..., reverse: bool = ...
    ) -> Iterator[SupportsRichComparisonT]: ...
    def irange(
        self,
        minimum: SupportsRichComparisonT | None = ...,
        maximum: SupportsRichComparisonT | None = ...,
        inclusive: tuple[bool, bool] = ...,
        reverse: bool = ...,
    ) -> Iterator[SupportsRichComparisonT]: ...
    def __len__(self) -> int: ...
    def bisect_left(self, value: SupportsRichComparisonT) -> int: ...
    def bisect_right(self, value: SupportsRichComparisonT) -> int: ...
    def bisect(self, value: SupportsRichComparisonT) -> int: ...
    def count(self, value: SupportsRichComparisonT) -> int: ...
    def copy(self: _SortedListT) -> _SortedListT: ...  # noqa: Y019
    def __copy__(self: _SortedListT) -> _SortedListT: ...  # noqa: Y019
    def append(self, value: SupportsRichComparisonT) -> NoReturn: ...
    def extend(self, values: Iterable[SupportsRichComparisonT]) -> NoReturn: ...
    def insert(self, index: int, value: SupportsRichComparisonT) -> NoReturn: ...
    def index(self, value: SupportsRichComparisonT, start: int | None = ..., stop: int | None = ...) -> int: ...
    def __add__(self: _SortedListT, other: Iterable[SupportsRichComparisonT]) -> _SortedListT: ...  # noqa: Y019
    def __radd__(self: _SortedListT, other: Iterable[SupportsRichComparisonT]) -> _SortedListT: ...  # noqa: Y019
    def __mul__(self: _SortedListT, num: SupportsIndex) -> _SortedListT: ...  # noqa: Y019
    def __rmul__(self: _SortedListT, num: SupportsIndex) -> _SortedListT: ...  # noqa: Y019
    def __imul__(self, num: SupportsIndex) -> Self: ...
    def __lt__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...

def identity(value: _KeyT) -> _KeyT: ...

class SortedKeyList(SortedList[_T], Generic[_T, _KeyT]):  # type: ignore[type-var]
    def __init__(self, iterable: Iterable[_T] | None = ..., key: Callable[[_T], _KeyT] = ...) -> None: ...
    def __new__(cls: type[Self], iterable: Iterable[_T] | None = ..., key: Callable[[_T], _KeyT] = ...) -> Self: ...
    @property
    def key(self) -> Callable[[_T], _KeyT]: ...  # type: ignore[override]
    def irange_key(
        self, min_key: _KeyT | None = ..., max_key: _KeyT | None = ..., inclusive: tuple[bool, bool] = ..., reverse: bool = ...
    ) -> Iterator[_T]: ...
    def bisect_key_left(self, key: object) -> int: ...
    def bisect_key_right(self, key: object) -> int: ...
    def bisect_key(self, key: object) -> int: ...

SortedListWithKey = SortedKeyList
