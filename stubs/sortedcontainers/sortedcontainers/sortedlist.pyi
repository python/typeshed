from _typeshed import Incomplete
from collections import MutableSequence

def recursive_repr(fillvalue: str = ...): ...

class SortedList(MutableSequence):
    DEFAULT_LOAD_FACTOR: int
    def __init__(self, iterable: Incomplete | None = ..., key: Incomplete | None = ...) -> None: ...
    def __new__(cls, iterable: Incomplete | None = ..., key: Incomplete | None = ...): ...
    @property
    def key(self) -> None: ...
    def clear(self) -> None: ...
    def add(self, value) -> None: ...
    def update(self, iterable) -> None: ...
    def __contains__(self, value): ...
    def discard(self, value) -> None: ...
    def remove(self, value) -> None: ...
    def __delitem__(self, index): ...
    def __getitem__(self, index): ...
    def __setitem__(self, index, value) -> None: ...
    def __iter__(self): ...
    def __reversed__(self): ...
    def reverse(self) -> None: ...
    def islice(self, start: Incomplete | None = ..., stop: Incomplete | None = ..., reverse: bool = ...): ...
    def irange(self, minimum: Incomplete | None = ..., maximum: Incomplete | None = ..., inclusive=..., reverse: bool = ...): ...
    def __len__(self): ...
    def bisect_left(self, value): ...
    def bisect_right(self, value): ...
    bisect: Incomplete
    def count(self, value): ...
    def copy(self): ...
    __copy__: Incomplete
    def append(self, value) -> None: ...
    def extend(self, values) -> None: ...
    def insert(self, index, value) -> None: ...
    def pop(self, index: int = ...): ...
    def index(self, value, start: Incomplete | None = ..., stop: Incomplete | None = ...): ...
    def __add__(self, other): ...
    __radd__: Incomplete
    def __iadd__(self, other): ...
    def __mul__(self, num): ...
    __rmul__: Incomplete
    def __imul__(self, num): ...
    __eq__: Incomplete
    __ne__: Incomplete
    __lt__: Incomplete
    __gt__: Incomplete
    __le__: Incomplete
    __ge__: Incomplete
    def __reduce__(self): ...

def identity(value): ...

class SortedKeyList(SortedList):
    def __init__(self, iterable: Incomplete | None = ..., key=...) -> None: ...
    def __new__(cls, iterable: Incomplete | None = ..., key=...): ...
    @property
    def key(self): ...
    def clear(self) -> None: ...
    def add(self, value) -> None: ...
    def update(self, iterable) -> None: ...
    def __contains__(self, value): ...
    def discard(self, value) -> None: ...
    def remove(self, value) -> None: ...
    def irange(self, minimum: Incomplete | None = ..., maximum: Incomplete | None = ..., inclusive=..., reverse: bool = ...): ...
    def irange_key(
        self, min_key: Incomplete | None = ..., max_key: Incomplete | None = ..., inclusive=..., reverse: bool = ...
    ): ...
    def bisect_left(self, value): ...
    def bisect_right(self, value): ...
    bisect: Incomplete
    def bisect_key_left(self, key): ...
    def bisect_key_right(self, key): ...
    bisect_key: Incomplete
    def count(self, value): ...
    def copy(self): ...
    __copy__: Incomplete
    def index(self, value, start: Incomplete | None = ..., stop: Incomplete | None = ...): ...
    def __add__(self, other): ...
    __radd__: Incomplete
    def __mul__(self, num): ...
    def __reduce__(self): ...

SortedListWithKey = SortedKeyList
