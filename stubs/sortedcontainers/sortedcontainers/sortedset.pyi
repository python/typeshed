from _typeshed import Incomplete
from collections import MutableSet, Sequence

from .sortedlist import SortedList as SortedList, recursive_repr as recursive_repr

class SortedSet(MutableSet, Sequence):
    isdisjoint: Incomplete
    issubset: Incomplete
    issuperset: Incomplete
    bisect_left: Incomplete
    bisect: Incomplete
    bisect_right: Incomplete
    index: Incomplete
    irange: Incomplete
    islice: Incomplete
    bisect_key_left: Incomplete
    bisect_key_right: Incomplete
    bisect_key: Incomplete
    irange_key: Incomplete
    def __init__(self, iterable: Incomplete | None = ..., key: Incomplete | None = ...) -> None: ...
    @property
    def key(self): ...
    def __contains__(self, value): ...
    def __getitem__(self, index): ...
    def __delitem__(self, index) -> None: ...
    __eq__: Incomplete
    __ne__: Incomplete
    __lt__: Incomplete
    __gt__: Incomplete
    __le__: Incomplete
    __ge__: Incomplete
    def __len__(self): ...
    def __iter__(self): ...
    def __reversed__(self): ...
    def add(self, value) -> None: ...
    def clear(self) -> None: ...
    def copy(self): ...
    __copy__: Incomplete
    def count(self, value): ...
    def discard(self, value) -> None: ...
    def pop(self, index: int = ...): ...
    def remove(self, value) -> None: ...
    def difference(self, *iterables): ...
    __sub__: Incomplete
    def difference_update(self, *iterables): ...
    __isub__: Incomplete
    def intersection(self, *iterables): ...
    __and__: Incomplete
    __rand__: Incomplete
    def intersection_update(self, *iterables): ...
    __iand__: Incomplete
    def symmetric_difference(self, other): ...
    __xor__: Incomplete
    __rxor__: Incomplete
    def symmetric_difference_update(self, other): ...
    __ixor__: Incomplete
    def union(self, *iterables): ...
    __or__: Incomplete
    __ror__: Incomplete
    def update(self, *iterables): ...
    __ior__: Incomplete
    def __reduce__(self): ...
