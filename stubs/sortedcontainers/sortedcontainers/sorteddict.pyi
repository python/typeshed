from _typeshed import Self, SupportsDunderGT, SupportsDunderLT, SupportsRichComparison
from collections.abc import Callable, Hashable, ItemsView, Iterable, Iterator, KeysView, Mapping, Sequence, ValuesView
from typing import Any, Generic, Protocol, TypeVar, overload

class _SupportsRichComparisonAndHashable(SupportsDunderLT[Any], SupportsDunderGT[Any], Hashable, Protocol): ...

_SupportsRichComparisonAndHashableT = TypeVar("_SupportsRichComparisonAndHashableT", bound=_SupportsRichComparisonAndHashable)
_SupportsRichComparisonAndHashableS = TypeVar("_SupportsRichComparisonAndHashableS", bound=_SupportsRichComparisonAndHashable)
_HashableT = TypeVar("_HashableT")
_KeyT = TypeVar("_KeyT", bound=SupportsRichComparison)
_KT = TypeVar("_KT")
_VT = TypeVar("_VT")
_VT2 = TypeVar("_VT2")

class SortedDict(dict[_SupportsRichComparisonAndHashableT, _VT], Generic[_SupportsRichComparisonAndHashableT, _VT]):
    def bisect_left(self, value: _SupportsRichComparisonAndHashableT) -> int: ...
    def bisect(self, value: _SupportsRichComparisonAndHashableT) -> int: ...
    def bisect_right(self, value: _SupportsRichComparisonAndHashableT) -> int: ...
    def index(self, value: _SupportsRichComparisonAndHashableT, start: int | None = ..., stop: int | None = ...) -> int: ...
    def irange(
        self,
        minimum: _SupportsRichComparisonAndHashableT | None = ...,
        maximum: _SupportsRichComparisonAndHashableT | None = ...,
        inclusive: tuple[bool, bool] = ...,
        reverse: bool = ...,
    ) -> Iterator[_SupportsRichComparisonAndHashableT]: ...
    def islice(
        self, start: int | None = ..., stop: int | None = ..., reverse: bool = ...
    ) -> Iterator[_SupportsRichComparisonAndHashableT]: ...
    @overload
    def __new__(
        cls: type[Self], __key: None = ..., *args: Mapping[_SupportsRichComparisonAndHashableT, _VT], **kwargs: _VT
    ) -> Self: ...
    @overload
    def __new__(
        cls, __key: Callable[[_HashableT], _KeyT], *args: Mapping[_HashableT, _VT], **kwargs: _VT
    ) -> _SortedKeyDict[_HashableT, _VT, _KeyT]: ...
    @overload
    def __init__(self, __key: None = ..., *args: Mapping[_SupportsRichComparisonAndHashableT, _VT], **kwargs: _VT) -> None: ...
    @overload
    def __init__(self, __key: Callable[[_HashableT], _KeyT], *args: Mapping[_HashableT, _VT], **kwargs: _VT) -> None: ...
    @property
    def key(self) -> None: ...
    @property
    def iloc(self) -> SortedKeysView[_SupportsRichComparisonAndHashableT]: ...
    def __or__(  # type: ignore[override]
        self, other: Mapping[_SupportsRichComparisonAndHashableS, _VT2]
    ) -> SortedDict[_SupportsRichComparisonAndHashableT | _SupportsRichComparisonAndHashableS, _VT | _VT2]: ...
    def __ror__(  # type: ignore[override]
        self, other: Mapping[_SupportsRichComparisonAndHashableS, _VT2]
    ) -> SortedDict[_SupportsRichComparisonAndHashableT | _SupportsRichComparisonAndHashableS, _VT | _VT2]: ...
    def __ior__(self: Self, other: Mapping[_SupportsRichComparisonAndHashableT, _VT]) -> Self: ...  # type: ignore[override,misc]
    def copy(self) -> SortedDict[_SupportsRichComparisonAndHashableT, _VT]: ...
    def __copy__(self) -> SortedDict[_SupportsRichComparisonAndHashableT, _VT]: ...
    @classmethod
    def fromkeys(cls: Self, __iterable: Iterable[_SupportsRichComparisonAndHashableT], __value: _VT = ...) -> Self: ...  # type: ignore[override]
    def keys(self) -> SortedKeysView[_SupportsRichComparisonAndHashableT]: ...  # type: ignore[override]
    def items(self) -> SortedItemsView[_SupportsRichComparisonAndHashableT, _VT]: ...  # type: ignore[override]
    def values(self) -> SortedValuesView[_VT]: ...  # type: ignore[override]
    def popitem(self, index: int = ...) -> tuple[_SupportsRichComparisonAndHashableT, _VT]: ...
    def peekitem(self, index: int = ...) -> tuple[_SupportsRichComparisonAndHashableT, _VT]: ...

class _SortedKeyDict(SortedDict[_HashableT, _VT], Generic[_HashableT, _VT, _KeyT]):  # type: ignore[type-var]
    def bisect_key_left(self, key: object) -> int: ...
    def bisect_key_right(self, key: object) -> int: ...
    def bisect_key(self, key: object) -> int: ...
    def irange_key(
        self, min_key: object = ..., max_key: object = ..., inclusive: tuple[bool, bool] = ..., reverse: bool = ...
    ) -> Iterator[_HashableT]: ...
    @property
    def key(self) -> Callable[[_HashableT], _KeyT]: ...  # type: ignore[override]

class SortedKeysView(KeysView[_KT], Sequence[_KT], Generic[_KT]):
    @overload
    def __getitem__(self, index: int) -> _KT: ...
    @overload
    def __getitem__(self, index: slice) -> list[_KT]: ...
    def __delitem__(self, index: int | slice) -> None: ...

class SortedItemsView(ItemsView[_KT, _VT], Sequence[tuple[_KT, _VT]], Generic[_KT, _VT]):
    @overload
    def __getitem__(self, index: int) -> tuple[_KT, _VT]: ...
    @overload
    def __getitem__(self, index: slice) -> list[tuple[_KT, _VT]]: ...
    def __delitem__(self, index: int | slice) -> None: ...

class SortedValuesView(ValuesView[_VT], Sequence[_VT], Generic[_VT]):
    @overload
    def __getitem__(self, index: int) -> _VT: ...
    @overload
    def __getitem__(self, index: slice) -> list[_VT]: ...
    def __delitem__(self, index: int | slice) -> None: ...
