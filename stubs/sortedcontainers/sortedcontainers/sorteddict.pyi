from _typeshed import Incomplete
from collections import ItemsView, KeysView, Sequence, ValuesView

from .sortedlist import SortedList as SortedList, recursive_repr as recursive_repr
from .sortedset import SortedSet as SortedSet

class SortedDict(dict):
    bisect_left: Incomplete
    bisect: Incomplete
    bisect_right: Incomplete
    index: Incomplete
    irange: Incomplete
    islice: Incomplete
    bisect_key_left: Incomplete
    bisect_key_right: Incomplete
    bisect_key: Incomplete
    irange_key: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def key(self): ...
    @property
    def iloc(self): ...
    def clear(self) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def __reversed__(self): ...
    def __setitem__(self, key, value) -> None: ...
    def __or__(self, other): ...
    def __ror__(self, other): ...
    def __ior__(self, other): ...
    def copy(self): ...
    __copy__: Incomplete
    @classmethod
    def fromkeys(cls, iterable, value: Incomplete | None = ...): ...
    def keys(self): ...
    def items(self): ...
    def values(self): ...
    iteritems: Incomplete
    iterkeys: Incomplete
    itervalues: Incomplete
    viewitems: Incomplete
    viewkeys: Incomplete
    viewvalues: Incomplete

    class _NotGiven: ...

    def pop(self, key, default=...): ...
    def popitem(self, index: int = ...): ...
    def peekitem(self, index: int = ...): ...
    def setdefault(self, key, default: Incomplete | None = ...): ...
    def update(self, *args, **kwargs) -> None: ...
    def __reduce__(self): ...

class SortedKeysView(KeysView, Sequence):
    def __getitem__(self, index): ...
    __delitem__: Incomplete

class SortedItemsView(ItemsView, Sequence):
    def __getitem__(self, index): ...
    __delitem__: Incomplete

class SortedValuesView(ValuesView, Sequence):
    def __getitem__(self, index): ...
    __delitem__: Incomplete
