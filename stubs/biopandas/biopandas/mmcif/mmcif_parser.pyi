from _typeshed import Incomplete

def partition_string(string, sep): ...

class LoopMMCIF:
    parser_obj: Incomplete
    length: int
    ref_id: int
    ref_list: Incomplete
    names_defined: bool
    def __init__(self, parser_obj) -> None: ...
    def add_name(self, name) -> None: ...
    def push_value(self, value): ...
    def next_target(self): ...
    def stop_push(self) -> None: ...

def special_split(content): ...

class TargetSetter:
    obj: Incomplete
    key: Incomplete
    def __init__(self, obj, key) -> None: ...
    def set_value(self, value) -> None: ...

class CIFParser:
    data: Incomplete
    current_target: Incomplete
    loop_pointer: Incomplete
    def __init__(self) -> None: ...
    def parse_string(self, contents) -> None: ...
    def parse(self, fileobj) -> None: ...
    def process_content(self, content) -> None: ...
    def set_data_name(self, name): ...
    def set_data_value(self, value) -> None: ...
    def select_global(self) -> None: ...
    def select_data(self, name) -> None: ...
    def select_frame(self, name: str = "") -> None: ...
    def end_data(self) -> None: ...
    def end_frame(self) -> None: ...

class __CIFFloat__(float): ...
class __CIFInt__(int): ...

def __cif_float_range__(inp): ...
def __cif_int_range__(inp): ...
def __load_cif_dic__(dic_file, force: bool = False): ...
def __dump_cif__(jso): ...

__CIF_STR_CHECK__: Incomplete
__CIF_STR_NL_CHECK__: Incomplete

def __dump_str__(inp): ...
def __pad_string__(inp, flength): ...
def __dump_cat__(k, v): ...
def __dump_part__(jso): ...
def load_cif_data(data, do_clean: bool = True, do_type: bool = True): ...
def __load_cif__(cif_file, do_clean: bool = True, do_type: bool = True): ...

__MMCIF_TYPING__: Incomplete
