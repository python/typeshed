name: Run stubsabot daily

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  FORCE_COLOR: 1

jobs:
  stubsabot:
    name: Upgrade stubs with stubsabot
    runs-on: ubuntu-latest
    outputs:
      STUBS: ${{ steps.runstubsabot.outputs.STUBS }}
    steps:
      - uses: actions/checkout@v5
        with:
          # use an ssh key so that checks automatically run on stubsabot PRs
          ssh-key: ${{ secrets.STUBSABOT_SSH_PRIVATE_KEY }}
          fetch-depth: 0
      - uses: actions/setup-python@v6
        with:
          python-version: "3.13"
      - uses: astral-sh/setup-uv@v6
        with:
          version-file: "requirements-tests.txt"
      - name: git config
        run: |
          git config --global user.name stubsabot
          git config --global user.email '<>'
      - name: Install dependencies
        run: uv pip install -r requirements-tests.txt --system
      - name: Run stubsabot
        id: runstubsabot
        shell: bash
        run: |
          # Parse stubsabot.py output to find stubs that should be tested.
          set -o pipefail
          exec 5>&1
          STUBS=$(script -qfc "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} python scripts/stubsabot.py --action-level everything" /dev/null \
            | tee >(cat - >&5) \
            | sed -r "s/\x1B\[[0-9;]*[mK]//g" \
            | grep 'should be tested by stubsabot' \
            | awk '{print $1}' \
            | xargs)
          exit_code=$?
          echo "STUBS=$STUBS" >> $GITHUB_OUTPUT
          exit $exit_code

  stubtest-third-party:
    name: "stubtest: third party"
    runs-on: ${{ matrix.os }}
    needs: [stubsabot]
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
      fail-fast: false
    env:
      STUBS: ${{ needs.stubsabot.outputs.STUBS }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          cache: pip
          cache-dependency-path: |
            requirements-tests.txt
            stubs/**/METADATA.toml
      - name: Install dependencies
        run: pip install -r requirements-tests.txt
      - name: Install required system packages
        shell: bash
        run: |
          if [ -n "$STUBS" ]; then
            PACKAGES=$(python tests/get_stubtest_system_requirements.py $STUBS)
            if [ "${{ runner.os }}" = "Linux" ]; then
              if [ -n "$PACKAGES" ]; then
                printf "Installing APT packages:\n  $(echo $PACKAGES | sed 's/ /\n  /g')\n"
                sudo apt-get update -q && sudo apt-get install -qy $PACKAGES
              fi
            else
              if [ "${{ runner.os }}" = "macOS" ] && [ -n "$PACKAGES" ]; then
                printf "Installing Homebrew packages:\n  $(echo $PACKAGES | sed 's/ /\n  /g')\n"
                brew install -q $PACKAGES
              fi

              if [ "${{ runner.os }}" = "Windows" ] && [ -n "$PACKAGES" ]; then
                printf "Installing Chocolatey packages:\n  $(echo $PACKAGES | sed 's/ /\n  /g')\n"
                choco install -y $PACKAGES
              fi
            fi
          fi
      - name: Run stubtest
        shell: bash
        run: |
          if [ -n "$STUBS" ]; then
            echo "Testing $STUBS..."

            if [ "${{ runner.os }}" = "Linux" ]; then
              PYTHON_EXECUTABLE="xvfb-run python"
            else
              PYTHON_EXECUTABLE="python"
            fi

            $PYTHON_EXECUTABLE tests/stubtest_third_party.py --ci-platforms-only $STUBS
          else
            echo "Nothing to test"
          fi

  # https://github.community/t/run-github-actions-job-only-if-previous-job-has-failed/174786/2
  create-issue-on-failure:
    name: Create issue on failure
    runs-on: ubuntu-latest
    needs: [stubsabot, stubtest-third-party]
    if: ${{ always() && (needs.stubsabot.result == 'failure' || needs.stubtest-third-party.result == 'failure') }}
    steps:
      - uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.create({
              owner: "python",
              repo: "typeshed",
              title: `Stubsabot failed on ${new Date().toDateString()}`,
              body: "Stubsabot run is listed here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            })
