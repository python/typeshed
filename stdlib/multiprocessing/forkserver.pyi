from _typeshed import FileDescriptorLike, StrOrBytesPath
from collections.abc import Iterable, Sequence, Mapping
from typing import Any
from threading import Lock
from struct import Struct
from signal import _SIGNUM, _HANDLER

__all__ = ["ensure_running", "get_inherited_fds", "connect_to_new_process", "set_forkserver_preload"]

MAXFDS_TO_SEND: int = ...
SIGNED_STRUCT: Struct = ...

class ForkServer:
    _forkserver_address: StrOrBytesPath | None
    _forkserver_alive_fd: int | None
    _forkserver_pid: int | None
    _inherited_fds: Sequence[int] | None
    _lock: Lock
    _preload_modules: list[str]

    def __init__(self) -> None: ...
    def _stop(self) -> None: ...
    def _stop_unlocked(self) -> None: ...
    def set_forkserver_preload(self, modules_names: list[str]) -> None: ...
    def get_inherited_fds(self) -> Sequence[int] | None: ...
    def connect_to_new_process(self, fds: Sequence[int]) -> tuple[int, int]: ...
    def ensure_running(self) -> None: ...

def main(
    listener_fd: int | None,
    alive_r: FileDescriptorLike,
    preload: Sequence[str],
    main_path: str | None = ...,
    sys_path: object | None = ...,
) -> None: ...
def _serve_one(child_r: int, fds: Iterable[int], unused_fds: Iterable[int], handlers: Mapping[_SIGNUM, _HANDLER]) -> Any: ...
def read_signed(fd: int) -> Any: ...
def write_signed(fd: int, n: Any) -> None: ...

_forkserver: ForkServer = ...
ensure_running = _forkserver.ensure_running
get_inherited_fds = _forkserver.get_inherited_fds
connect_to_new_process = _forkserver.connect_to_new_process
set_forkserver_preload = _forkserver.set_forkserver_preload
