from _typeshed import StrOrBytesPath
from typing import Any, Sized
from signal import Signals
from collections.abc import Callable
from threading import Lock

__all__ = ["ensure_running", "register", "unregister"]

_HAVE_SIGMASK: bool = ...
_IGNORED_SIGNALS: tuple[Signals, Signals] = ...

_CLEANUP_FUNCS: dict[str, Callable[[Any], Any]] = ...

class ResourceTracker:
    _lock: Lock
    _fd: int | None
    _pid: int | None

    def __init__(self) -> None: ...
    def _stop(self) -> None: ...
    def getfd(self) -> int | None: ...
    def ensure_running(self) -> None: ...
    def _check_alive(self) -> bool: ...
    def register(self, name: Sized, rtype: object) -> None: ...
    def unregister(self, name: Sized, rtype: object) -> None: ...
    def _send(self, cmd: object, name: Sized, rtype: object) -> None: ...

_resource_tracker: ResourceTracker = ...
ensure_running: Callable[[], None] = ...
register: Callable[[Sized, object], None] = ...
unregister: Callable[[Sized, object], None] = ...
getfd: Callable[[], int | None] = ...

def main(fd: StrOrBytesPath | int) -> None: ...
