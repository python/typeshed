# Stubs for unicodedata (Python 3.4)
from typing import Any, TypeVar, Union

ucd_3_2_0 = ...  # type: UCD
ucnhash_CAPI = ...  # type: Any
unidata_version = ...  # type: str

_default = TypeVar('_default')

def bidirectional(unichr: str) -> str: ...
def category(unichr: str) -> str: ...
def combining(unichr: str) -> int: ...
def decimal(chr: str, __default: _default=...) -> Union[int, _default]: ...
def decomposition(unichr: str) -> str: ...
def digit(chr: str, __default: _default=...) -> Union[int, _default]: ...
def east_asian_width(unichr: str) -> str: ...
def lookup(name: Union[str, bytes]) -> str: ...
def mirrored(unichr: str) -> int: ...
def name(chr: str, __default: _default=...) -> Union[str, _default]: ...
def normalize(form: str, unistr: str) -> str: ...
def numeric(chr: str, __default: _default=...) -> Union[float, _default]: ...

class UCD:
    unidata_version = ...  # type: str
    def bidirectional(self, unichr: str) -> str: ...
    def category(self, unichr: str) -> str: ...
    def combining(self, unichr: str) -> int: ...
    def decimal(self, chr: str, __default: _default=...) -> Union[int, _default]: ...
    def decomposition(self, unichr: str) -> str: ...
    def digit(self, chr: str, __default: _default=...) -> Union[int, _default]: ...
    def east_asian_width(self, unichr: str) -> str: ...
    def lookup(self, name: Union[str, bytes]) -> str: ...
    def mirrored(self, unichr: str) -> int: ...
    def name(self, chr: str, __default: _default=...) -> Union[str, _default]: ...
    def normalize(self, form: str, unistr: str) -> str: ...
    def numeric(self, chr: str, __default: _default=...) -> Union[float, _default]: ...
