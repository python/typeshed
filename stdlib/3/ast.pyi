# Stubs for ast (Python 3.4)

from _ast import (
    AST,
    Add, And, Assert, Assign, Attribute, AugAssign, AugLoad, AugStore, BinOp,
    BitAnd, BitOr, BitXor, BoolOp, Break, Bytes, Call, ClassDef, Compare,
    Continue, Del, Delete, Dict, DictComp, Div, Ellipsis, Eq, ExceptHandler,
    Expr, Expression, ExtSlice, FloorDiv, For, FunctionDef, GeneratorExp,
    Global, Gt, GtE, If, IfExp, Import, ImportFrom, In, Index, Interactive,
    Invert, Is, IsNot, LShift, Lambda, List, ListComp, Load, Lt, LtE, Mod,
    Module, Mult, Name, NameConstant, Nonlocal, Not, NotEq, NotIn, Num, Or,
    Param, Pass, Pow, RShift, Raise, Return, Set, SetComp, Slice, Starred,
    Store, Str, Sub, Subscript, Suite, Try, Tuple, UAdd, USub, UnaryOp, While,
    With, Yield, YieldFrom, alias, arg, arguments, boolop, cmpop, comprehension,
    excepthandler, expr, expr_context, keyword, mod, operator, slice, stmt,
    unaryop, withitem
)

from typing import Any, Iterator, Union
from typing import Tuple as TupleType
from types import CodeType

def parse(source: str, filename: str = ..., mode: str = ...) -> CodeType: ...
# TODO restrict real returned type
def literal_eval(node_or_string: Union[str, AST]) -> Any: ...
def dump(node: AST, annotate_fields: bool = ...,
         include_attributes: bool = ...) -> str: ...
def copy_location(new_node: AST, old_node: AST) -> AST: ...
def fix_missing_locations(node: AST) -> AST: ...
def increment_lineno(node: AST, n: int = ...) -> AST: ...
def iter_fields(node: AST) -> Iterator[TupleType[str, AST]]: ...
def iter_child_nodes(node: AST) -> Iterator[AST]: ...
def get_docstring(node: AST, clean: bool = ...) -> str: ...
def walk(node: AST) -> Iterator[AST]: ...

class NodeVisitor:
    def visit(self, node: AST) -> Any: ...
    def generic_visit(self, node: AST) -> Any: ...

class NodeTransformer(NodeVisitor):
    def generic_visit(self, node: AST) -> AST: ...
