# Stubs for importlib.abc (Python 3.4)

import importlib._bootstrap as _bootstrap

from typing import Any, Optional, Tuple, List, Callable, Union
from types import ModuleType, CodeType
from ast import AST
from importlib._bootstrap import ModuleSpec

class Finder:
    def find_module(self, fullname: str, path: Optional[str]) -> Optional[Loader]: ...

class MetaPathFinder(Finder):
    def invalidate_caches(self) -> None: ...

# TODO find real type of return of find_loader
class PathEntryFinder(Finder):
    def find_loader(self, fullname: str) -> Tuple[Loader,List[Any]]: ...
    find_module = ... # type: Callable[[str], Loader]
    def invalidate_caches(self) -> None: ...

class Loader:
    def create_module(self, spec: ModuleSpec) -> Optional[ModuleType]: ...
    def load_module(self, fullname: str) -> ModuleType: ...
    def module_repr(self, module: ModuleType) -> str: ...

class ResourceLoader(Loader):
    def get_data(self, path: str) -> bytes: ...

# source can either be a normal string, a byte string, or an AST object.
class InspectLoader(Loader):
    def is_package(self, fullname: str) -> bool: ...
    def get_code(self, fullname: str) -> Optional[CodeType]: ...
    def get_source(self, fullname: str) -> str: ...
    def source_to_code(self, data: Union[str, bytes, AST], path: str, *,
                       _optimize: int = ...) -> CodeType: ...
    # TODO should be an object
    def exec_module(module: ModuleType) -> bool: ...
    # TODO should be an object
    def load_module(self, fullname: str) -> ModuleType: ...

class ExecutionLoader(InspectLoader):
    def get_filename(self, fullname: str) -> str: ...
    def get_code(self, fullname: str) -> CodeType: ...

class FileLoader(_bootstrap.FileLoader, ResourceLoader, ExecutionLoader): ...

class SourceLoader(_bootstrap.SourceLoader, ResourceLoader, ExecutionLoader):
    ...
