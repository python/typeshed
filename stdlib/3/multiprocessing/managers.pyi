# Stubs for multiprocessing.managers

# NOTE: These are incomplete!

import queue
import threading
from typing import Any, Dict, List

class Namespace: ...

_Namespace = Namespace

class BaseManager:
    def register(self, typeid: str, callable: Any = ...) -> None: ...

class SyncManager(BaseManager):
    def BoundedSemaphore(self, value: Any = ...) -> threading.BoundedSemaphore: ...
    def Condition(self, lock: Any = ...) -> threading.Condition: ...
    def Event(self) -> threading.Event: ...
    def Lock(self) -> threading.Lock: ...
    def Namespace(self) -> _Namespace: ...
    def Queue(self, maxsize: int = 0) -> queue.Queue: ...
    def RLock(self) -> threading.RLock: ...
    def Semaphore(self, value: Any = ...) -> threading.Semaphore: ...
    def Array(self, typecode: Any, sequence: Any) -> Any: ...
    def Value(self, typecode: Any, value: Any) -> Any: ...
    def dict(self, sequence: Any = ...) -> Dict: ...
    def list(self, sequence: Any = ...) -> List: ...

class RemoteError(Exception): ...
