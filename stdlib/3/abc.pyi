from typing import Any, Callable, Type, TypeVar
# Stubs for abc.

_T = TypeVar('_T')
_F = TypeVar('_F', bound=Callable[..., Any])

# Thesee definitions have special processing in mypy
class ABCMeta(type):
    def register(cls: ABCMeta, subclass: Type[_T]) -> Type[_T]: ...

def abstractmethod(callable: _F) -> _F: ...
class abstractproperty(property): ...
# These two are deprecated and not supported by mypy
def abstractstaticmethod(callable: _F) -> _F: ...
def abstractclassmethod(callable: _F) -> _F: ...

class ABC(metaclass=ABCMeta): ...

def get_cache_token() -> object: ...
