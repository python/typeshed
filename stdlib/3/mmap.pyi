# Stubs for mmap (python 3)

from typing import (
    IO, Optional, Sequence, Union,
    Generic, TypeVar, overload
)
import sys

# TODO already in PEP, have to get added to mypy
from typing import Type
from types import TracebackType
_T = TypeVar('_T')
class ContextManager(Generic[_T]):
    def __enter__(self) -> _T: ...
    def __exit__(self, exc_type: Optional[Type[BaseException]],
                 exc_val: Optional[Exception],
                 exc_tb: Optional[TracebackType]) -> bool: ...


ACCESS_READ = ... # type: int
ACCESS_WRITE = ... # type: int
ACCESS_COPY = ... # type: int

ALLOCATIONGRANULARITY = ... # type: int

if sys.platform != 'win32':
    MAP_PRIVATE = ... # type: int
    MAP_SHARED = ... # type: int
    PROT_READ = ... # type: int
    PROT_WRITE = ... # type: int

    PAGESIZE = ... # type: int


class mmap(ContextManager[mmap], Sequence[bytes]):
    closed = ... # type: bool
    if sys.platform == 'win32':
        def __init__(self, fileno: int, length: int,
                     tagname: Optional[str] = ..., access: int = ...,
                     *, offset: int = ...) -> None: ...
    else:
        def __init__(self,  # type: ignore
                     fileno: int, length: int, flags: int = ...,
                     prot: int = ..., access: int = ...,
                     *, offset: int = ...) -> None: ...
    def close(self) -> None: ...
    def find(self, sub: bytes,
             start: int = ..., end: int = ...) -> int: ...
    def flush(self, offset: int = ..., size: int = ...) -> int: ...
    def move(self, dest: int, src: int, count: int) -> None: ...
    def read(self, n: int = ...) -> bytes: ...
    def read_byte(self) -> bytes: ...
    def readline(self) -> bytes: ...
    def resize(self, newsize: int) -> None: ...
    def rfind(self, sub: bytes, start: int = ..., stop: int = ...) -> int: ...
    def seek(self, pos: int, whence: int = ...) -> None: ...
    def size(self) -> int: ...
    def tell(self) -> int: ...
    def write(self, bytes: bytes) -> None: ...
    def write_byte(self, byte: int) -> None: ...
    @overload  # type: ignore
    def __getitem__(self, index: int) -> int: ...
    @overload
    def __getitem__(self, index: slice) -> bytes: ...
    def __delitem__(self, index: Union[int, slice]) -> None: ...
    @overload
    def __setitem__(self, index: int, object: int) -> None: ...
    @overload
    def __setitem__(self, index: slice, object: bytes) -> None: ...
    def __len__(self) -> int: ...
