from typing import Any, Optional, Type, Union

def showwarning(message: Any, category: Type[Warning], filename: Any, lineno: Any, file: Optional[Any] = ..., line: Optional[Any] = ...) -> None: ...
def formatwarning(message: Any, category: Type[Warning], filename: Any, lineno: Any, line: Optional[Any] = ...): ...
def filterwarnings(action: str, message: str = ..., category: Type[Warning] = ..., module: str = ..., lineno: int = ..., append: bool = ...) -> None: ...
def simplefilter(action: str, category: Type[Warning] = ..., lineno: int = ..., append: bool = ...) -> None: ...
def resetwarnings() -> None: ...

class _OptionError(Exception): ...

def warn(message: Union[str, Warning], category: Optional[Type[Warning]] = ..., stacklevel: int = ...) -> None: ...
def warn_explicit(message: Union[str, Warning], category: Type[Warning], filename: str, lineno: int, module: Optional[Any] = ..., registry: Optional[Any] = ..., module_globals: Optional[Any] = ...) -> None: ...

class WarningMessage:
    message: Warning
    category: Type[Warning]
    filename: Any
    lineno: Any
    file: Optional[Any]
    line: Optional[Any]
    source: Optional[Any]

    def __init__(self, message: Warning, category: Type[Warning], filename: Any, lineno: Any, file: Optional[Any] = ..., line: Optional[Any] = ..., source: Optional[Any] = ...) -> None: ...

class catch_warnings:
    def __init__(self, *, record: bool = ..., module: Optional[Any] = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exc_info: Any) -> None: ...
