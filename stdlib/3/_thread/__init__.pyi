# Stubs for _thread (Python 3)

from typing import overload, Any, Callable, Mapping, NoReturn, Optional, Sequence, Tuple

TIMEOUT_MAX: float = ...

def _count() -> int: ...
def _set_sentinel() -> LockType: ...
def allocate() -> LockType: ...
def allocate_lock() -> LockType: ...
def exit() -> NoReturn: ...
def exit_thread() -> NoReturn: ...
def get_ident() -> int: ...
def interrupt_main() -> None: ...
def stack_size(size: int) -> int: ...
def start_new() -> Any: ...
def start_new_thread(function: Callable[..., Any], args: Sequence[Any], kwargs: Optional[Mapping[str, Any]] = None) -> Any: ...

class error(Exception): ...

class lock:
    def acquire(self, blocking: bool = ..., timeout: float = ...) -> bool: ...
    def acquire_lock(self) -> bool: ...
    def locked(self) -> bool: ...
    def locked_lock(self) -> bool: ...
    def release(self) -> None: ...
    def release_lock(self) -> None: ...
    def __enter__(self, blocking: bool = ..., timeout: float = ...) -> bool: ...
    def __exit__(self) -> None: ... # pylint: disable=unexpected-special-method-signature

class LockType:
    def acquire(self, blocking: bool = ..., timeout: float = ...) -> bool: ...
    def acquire_lock(self) -> bool: ...
    def locked(self) -> bool: ...
    def locked_lock(self) -> bool: ...
    def release(self) -> None: ...
    def release_lock(self) -> None: ...
    def __enter__(self, blocking: bool = ..., timeout: float = ...) -> bool: ...
    def __exit__(self) -> None: ... # pylint: disable=unexpected-special-method-signature

class RLock:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def _acquire_restore(self, state: Tuple[int, int]) -> None: ...
    def _is_owned(self) -> bool: ...
    def _release_save(self) -> Tuple[int, int]: ...
    def acquire(self, blocking: bool = ...) -> bool: ...
    def release(self) -> None: ...
    def __enter__(self, blocking: bool = ...) -> bool: ...
    def __exit__(self) -> None: ... # pylint: disable=unexpected-special-method-signature

class _local:
    @classmethod
    def __new__(cls, *args: Any, **kwargs: Any) -> _local: ... # pylint: disable=undefined-variable
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __getattribute__(self, name: str) -> Any: ...
