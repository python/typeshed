
from typing import Optional, Container, Dict, Sequence, Tuple, List, Any, Iterator, IO, Iterable
from types import CodeType

def AddPackagePath(packagename: str, path: str) -> None: ...

def ReplacePackage(oldname: str, newname: str) -> None: ...

class Module:  # undocumented

    def __init__(self, name: str, file: Optional[str] = ..., path: Optional[str] = ...) -> None: ...
    def __repr__(self) -> str: ...

class ModuleFinder:

    modules: Dict[str, Module]

    def __init__(self, path: List[str] = ..., debug: int = ..., excludes: Container[str] = ..., replace_paths: Sequence[Tuple[str, str]] = ...) -> None: ...
    def msg(self, level: int, str: str, *args: Any) -> None: ...
    def msgin(self, *args: Any) -> None: ...
    def msgout(self, *args: Any) -> None: ...
    def run_script(self, pathname: str) -> None: ...
    def load_file(self, pathname: str) -> None: ...
    def import_hook(self, name: str, caller: Optional[Module] = ..., fromlist: Optional[List[str]] = ..., level: int = ...) -> Optional[Module]: ...
    def determine_parent(self, caller: Optional[Module], level: int = ...) -> Optional[Module]: ...
    def find_head_package(self, parent: Module, name: str) -> Module: ...
    def load_tail(self, q: Module, tail: str) -> Module: ...
    def ensure_fromlist(self, m: Module, fromlist: Iterable[str], recursive: int = ...) -> None: ...
    def find_all_submodules(self, m: Module) -> Iterable[str]: ...
    def import_module(self, partname: str, fqname: str, parent: Module) -> Optional[Module]: ...
    def load_module(self, fqname: str, fp: IO[str], pathname: str, file_info: Tuple[str, str, str]) -> Module: ...
    def scan_opcodes(self, co: CodeType) -> Iterator[Tuple[str, Tuple[Any, ...]]]: ...
    def scan_code(self, co: CodeType, m: Module) -> None: ...
    def load_package(self, fqname: str, pathname: str) -> Module: ...
    def add_module(self, fqname: str) -> Module: ...
    def find_module(self, name: str, path: Optional[str], parent: Optional[Module] = ...) -> Tuple[Optional[IO[Any]], Optional[str], Tuple[str, str, int]]: ...
    def report(self) -> None: ...
    def any_missing(self) -> List[str]: ...
    def any_missing_maybe(self) -> Tuple[List[str], List[str]]: ...
    def replace_paths_in_code(self, co: CodeType) -> CodeType: ...
