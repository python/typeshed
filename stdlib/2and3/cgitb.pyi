
from typing import Dict, Any, List, Tuple, Optional, Callable, Type, Union, IO, AnyStr
from types import FrameType, TracebackType
from os import PathLike
import sys


if sys.version_info >= (3, 6):
    _Path = Union[AnyStr, PathLike[AnyStr]]
else:
    _Path = AnyStr


def reset() -> str: ...
def small(text: str) -> str: ...
def strong(text: str) -> str: ...
def grey(text: str) -> str: ...
def lookup(name: str, frame: FrameType, locals: Dict[str, Any]) -> Tuple[Optional[str], Any]: ...
def scanvars(reader: Callable[[], bytes], frame: FrameType, locals: Dict[str, Any]) -> List[Tuple[str, Optional[str], Any]]: ...
def html(einfo: Tuple[Type[BaseException], BaseException, TracebackType], context: int = ...) -> str: ...
def text(einfo: Tuple[Type[BaseException], BaseException, TracebackType], context: int = ...) -> str: ...

class Hook:

    def __init__(self, display: int = ..., logdir: Optional[_Path] = ..., context: int = ..., file: Optional[IO[str]] = ..., format: str = ...) -> None: ...
    def __call__(self, etype: Optional[Type[BaseException]], evalue: Optional[BaseException], etb: Optional[TracebackType]) -> None: ...
    def handle(self, info: Optional[Tuple[Optional[Type[BaseException]], Optional[BaseException], Optional[TracebackType]]] = ...) -> None: ...

handler: Callable[[Optional[Type[BaseException]], Optional[BaseException], Optional[TracebackType]], None]

def enable(display: int = ..., logdir: Optional[_Path] = ..., context: int = ..., format: str = ...) -> None: ...
