# Stubs for ctypes

from typing import (
    Any, Callable, Optional, Tuple, Type, Union,
    Generic, TypeVar, overload,
)
import sys

_T = TypeVar('_T')
if sys.platform == 'win32':
    _DLLT = TypeVar('_DLLT', CDLL, OleDLL, WinDLL, PyDLL)
else:
    _DLLT = TypeVar('_DLLT', CDLL, PyDLL)


RTLD_GLOBAL = ...  # type: int
RTLD_LOCAL = ...  # type: int
DEFAULT_MODE = ...  # type: int


class _DLL:
    def __init__(self, name: str, mode: int = ..., handle: Optional[int] = ...,
                 use_errno: bool = ..., use_last_error: bool = ...) -> None: ...
class CDLL(_DLL): ...
if sys.platform == 'win32':
    class OleDLL(_DLL): ...
    class WinDLL(_DLL): ...
class PyDLL(_DLL):
    _handle = ...  # type: int
    _name = ...  # type: str
    def __init__(self, name: str, mode: int = ...,
                 handle: Optional[int] = ...) -> None: ...

class LibraryLoader(Generic[_DLLT]):
    def __init__(self, dlltype: Type[_DLLT]) -> None: ...
    def LoadLibrary(self, name: str) -> _DLLT: ...

cdll = ...  # type: LibraryLoader[CDLL]
if sys.platform == 'win32':
    windll = ...  # type: LibraryLoader[WinDLL]
    oledll = ...  # type: LibraryLoader[OleDLL]
pydll = ...  # type: LibraryLoader[PyDLL]
pythonapi = ...  # type: PyDLL


_ECT = Callable[[Optional[Type[_SimpleCData]],
                 _FuncPtr,
                 Tuple[_SimpleCData[Any], ...]],
                _SimpleCData]
class _FuncPtr:
    restype = ...  # type: Union[Optional[Type[_SimpleCData]], Callable[[int], None]]
    argtypes = ...  # type: Tuple[Type[_SimpleCData], ...]
    errcheck = ...  # type: _ECT
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...

class ArgumentError(Exception): ...


def CFUNCTYPE(restype: Type[_SimpleCData],
              *argtypes: Type[_SimpleCData[Any]],
              use_errno: bool = ...,
              use_last_error: bool = ...) -> Type[_FuncProto]: ...
if sys.platform == 'win32':
    def WINFUNCTYPE(restype: Type[_SimpleCData],
                    *argtypes: Type[_SimpleCData[Any]],
                    use_errno: bool = ...,
                    use_last_error: bool = ...) -> Type[_FuncProto]: ...
def PYFUNCTYPE(restype: Type[_SimpleCData],
               *argtypes: Type[_SimpleCData[Any]],
               use_errno: bool = ...,
               use_last_error: bool = ...) -> Type[_FuncProto]: ...

_PF = Union[
    Tuple[int],
    Tuple[int, str],
    Tuple[int, str, Any],
]

class _FuncProto(_FuncPtr):
    @overload
    def __init__(self, address: int) -> None: ...
    @overload
    def __init__(self, callable: Callable[..., Any]) -> None: ...
    @overload
    def __init__(self, func_spec: Tuple[Union[str, int], _DLL],
                 paramflags: Tuple[_PF, ...] = ...) -> None: ...
    # TODO better type: iid is a pointer to the interface identifier
    @overload
    def __init__(self, vtlb_index: int, name: str,
                 paramflags: Tuple[_PF, ...] = ...,
                 iid: _SimpleCData[Any] = ...) -> None: ...

class _cparam: ...

def addressof(obj: _SimpleCData[Any]) -> int: ...
def alignment(obj_or_type: Union[_SimpleCData[Any], Type[_SimpleCData[Any]]]) -> int: ...
def byref(obj: _SimpleCData, offset: int = ...) -> _cparam: ...
def cast(obj: _SimpleCData[Any], type: Type[_Pointer[Any]]) -> _SimpleCData[Any]: ...
def create_string_buffer(init_or_size: Union[int, bytes],
                         size: Optional[int] = ...) -> Array[c_char]: ...
def create_unicode_buffer(init_or_size: Union[int, str],
                          size: Optional[int] = ...) -> Array[c_wchar]: ...
if sys.platform == 'win32':
    def DllCanUnloadNow() -> int: ...
    def DllGetClassObject(rclsid: Any, riid: Any, ppv: Any) -> int: ...  # TODO not documented
    def FormatError(code: int) -> str: ...
    def GetLastError() -> int: ...
def get_errno() -> int: ...
if sys.platform == 'win32':
    def get_last_error() -> int: ...
def memmove(dst: Union[int, _SimpleCData[Any]],
            src: Union[int, _SimpleCData[Any]],
            count: int) -> None: ...
def memset(dst: Union[int, _SimpleCData[Any]],
           c: int, count: int) -> None: ...
def POINTER(type: Type[_SimpleCData[Any]]) -> Type[_SimpleCData[Any]]: ...  # TODO need recursive typing
def pointer(obj: _SimpleCData[Any]) -> _SimpleCData[Any]: ...  # TODO need recursive typing
def resize(obj: _SimpleCData[Any], size: int) -> None: ...
def set_errno(value: int) -> int: ...
if sys.platform == 'win32':
    def set_last_error(value: int) -> int: ...
def sizeof(obj_or_type: Union[_SimpleCData[Any], Type[_SimpleCData[Any]]]) -> int: ...
def string_at(address: int, size: int = ...) -> bytes: ...
if sys.platform == 'win32':
    def WinError(code: Optional[int] = ...,
                 desc: Optional[str] = ...) -> OSError: ...
def wstring_at(address: int, size: int = ...) -> str: ...


class _SimpleCData(Generic[_T]):
    value = ...  # type: _T
    def __init__(self, value: _T) -> None: ...

#class c_bool(_SimpleCData[int]):
#    def __init__(self, value: bool) -> None: ...

#class c_char(_SimpleCData[bytes]): ...
#class c_wchar(_SimpleCData[str]): ...

#class c_byte(_SimpleCData[int]): ...
#class c_ubyte(_SimpleCData[int]): ...

#class c_short(_SimpleCData[int]): ...
#class c_ushort(_SimpleCData[int]): ...

#class c_int(_SimpleCData[int]): ...
#class c_uint(_SimpleCData[int]): ...

#class c_long(_SimpleCData[int]): ...
#class c_ulong(_SimpleCData[int]): ...
#class c_longlong(_SimpleCData[int]): ...
#class c_ulonglong(_SimpleCData[int]): ...

#class c_size_t(_SimpleCData[int]): ...
#class c_ssize_t(_SimpleCData[int]): ...

#class c_float(_SimpleCData[float]): ...
#class c_double(_SimpleCData[float]): ...
#class c_longdouble(_SimpleCData[float]): ...

#class c_char_p(_SimpleCData[Optional[bytes]]): ...
#class c_wchar_p(_SimpleCData[Optional[str]]): ...
#class c_voidp(_SimpleCData[Optional[int]]): ...


#def c_buffer(init, size=None): ...

#class py_object(_SimpleCData): ...

#c_int = ...  # type: Any
#c_uint = ...  # type: Any


#c_longdouble = ...  # type: Any
#c_longlong = ...  # type: Any
#c_ulonglong = ...  # type: Any

#class c_char(_SimpleCData): ...
#class c_void_p(_SimpleCData): ...


#class c_wchar(_SimpleCData): ...

#def SetPointerType(pointer, cls): ...
#def ARRAY(typ, len): ...

#class HRESULT(_SimpleCData): ...


#def WinError(code=None, descr=None): ...



#c_int8 = ...  # type: Any
#c_uint8 = ...  # type: Any
#c_int16 = ...  # type: Any
#c_int32 = ...  # type: Any
#c_int64 = ...  # type: Any
#c_uint16 = ...  # type: Any
#c_uint32 = ...  # type: Any
#c_uint64 = ...  # type: Any
