# Stubs for fractions
# See https://docs.python.org/3/library/fractions.html

from typing import Optional, TypeVar, Union, overload
from numbers import Complex, Rational
from decimal import Decimal
import sys

_TComplex = TypeVar('_TComplex', bound=Complex)
_TOtherNum = TypeVar('_TOtherNum', int, float, Decimal)
_TNum = TypeVar('_TNum', int, float, Decimal, Complex)

@overload
def gcd(a: _TComplex, b: _TComplex) -> _TComplex: ...
@overload
def gcd(a: _TOtherNum, b: _TOtherNum) -> _TOtherNum: ...

class Fraction(Rational):
    @overload
    def __init__(self,
                 numerator: Union[int, Rational] = 0,
                 denominator: Optional[Union[int, Rational]] = 0,
                 *,
                 _normalize: bool = True) -> None: ...
    @overload
    def __init__(self, value: float, *, _normalize=True) -> None: ...
    @overload
    def __init__(self, value: Decimal, *, _normalize=True) -> None: ...
    @overload
    def __init__(self, value: str, *, _normalize=True) -> None: ...

    @classmethod
    def from_float(cls, f: float) -> 'Fraction': ...
    @classmethod
    def from_decimal(cls, dec: Decimal) -> 'Fraction': ...
    def limit_denominator(self, max_denominator: int = 1000000) -> 'Fraction': ...

    @property
    def numerator(self) -> int: ...
    @property
    def denominator(self) -> int: ...

    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    if sys.version_info < (3, 0):
        def __div__(self, other): ...
        def __rdiv__(self, other): ...
    def __floordiv__(self, other) -> int: ...
    def __rfloordiv__(self, other) -> int: ...
    def __mod__(self, other): ...
    def __rmod__(self, other): ...
    def __pow__(self, other): ...
    def __rpow__(self, other): ...

    def __pos__(self) -> 'Fraction': ...
    def __neg__(self) -> 'Fraction': ...
    def __abs__(self) -> 'Fraction': ...
    def __trunc__(self) -> int: ...
    if sys.version_info >= (3, 0):
        def __floor__(self) -> int: ...
        def __ceil__(self) -> int: ...
        def __round__(self, ndigits=None): ...

    # TODO: Once https://github.com/python/typeshed/pull/543 is
    # accepted, add the following definition
    # def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: _TNum) -> bool: ...
    def __gt__(self, other: _TNum) -> bool: ...
    def __le__(self, other: _TNum) -> bool: ...
    def __ge__(self, other: _TNum) -> bool: ...
    if sys.version_info >= (3, 0):
        def __bool__(self) -> bool: ...
    else:
        def __nonzero__(self) -> bool: ...

    # Not actually defined within fractions.py, but provides more useful
    # overrides
    @property
    def real(self) -> 'Fraction': ...
    @property
    def imag(self) -> 'Fraction': ...
    def conjugate(self) -> 'Fraction': ...
