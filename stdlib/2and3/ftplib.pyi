# Stubs for ftplib (Python 2.7/3)
import sys
from typing import Optional, BinaryIO, Tuple, TextIO, Iterable, Callable, List, Union, Iterator, Dict, Text, TypeVar, Generic, AnyStr
from types import TracebackType
from socket import socket
from ssl import SSLContext

MSG_OOB = ...  # type: int
FTP_PORT = ...  # type: int
MAXLINE = ...  # type: int
CRLF = ...  # type: str
if sys.version_info >= (3,):
    B_CRLF = ...  # type: bytes

class Error(Exception): ...
class error_reply(Error): ...
class error_temp(Error): ...
class error_perm(Error): ...
class error_proto(Error): ...

T = TypeVar('T')

class FTP(Generic[AnyStr]):
    debugging = ...  # type: int
    host = ...  # type: AnyStr
    port = ...  # type: int
    maxline = ...  # type: int
    sock = ...  # type: Optional[socket]
    welcome = ...  # type: Optional[str]
    passiveserver = ...  # type: int
    timeout = ...  # type: int
    af = ...  # type: int
    lastresp = ...  # type: str

    if sys.version_info >= (3,):
        file = ...  # type: Optional[TextIO]
        encoding = ...  # type: str
        def __enter__(self: T) -> T: ...
        def __exit__(self, exc_type: Optional[type], exc_val: Optional[Exception],
                     exc_tb: Optional[TracebackType]) -> bool: ...
    else:
        file = ...  # type: Optional[BinaryIO]

    if sys.version_info >= (3, 3):
        source_address = ...  # type: Optional[Tuple[str, int]]
        def __init__(self, host: AnyStr = ..., user: str = ..., passwd: str = ..., acct: str = ...,
                     timeout: float = ..., source_address: Optional[Tuple[str, int]] = ...) -> None: ...
        def connect(self, host: AnyStr = ..., port: int = ..., timeout: float = ...,
                    source_address: Optional[Tuple[str, int]] = ...) -> str: ...
    else:
        def __init__(self, host: AnyStr = ..., user: str = ..., passwd: str = ..., acct: str = ...,
                     timeout: float = ...) -> None: ...
        def connect(self, host: AnyStr = ..., port: int = ..., timeout: float = ...) -> str: ...

    def getwelcome(self) -> str: ...
    def set_debuglevel(self, level: int) -> None: ...
    def debug(self, level: int) -> None: ...
    def set_pasv(self, val: Union[bool, int]) -> None: ...
    def sanitize(self, s: str) -> str: ...
    def putline(self, line: str) -> None: ...
    def putcmd(self, line: str) -> None: ...
    def getline(self) -> str: ...
    def getmultiline(self) -> str: ...
    def getresp(self) -> str: ...
    def voidresp(self) -> str: ...
    def abort(self) -> str: ...
    def sendcmd(self, cmd: str) -> str: ...
    def voidcmd(self, cmd: str) -> str: ...
    def sendport(self, host: str, port: int) -> str: ...
    def sendeprt(self, host: str, port: int) -> str: ...
    def makeport(self) -> socket: ...
    def makepasv(self) -> Tuple[str, int]: ...
    def ntransfercmd(self, cmd: str, rest: Optional[str] = ...) -> Tuple[socket, int]: ...
    def transfercmd(self, cmd: str, rest: Optional[str] = ...) -> socket: ...
    def login(self, user: str = ..., passwd: str = ..., acct: str = ...) -> str: ...
    def retrbinary(self, cmd: str, callback: Callable[[bytes], None], blocksize: int = ..., rest: Optional[str] = ...) -> str: ...
    def retrlines(self, cmd: str, callback: Optional[Callable[[str], None]] = ...) -> str: ...
    def storbinary(self, cmd: str, fp: BinaryIO, blocksize: int = ..., callback: Optional[Callable[[bytes], None]] = ..., rest: Optional[str] = ...) -> str: ...
    def storlines(self, cmd: str, fp: BinaryIO, callback: Optional[Callable[[bytes], None]] = ...) -> str: ...
    def acct(self, password: str) -> str: ...
    def nlst(self, *args: str) -> List[str]: ...

    # Technically only the last arg can be a Callable but ...
    def dir(self, *args: Union[str, Callable[[str], None]]) -> None: ...

    if sys.version_info >= (3, 3):
        def mlsd(self, path: str = ..., facts: Iterable[str] = ...) -> Iterator[Tuple[str, Dict[str, str]]]: ...
    def rename(self, fromname: str, toname: str) -> str: ...
    def delete(self, filename: str) -> str: ...
    def cwd(self, dirname: str) -> str: ...
    def size(self, filename: str) -> str: ...
    def mkd(self, dirname: str) -> str: ...
    def rmd(self, dirname: str) -> str: ...
    def pwd(self) -> str: ...
    def quit(self) -> str: ...
    def close(self) -> None: ...

class FTP_TLS(FTP):
    def __init__(self, host: AnyStr = ..., user: str = ..., passwd: str = ..., acct: str = ...,
                 keyfile: Optional[str] = ..., certfile: Optional[str] = ...,
                 context: Optional[SSLContext] = ..., timeout: float = ...,
                 source_address: Optional[Tuple[str, int]] = ...) -> None: ...

    ssl_version = ...  # type: int
    keyfile = ...  # type: Optional[str]
    certfile = ...  # type: Optional[str]
    context = ...  # type: SSLContext

    def login(self, user: str = ..., passwd: str = ..., acct: str = ..., secure: bool = ...) -> str: ...
    def auth(self) -> str: ...
    def prot_p(self) -> str: ...
    def prot_c(self) -> str: ...

    if sys.version_info >= (3, 3):
        def ccc(self) -> str: ...

if sys.version_info == (2,):
    class Netrc:
        def __init__(self, filename: Optional[Text] = ...) -> None: ...
        def get_hosts(self) -> List[str]: ...
        def get_account(self, host: str) -> Tuple[Optional[str], Optional[str], Optional[str]]: ...
        def get_macros(self) -> List[str]: ...
        def get_macro(self, macro: str) -> Tuple[str, ...]: ...
