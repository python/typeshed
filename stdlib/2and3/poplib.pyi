# Stubs for poplib (Python 2 and 3)

from mypy_extensions import NoReturn
import socket
import ssl
import sys
from typing import Any, BinaryIO, Dict, List, Optional, Pattern, Tuple

class error_proto(Exception): pass

POP3_PORT: int
POP3_SSL_PORT: int
CR: bytes
LF: bytes
CRLF: bytes


class POP3:
    if sys.version_info >= (3, 0):
        encoding: str

    host: str
    port: int
    sock: socket.socket
    file: BinaryIO
    welcome: bytes

    def __init__(self, host: str, port: int = ..., timeout: float = ...) -> None: ...
    def getwelcome(self) -> bytes: ...
    def set_debuglevel(self, level: int) -> None: ...
    def user(self, user: str) -> bytes: ...
    def pass_(self, pswd: str) -> bytes: ...
    def stat(self) -> Tuple[int, int]: ...
    def list(self, which: Optional[str] = ...) -> bytes: ...
    def retr(self, which: str) -> bytes: ...
    def dele(self, which: str) -> bytes: ...
    def noop(self) -> bytes: ...
    def rset(self) -> bytes: ...
    def quit(self) -> bytes: ...
    def close(self) -> None: ...
    def rpop(self, user: str) -> bytes: ...

    timestamp: Pattern[str]

    if sys.version_info < (3, 0):
        def apop(self, user: str, secret: str) -> bytes: ...
    else:
        def apop(self, user: str, password: str) -> bytes: ...
    def top(self, which: str, howmuch: int) -> bytes: ...
    def uidl(self, which: Optional[str] = ...) -> bytes: ...
    if sys.version_info >= (3, 5):
        def utf8(self) -> bytes: ...
    if sys.version_info >= (3, 4):
        def capa(self) -> Dict[str, List[str]]: ...
        def stls(self, context: Optional[ssl.SSLContext] = ...) -> bytes: ...


class POP3_SSL(POP3):
    if sys.version_info >= (3, 0):
        def __init__(self, host: str, port: int = ..., keyfile: Optional[str] = ..., certfile: Optional[str] = ...,
                     timeout: float = ..., context: Optional[ssl.SSLContext] = ...) -> None: ...
    else:
        def __init__(self, host: str, port: int = ..., keyfile: Optional[str] = ..., certfile: Optional[str] = ...,
                     timeout: float = ...) -> None: ...

    if sys.version_info >= (3, 4):
        # "context" is actually the last argument, but that breaks LSP and it doesn't really matter because all the arguments are ignored
        def stls(self, context: Any = ..., keyfile: Any = ..., certfile: Any = ...) -> bytes: ...
