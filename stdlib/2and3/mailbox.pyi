
from typing import Optional, Union, Text, AnyStr, Callable, IO, Any, Iterator, List, Tuple, TypeVar, Protocol, Dict, Iterable
import sys
import email

if sys.version_info >= (3, 8):
    from typing import Literal
else:
    from typing_extensions import Literal

if sys.version_info >= (3, 6):
    from builtins import _PathLike
    _PathType = Union[bytes, Text, _PathLike]
else:
    _PathType = Union[bytes, Text]

_T = TypeVar("_T")
_MessageData = Union[email.message.Message, bytes, str, IO[AnyStr]]

class HasIteritems(Protocol):
    def iteritems(self) -> Iterator[Tuple[str, Message]]: ...

class HasItems(Protocol):
    def items(self) -> Iterator[Tuple[str, Message]]: ...

linesep: bytes

class Mailbox:

    _path: AnyStr
    _factory: Optional[Callable[[IO[Any]], Message]]

    def __init__(self, path: _PathType, factory: Optional[Callable[[IO[Any]], Message]] = ..., create: bool = ...) -> None: ...
    def add(self, message: Message) -> str: ...
    def remove(self, key: str) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def discard(self, key: str) -> None: ...
    def __setitem__(self, key: str, message: Message) -> None: ...
    def get(self, key: str, default: Optional[_T] = ...) -> Union[Message, _T]: ...
    def __getitem__(self, key: str) -> Message: ...
    def get_message(self, key: str) -> Message: ...
    def get_string(self, key: str) -> str: ...
    def get_bytes(self, key: str) -> bytes: ...
    def get_file(self, key: str) -> IO[Any]: ...
    def iterkeys(self) -> Iterator[str]: ...
    def keys(self) -> List[str]: ...
    def itervalues(self) -> Iterator[Message]: ...
    def __iter__(self) -> Iterator[Message]: ...
    def values(self) -> List[Message]: ...
    def iteritems(self) -> Iterator[Tuple[str, Message]]: ...
    def items(self) -> List[Tuple[str, Message]]: ...
    def __contains__(self, key: str) -> bool: ...
    def __len__(self) -> int: ...
    def clear(self) -> None: ...
    def pop(self, key: str, default: Optional[_T] = ...) -> Union[Message, _T]: ...
    def popitem(self) -> Tuple[str, Message]: ...
    def update(self, arg: Optional[HasIteritems, HasItems, Iterable[Tuple[str, Message]]] = ...) -> None: ...
    def flush(self) -> None: ...
    def lock(self) -> None: ...
    def unlock(self) -> None: ...
    def close(self) -> None: ...

class Maildir(Mailbox):

    colon: str

    def list_folders(self) -> List[str]: ...
    def get_folder(self, folder: Text) -> Maildir: ...
    def add_folder(self, folder: Text) -> Maildir: ...
    def remove_folder(self, folder: Text) -> None: ...
    def clean(self) -> None: ...
    def next(self) -> str: ...

class _singlefileMailbox(Mailbox): ...

class _mboxMMDF(_singlefileMailbox): ...

class mbox(_mboxMMDF): ...

class MMDF(_mboxMMDF): ...

class MH(Mailbox):

    def list_folders(self) -> List[str]: ...
    def get_folder(self, folder: _PathType) -> MH: ...
    def add_folder(self, folder: _PathType) -> MH: ...
    def remove_folder(self, folder: _PathType) -> None: ...
    def get_sequences(self) -> Dict[str, List[int]]: ...
    def set_sequences(self, sequences: Dict[str, List[int]]) -> None: ...
    def pack(self) -> None: ...

class Babyl(_singlefileMailbox):

    def get_labels(self) -> List[str]: ...

class Message(email.message.Message):

    def __init__(self, message: Optional[_MessageData] = ...) -> None: ...

class MaildirMessage(Message):

    def get_subdir(self) -> str: ...
    def set_subdir(self, subdir: Union[Literal["new"], Literal["cur"]]) -> None: ...
    def get_flags(self) -> str: ...
    def set_flags(self, flags: Iterable[str]) -> None: ...
    def add_flag(self, flag: str) -> None: ...
    def remove_flag(self, flag: str) -> None: ...
    def get_date(self) -> int: ...
    def set_date(self, date: int) -> None: ...
    def get_info(self) -> str: ...
    def set_info(self, info: str) -> None: ...

class _mboxMMDFMessage(Message):

    def get_from(self) -> str: ...
    def set_from(self, from_: str, time_: Optional[Union[bool, Tuple[int, int, int, int, int, int, int, int, int]]] = ...) -> None: ...
    def get_flags(self) -> str: ...
    def set_flags(self, flags: Iterable[str]) -> None: ...
    def add_flag(self, flag: str) -> None: ...
    def remove_flag(self, flag: str) -> None: ...

class mboxMessage(_mboxMMDFMessage): ...

class MHMessage(Message):

    def get_sequences(self) -> List[str]: ...
    def set_sequences(self, sequences: Iterable[str]) -> None: ...
    def add_sequence(self, sequence: str) -> None: ...
    def remove_sequence(self, sequence: str) -> None: ...

class BabylMessage(Message):

    def get_labels(self) -> List[str]: ...
    def set_labels(self, labels: Iterable[str]) -> None: ...
    def add_label(self, label: str) -> None: ...
    def remove_label(self, label: str) -> None: ...
    def get_visible(self) -> Message: ...
    def set_visible(self, visible: _MessageData) -> None: ...
    def update_visible(self) -> None: ...

class MMDFMessage(_mboxMMDFMessage): ...

class Error(Exception): ...

class NoSuchMailboxError(Error): ...

class NotEmptyError(Error): ...

class ExternalClashError(Error): ...

class FormatError(Error): ...
