## Stubs for tarfile

from typing import (
    Callable, ContextManager, IO, List, Mapping, Optional, Type, Union,
)
import sys
from types import TracebackType

def open(name: Optional[str] = ..., mode: str = ...,
        fileobj: Optional[IO[bytes]] = ..., bufsize: int = ...,
        *, format: Optional[int] = ..., tarinfo: Optional[TarInfo] = ...,
        dereference: Optional[bool] = ...,
        ignore_zeros: Optional[bool] = ...,
        encoding: Optional[str] = ..., errors: str = ...,
        pax_headers: Optional[Mapping[str, str]] = ...,
        debug: Optional[int] = ...,
        errorlevel: Optional[int] = ...) -> TarFile: ...

#class _LowLevelFile:
#    fd = ...  # type: Any
#    def __init__(self, name, mode): ...
#    def close(self): ...
#    def read(self, size): ...
#    def write(self, s): ...

#class _Stream:
#    name = ...  # type: Any
#    mode = ...  # type: Any
#    comptype = ...  # type: Any
#    fileobj = ...  # type: Any
#    bufsize = ...  # type: Any
#    buf = ...  # type: Any
#    pos = ...  # type: Any
#    closed = ...  # type: Any
#    zlib = ...  # type: Any
#    crc = ...  # type: Any
#    exception = ...  # type: Any
#    dbuf = ...  # type: Any
#    cmp = ...  # type: Any
#    def __init__(self, name, mode, comptype, fileobj, bufsize): ...
#    def __del__(self): ...
#    def write(self, s): ...
#    def close(self): ...
#    def tell(self): ...
#    def seek(self, pos=0): ...
#    def read(self, size=None): ...

#class _StreamProxy:
#    fileobj = ...  # type: Any
#    buf = ...  # type: Any
#    def __init__(self, fileobj): ...
#    read = ...  # type: Any
#    def read(self, size): ...
#    def getcomptype(self): ...
#    def close(self): ...

#class _FileInFile:
#    fileobj = ...  # type: Any
#    offset = ...  # type: Any
#    size = ...  # type: Any
#    position = ...  # type: Any
#    name = ...  # type: Any
#    closed = ...  # type: Any
#    map_index = ...  # type: Any
#    map = ...  # type: Any
#    def __init__(self, fileobj, offset, size, blockinfo=None): ...
#    def flush(self): ...
#    def readable(self): ...
#    def writable(self): ...
#    def seekable(self): ...
#    def tell(self): ...
#    def seek(self, position, whence=...): ...
#    def read(self, size=None): ...
#    def readinto(self, b): ...
#    def close(self): ...

#class ExFileObject(io.BufferedReader):
#    def __init__(self, tarfile, tarinfo): ...

class TarInfo: ...
#    name = ...  # type: Any
#    mode = ...  # type: Any
#    uid = ...  # type: Any
#    gid = ...  # type: Any
#    size = ...  # type: Any
#    mtime = ...  # type: Any
#    chksum = ...  # type: Any
#    type = ...  # type: Any
#    linkname = ...  # type: Any
#    uname = ...  # type: Any
#    gname = ...  # type: Any
#    devmajor = ...  # type: Any
#    devminor = ...  # type: Any
#    offset = ...  # type: Any
#    offset_data = ...  # type: Any
#    sparse = ...  # type: Any
#    pax_headers = ...  # type: Any
#    def __init__(self, name=''): ...
#    path = ...  # type: Any
#    linkpath = ...  # type: Any
#    def get_info(self): ...
#    def tobuf(self, format=..., encoding=..., errors=''): ...
#    def create_ustar_header(self, info, encoding, errors): ...
#    def create_gnu_header(self, info, encoding, errors): ...
#    def create_pax_header(self, info, encoding): ...
#    @classmethod
#    def create_pax_global_header(cls, pax_headers): ...
#    @classmethod
#    def frombuf(cls, buf, encoding, errors): ...
#    @classmethod
#    def fromtarfile(cls, tarfile): ...
#    def isreg(self): ...
#    def isfile(self): ...
#    def isdir(self): ...
#    def issym(self): ...
#    def islnk(self): ...
#    def ischr(self): ...
#    def isblk(self): ...
#    def isfifo(self): ...
#    def issparse(self): ...
#    def isdev(self): ...

class TarFile(ContextManager):
    pax_headers = ...  # type: Mapping[str, str]
    def __init__(self, name: Optional[str] = ..., mode: str = ...,
                 fileobj: Optional[IO[bytes]] = ...,
                 format: Optional[int] = ..., tarinfo: Optional[TarInfo] = ...,
                 dereference: Optional[bool] = ...,
                 ignore_zeros: Optional[bool] = ...,
                 encoding: Optional[str] = ..., errors: str = ...,
                 pax_headers: Optional[Mapping[str, str]] = ...,
                 debug: Optional[int] = ...,
                 errorlevel: Optional[int] = ...) -> None: ...
    @classmethod
    def open(cls, name: Optional[str] = ..., mode: str = ...,
             fileobj: Optional[IO[bytes]] = ..., bufsize: int = ...,
             *, format: Optional[int] = ..., tarinfo: Optional[TarInfo] = ...,
             dereference: Optional[bool] = ...,
             ignore_zeros: Optional[bool] = ...,
             encoding: Optional[str] = ..., errors: str = ...,
             pax_headers: Optional[Mapping[str, str]] = ...,
             debug: Optional[int] = ...,
             errorlevel: Optional[int] = ...) -> TarFile: ...
    def __enter__(self) -> TarFile: ...
    def __exit__(self,
                 exc_type: Optional[Type[BaseException]],
                 exc_val: Optional[Exception],
                 exc_tb: Optional[TracebackType]) -> bool: ...
    def getmember(self, name: str) -> TarInfo: ...
    def getmembers(self) -> List[TarInfo]: ...
    def getnames(self) -> List[str]: ...
    if sys.version_info >= (3, 5):
        def list(self, verbose: bool = ...,
                 *, members: Optional[List[TarInfo]] = ...) -> None: ...
    else:
        def list(self, verbose: bool = ...) -> None: ...
    def next(self) -> Optional[TarInfo]: ...
    if sys.version_info >= (3, 5):
        def extractall(self, path: str = ...,
                       members: Optional[List[TarInfo]] = ...,
                       *, numeric_owner: bool = ...) -> None: ...
        def extract(self, member: Union[str, TarInfo], path: str = ...,
                    set_attrs: bool = ...,
                    *, numeric_owner: bool = ...) -> None: ...
    else:
        def extractall(self, path: str = ...,
                       members: Optional[List[TarInfo]] = ...) -> None: ...
        def extract(self, member: Union[str, TarInfo], path: str = ...,
                    set_attrs: bool = ...) -> None: ...
    def extractfile(self,
                    member: Union[str, TarInfo]) -> Optional[IO[bytes]]: ...
    def add(self, name: str, arcname: Optional[str] = ...,
            recursive: bool = ...,
            exclude: Optional[Callable[[str], bool]] = ..., *,
            filter: Optional[Callable[[TarInfo], Optional[TarInfo]]] = ...) -> None: ...
    def addfile(self, tarinfo: TarInfo,
                fileobj: Optional[IO[bytes]] = ...) -> None: ...
    def gettarinfo(self, name: Optional[str] = ...,
                   arcname: Optional[str] = ...,
                   fileobj: Optional[IO[bytes]] = ...) -> TarInfo: ...
    def close(self) -> None: ...

#class TarIter:
#    tarfile = ...  # type: Any
#    index = ...  # type: Any
#    def __init__(self, tarfile): ...
#    def __iter__(self): ...
#    def __next__(self): ...

def is_tarfile(name: str) -> bool: ...

class TarError(Exception): ...
class ReadError(TarError): ...
class CompressionError(TarError): ...
class StreamError(TarError): ...
class ExtractError(TarError): ...
class HeaderError(TarError): ...
#class EmptyHeaderError(HeaderError): ...
#class TruncatedHeaderError(HeaderError): ...
#class EOFHeaderError(HeaderError): ...
#class InvalidHeaderError(HeaderError): ...
#class SubsequentHeaderError(HeaderError): ...

ENCODING = ...  # type: str

USTAR_FORMAT = ...  # type: int
GNU_FORMAT = ...  # type: int
PAX_FORMAT = ...  # type: int
DEFAULT_FORMAT = ...  # type: int
