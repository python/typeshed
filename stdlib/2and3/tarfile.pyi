## Stubs for tarfile

from typing import IO, Optional
#import io

def open(name: Optional[str] = ..., mode: str = ...,
        fileobj: Optional[IO[bytes]] = ..., bufsize: int = ...,
        **kwargs) -> TarFile: ...

#class _LowLevelFile:
#    fd = ...  # type: Any
#    def __init__(self, name, mode): ...
#    def close(self): ...
#    def read(self, size): ...
#    def write(self, s): ...

#class _Stream:
#    name = ...  # type: Any
#    mode = ...  # type: Any
#    comptype = ...  # type: Any
#    fileobj = ...  # type: Any
#    bufsize = ...  # type: Any
#    buf = ...  # type: Any
#    pos = ...  # type: Any
#    closed = ...  # type: Any
#    zlib = ...  # type: Any
#    crc = ...  # type: Any
#    exception = ...  # type: Any
#    dbuf = ...  # type: Any
#    cmp = ...  # type: Any
#    def __init__(self, name, mode, comptype, fileobj, bufsize): ...
#    def __del__(self): ...
#    def write(self, s): ...
#    def close(self): ...
#    def tell(self): ...
#    def seek(self, pos=0): ...
#    def read(self, size=None): ...

#class _StreamProxy:
#    fileobj = ...  # type: Any
#    buf = ...  # type: Any
#    def __init__(self, fileobj): ...
#    read = ...  # type: Any
#    def read(self, size): ...
#    def getcomptype(self): ...
#    def close(self): ...

#class _FileInFile:
#    fileobj = ...  # type: Any
#    offset = ...  # type: Any
#    size = ...  # type: Any
#    position = ...  # type: Any
#    name = ...  # type: Any
#    closed = ...  # type: Any
#    map_index = ...  # type: Any
#    map = ...  # type: Any
#    def __init__(self, fileobj, offset, size, blockinfo=None): ...
#    def flush(self): ...
#    def readable(self): ...
#    def writable(self): ...
#    def seekable(self): ...
#    def tell(self): ...
#    def seek(self, position, whence=...): ...
#    def read(self, size=None): ...
#    def readinto(self, b): ...
#    def close(self): ...

#class ExFileObject(io.BufferedReader):
#    def __init__(self, tarfile, tarinfo): ...

#class TarInfo:
#    name = ...  # type: Any
#    mode = ...  # type: Any
#    uid = ...  # type: Any
#    gid = ...  # type: Any
#    size = ...  # type: Any
#    mtime = ...  # type: Any
#    chksum = ...  # type: Any
#    type = ...  # type: Any
#    linkname = ...  # type: Any
#    uname = ...  # type: Any
#    gname = ...  # type: Any
#    devmajor = ...  # type: Any
#    devminor = ...  # type: Any
#    offset = ...  # type: Any
#    offset_data = ...  # type: Any
#    sparse = ...  # type: Any
#    pax_headers = ...  # type: Any
#    def __init__(self, name=''): ...
#    path = ...  # type: Any
#    linkpath = ...  # type: Any
#    def get_info(self): ...
#    def tobuf(self, format=..., encoding=..., errors=''): ...
#    def create_ustar_header(self, info, encoding, errors): ...
#    def create_gnu_header(self, info, encoding, errors): ...
#    def create_pax_header(self, info, encoding): ...
#    @classmethod
#    def create_pax_global_header(cls, pax_headers): ...
#    @classmethod
#    def frombuf(cls, buf, encoding, errors): ...
#    @classmethod
#    def fromtarfile(cls, tarfile): ...
#    def isreg(self): ...
#    def isfile(self): ...
#    def isdir(self): ...
#    def issym(self): ...
#    def islnk(self): ...
#    def ischr(self): ...
#    def isblk(self): ...
#    def isfifo(self): ...
#    def issparse(self): ...
#    def isdev(self): ...

class TarFile: ...
#    debug = ...  # type: Any
#    dereference = ...  # type: Any
#    ignore_zeros = ...  # type: Any
#    errorlevel = ...  # type: Any
#    format = ...  # type: Any
#    encoding = ...  # type: Any
#    errors = ...  # type: Any
#    tarinfo = ...  # type: Any
#    fileobject = ...  # type: Any
#    mode = ...  # type: Any
#    name = ...  # type: Any
#    fileobj = ...  # type: Any
#    pax_headers = ...  # type: Any
#    closed = ...  # type: Any
#    members = ...  # type: Any
#    offset = ...  # type: Any
#    inodes = ...  # type: Any
#    firstmember = ...  # type: Any
#    def __init__(self, name=None, mode='', fileobj=None, format=None, tarinfo=None, dereference=None, ignore_zeros=None, encoding=None, errors='', pax_headers=None, debug=None, errorlevel=None): ...
#    @classmethod
#    def open(cls, name=None, mode='', fileobj=None, bufsize=..., **kwargs): ...
#    @classmethod
#    def taropen(cls, name, mode='', fileobj=None, **kwargs): ...
#    @classmethod
#    def gzopen(cls, name, mode='', fileobj=None, compresslevel=9, **kwargs): ...
#    @classmethod
#    def bz2open(cls, name, mode='', fileobj=None, compresslevel=9, **kwargs): ...
#    @classmethod
#    def xzopen(cls, name, mode='', fileobj=None, preset=None, **kwargs): ...
#    OPEN_METH = ...  # type: Any
#    def close(self): ...
#    def getmember(self, name): ...
#    def getmembers(self): ...
#    def getnames(self): ...
#    def gettarinfo(self, name=None, arcname=None, fileobj=None): ...
#    def list(self, verbose=True): ...
#    def add(self, name, arcname=None, recursive=True, exclude=None, *, filter=None): ...
#    def addfile(self, tarinfo, fileobj=None): ...
#    def extractall(self, path='', members=None): ...
#    def extract(self, member, path='', set_attrs=True): ...
#    def extractfile(self, member): ...
#    def makedir(self, tarinfo, targetpath): ...
#    def makefile(self, tarinfo, targetpath): ...
#    def makeunknown(self, tarinfo, targetpath): ...
#    def makefifo(self, tarinfo, targetpath): ...
#    def makedev(self, tarinfo, targetpath): ...
#    def makelink(self, tarinfo, targetpath): ...
#    def chown(self, tarinfo, targetpath): ...
#    def chmod(self, tarinfo, targetpath): ...
#    def utime(self, tarinfo, targetpath): ...
#    def next(self): ...
#    def __iter__(self): ...
#    def __enter__(self): ...
#    def __exit__(self, type, value, traceback): ...

#class TarIter:
#    tarfile = ...  # type: Any
#    index = ...  # type: Any
#    def __init__(self, tarfile): ...
#    def __iter__(self): ...
#    def __next__(self): ...

def is_tarfile(name: str) -> bool: ...

class TarError(Exception): ...
class ReadError(TarError): ...
class CompressionError(TarError): ...
class StreamError(TarError): ...
class ExtractError(TarError): ...
class HeaderError(TarError): ...
#class EmptyHeaderError(HeaderError): ...
#class TruncatedHeaderError(HeaderError): ...
#class EOFHeaderError(HeaderError): ...
#class InvalidHeaderError(HeaderError): ...
#class SubsequentHeaderError(HeaderError): ...

ENCODING = ...  # type: str

USTAR_FORMAT = ...  # type: int
GNU_FORMAT = ...  # type: int
PAX_FORMAT = ...  # type: int
DEFAULT_FORMAT = ...  # type: int
