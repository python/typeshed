import turtle

SCREENWIDTH: int
SCREENHEIGHT: int
MINSTICKS: int
MAXSTICKS: int
HUNIT: int
WUNIT: int
SCOLOR: tuple[int, int, int]
HCOLOR: tuple[int, int, int]
COLOR: tuple[int, int, int]

def randomrow() -> int: ...
def computerzug(state: list[int]): ...
def randommove(state: list[int]): ...

class NimModel:
    game: Nim
    def __init__(self, game: Nim) -> None: ...
    sticks: list[int]
    player: int
    winner: int
    def setup(self) -> None: ...
    def move(self, row: int, col: int) -> None: ...
    def game_over(self) -> bool: ...
    def notify_move(self, row: int, col: int) -> None: ...

class Stick(turtle.Turtle):
    row: int
    col: int
    game: Nim
    def __init__(self, row: int, col: int, game: Nim) -> None: ...
    def coords(self, row: int, col: int) -> tuple[int, int]: ...
    def makemove(self, x: float, y: float) -> None: ...

class NimView:
    game: Nim
    screen: turtle._Screen
    model: NimModel
    writer: turtle.Turtle
    sticks: dict[tuple[int, int], Stick]
    def __init__(self, game: Nim) -> None: ...
    def display(self, msg1: str, msg2: str | None = None) -> None: ...
    def setup(self) -> None: ...
    def notify_move(self, row: int, col: int, maxspalte: int, player: int) -> None: ...
    def notify_over(self) -> None: ...
    def clear(self) -> None: ...

class NimController:
    game: Nim
    sticks: dict[tuple[int, int], Stick]
    BUSY: bool
    def __init__(self, game: Nim) -> None: ...
    def notify_move(self, row: int, col: int) -> None: ...

class Nim:
    CREATED: int
    RUNNING: int
    OVER: int
    state: int
    screen: turtle._Screen
    model: NimModel
    view: NimView
    controller: NimController
    def __init__(self, screen: turtle._Screen) -> None: ...

def main() -> str: ...
