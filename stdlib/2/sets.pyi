# Stubs for sets (Python 2)

from typing import Any, Callable, Hashable, Iterable, Iterator, Mapping, Optional, TypeVar, Union

T = TypeVar('T')
Setlike = Union['BaseSet', Iterable]

class BaseSet(Iterable[T]):
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    __str__ = ...  # type: Callable[[BaseSet[T]], str]
    def __iter__(self) -> Iterator[T]: ...
    def __cmp__(self, other: Any) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def copy(self) -> BaseSet[T]: ...
    __copy__ = ...  # type: Callable[[BaseSet[T]], BaseSet[T]]
    def __deepcopy__(self, memo: Mapping[int, BaseSet[T]]) -> BaseSet[T]: ...
    def __or__(self, other: Setlike) -> BaseSet[T]: ...
    def union(self, other: Setlike) -> BaseSet[T]: ...
    def __and__(self, other: Setlike) -> BaseSet[T]: ...
    def intersection(self, other: Setlike) -> BaseSet[T]: ...
    def __xor__(self, other: Setlike) -> BaseSet[T]: ...
    def symmetric_difference(self, other: Setlike) -> BaseSet[T]: ...
    def __sub__(self, other: Setlike) -> BaseSet[T]: ...
    def difference(self, other: Setlike) -> BaseSet[T]: ...
    def __contains__(self, element: Any) -> bool: ...
    def issubset(self, other: BaseSet[T]) -> bool: ...
    def issuperset(self, other: BaseSet[T]) -> bool: ...
    __le__ = ...  # type: Callable[[BaseSet[T], BaseSet[T]], bool]
    __ge__ = ...  # type: Callable[[BaseSet[T], BaseSet[T]], bool]
    def __lt__(self, other: BaseSet[T]) -> bool: ...
    def __gt__(self, other: BaseSet[T]) -> bool: ...
    __hash__ = ...  # type: None

class ImmutableSet(BaseSet[T], Hashable):
    def __init__(self, iterable: Optional[Setlike] = ...) -> None: ...
    def __hash__(self) -> int: ...

class Set(BaseSet[T]):
    def __init__(self, iterable: Optional[Setlike] = ...) -> None: ...
    def __ior__(self, other: BaseSet[T]) -> Set[T]: ...
    def union_update(self, other: Setlike) -> None: ...
    def __iand__(self, other: BaseSet[T]) -> Set[T]: ...
    def intersection_update(self, other: Setlike) -> None: ...
    def __ixor__(self, other: BaseSet[T]) -> Set[T]: ...
    def symmetric_difference_update(self, other: Setlike) -> None: ...
    def __isub__(self, other: BaseSet[T]) -> Set[T]: ...
    def difference_update(self, other: Setlike) -> None: ...
    def update(self, iterable: Setlike) -> None: ...
    def clear(self) -> None: ...
    def add(self, element: Any) -> None: ...
    def remove(self, element: Any) -> None: ...
    def discard(self, element: Any) -> None: ...
    def pop(self) -> Any: ...
    def __as_immutable__(self) -> ImmutableSet[T]: ...
    def __as_temporarily_immutable__(self) -> _TemporarilyImmutableSet[T]: ...

class _TemporarilyImmutableSet(BaseSet[T]):
    def __init__(self, set: BaseSet[T]) -> None: ...
    def __hash__(self) -> int: ...
