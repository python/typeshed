from _typeshed import Incomplete

from idlelib.config import idleConf as idleConf

class FormatParagraph:
    def __getattr__(self, name: str) -> Incomplete: ...  # Incomplete
    editwin: Incomplete
    def __init__(self, editwin) -> None: ...
    @classmethod
    def reload(cls) -> None: ...
    def close(self) -> None: ...
    def format_paragraph_event(self, event, limit: Incomplete | None = ...): ...

def find_paragraph(text, mark): ...
def reformat_paragraph(data, limit): ...
def reformat_comment(data, limit, comment_header): ...
def is_all_white(line): ...
def get_indent(line): ...
def get_comment_header(line): ...
def get_line_indent(line, tabwidth): ...

class FormatRegion:
    def __getattr__(self, name: str) -> Incomplete: ...  # Incomplete
    editwin: Incomplete
    def __init__(self, editwin) -> None: ...
    def get_region(self): ...
    def set_region(self, head, tail, chars, lines) -> None: ...
    def indent_region_event(self, event: Incomplete | None = ...): ...
    def dedent_region_event(self, event: Incomplete | None = ...): ...
    def comment_region_event(self, event: Incomplete | None = ...): ...
    def uncomment_region_event(self, event: Incomplete | None = ...): ...
    def tabify_region_event(self, event: Incomplete | None = ...): ...
    def untabify_region_event(self, event: Incomplete | None = ...): ...

class Indents:
    def __getattr__(self, name: str) -> Incomplete: ...  # Incomplete
    editwin: Incomplete
    def __init__(self, editwin) -> None: ...
    def toggle_tabs_event(self, event): ...
    def change_indentwidth_event(self, event): ...

class Rstrip:
    def __getattr__(self, name: str) -> Incomplete: ...  # Incomplete
    editwin: Incomplete
    def __init__(self, editwin) -> None: ...
    def do_rstrip(self, event: Incomplete | None = ...) -> None: ...
