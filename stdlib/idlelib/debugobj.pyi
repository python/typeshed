from idlelib.tree import ScrolledCanvas as ScrolledCanvas, TreeItem as TreeItem, TreeNode as TreeNode
from reprlib import Repr
from typing import Any, Callable, Hashable, Iterable

myrepr: Repr

class ObjectTreeItem(TreeItem):
    labeltext: str
    object: object
    setfunction: Callable[[str], None]
    def __init__(self, labeltext: str, object: int, setfunction: Callable[[str], None] | None = ...) -> None: ...
    def GetLabelText(self) -> str | None: ...
    def GetText(self) -> str: ...
    def GetIconName(self) -> str | None: ...
    def IsEditable(self) -> bool: ...
    def SetText(self, text: str) -> None: ...
    def IsExpandable(self) -> bool: ...
    def GetSubList(self) -> list[TreeItem]: ...

class ClassTreeItem(ObjectTreeItem):
    def IsExpandable(self) -> bool: ...
    def GetSubList(self) -> list[TreeItem]: ...

class AtomicObjectTreeItem(ObjectTreeItem):
    def IsExpandable(self) -> bool: ...

class SequenceTreeItem(ObjectTreeItem):
    def IsExpandable(self) -> bool: ...
    def keys(self) -> Iterable[Any]: ...
    def GetSubList(self) -> list[TreeItem]: ...

class DictTreeItem(SequenceTreeItem):
    def keys(self) -> list[Hashable]: ...

dispatch: dict[type, ObjectTreeItem]

def make_objecttreeitem(labeltext: str, object: object, setfunction: Callable[[str], None] | None = ...) -> ObjectTreeItem: ...
