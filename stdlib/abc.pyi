from _typeshed import SupportsWrite
from typing import Any, Callable, Generic, Tuple, Type, TypeVar
from typing_extensions import Concatenate, ParamSpec

_T = TypeVar("_T")
_ClsT = Type("_ClsT", bound=Type[Any])
_P = ParamSpec("_P")
_R_co = TypeVar("_R_co", covariant=True)
_FuncT = TypeVar("_FuncT", bound=Callable[..., Any])

# These definitions have special processing in mypy
class ABCMeta(type):
    __abstractmethods__: frozenset[str]
    def __init__(self, name: str, bases: Tuple[type, ...], namespace: dict[str, Any]) -> None: ...
    def __instancecheck__(cls: ABCMeta, instance: Any) -> Any: ...
    def __subclasscheck__(cls: ABCMeta, subclass: Any) -> Any: ...
    def _dump_registry(cls: ABCMeta, file: SupportsWrite[str] | None = ...) -> None: ...
    def register(cls: ABCMeta, subclass: Type[_T]) -> Type[_T]: ...

def abstractmethod(funcobj: _FuncT) -> _FuncT: ...

class abstractclassmethod(classmethod[_ClsT, _P, _R_co], Generic[_ClsT, _P, _R_co]):
    def __init__(self, callable: Callable[Concatenate[_ClsT, _P], _R_co]) -> None: ...

class abstractstaticmethod(staticmethod[_FuncT], Generic[_FuncT]):
    def __init__(self, callable: _FuncT) -> None: ...

class abstractproperty(property): ...
class ABC(metaclass=ABCMeta): ...

def get_cache_token() -> object: ...
