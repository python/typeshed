from typing import Any, Callable, ClassVar, Generic, Type, TypeVar
from typing_extensions import Literal

_T = TypeVar("_T")
_FuncT = TypeVar("_FuncT", bound=Callable[..., Any])

def abstractmethod(funcobj: _FuncT) -> _FuncT: ...

class abstractclassmethod(classmethod[_FuncT], Generic[_FuncT]): ...
class abstractstaticmethod(staticmethod[_FuncT], Generic[_FuncT]): ...
class abstractproperty(property): ...

class ABCMeta(type):
    def register(cls: ABCMeta, subclass: Type[_T]) -> Type[_T]: ...

class ABC(metaclass=ABCMeta): ...

def get_cache_token() -> object: ...
