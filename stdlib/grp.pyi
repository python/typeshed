from _typeshed import structseq
from typing import Any, Sequence, overload
from typing_extensions import Literal, SupportsIndex

# The constructor takes a sequence of any kind, which must have length of exactly 4.
class struct_group(structseq[Any]):
    @overload  # type: ignore[override]
    def __getitem__(self, __i: Literal[0]) -> str: ...
    @overload
    def __getitem__(self, __i: Literal[1]) -> str | None: ...
    @overload
    def __getitem__(self, __i: Literal[2]) -> int: ...
    @overload
    def __getitem__(self, __i: Literal[3]) -> list[str]: ...
    @overload
    def __getitem__(self, __i: SupportsIndex) -> Any: ...
    @overload
    def __getitem__(self, __i: slice) -> Sequence[Any]: ...
    @property
    def gr_name(self) -> str: ...
    @property
    def gr_passwd(self) -> str | None: ...
    @property
    def gr_gid(self) -> int: ...
    @property
    def gr_mem(self) -> list[str]: ...

def getgrall() -> list[struct_group]: ...
def getgrgid(id: int) -> struct_group: ...
def getgrnam(name: str) -> struct_group: ...
