from _typeshed.email import MessageT
from email.message import Message
from email.policy import Policy
from typing import Callable, Generic, overload

__all__ = ["FeedParser", "BytesFeedParser"]

class FeedParser(Generic[MessageT]):
    @overload
    def __init__(self: FeedParser[Message], _factory: None = ..., *, policy: Policy = ...) -> None: ...
    @overload
    def __init__(self, _factory: Callable[[], MessageT], *, policy: Policy = ...) -> None: ...
    def feed(self, data: str) -> None: ...
    def close(self) -> MessageT: ...

class BytesFeedParser(Generic[MessageT]):
    @overload
    def __init__(self: BytesFeedParser[Message], _factory: None = ..., *, policy: Policy = ...) -> None: ...
    @overload
    def __init__(self, _factory: Callable[[], MessageT], *, policy: Policy = ...) -> None: ...
    def feed(self, data: bytes) -> None: ...
    def close(self) -> MessageT: ...
