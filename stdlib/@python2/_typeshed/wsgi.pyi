# Types to support PEP 3333 (WSGI)

from sys import _OptExcInfo
from typing import Any, Callable, Iterable, Optional, Protocol, Text

class StartResponse(Protocol):
    def __call__(
        self, status: str, headers: list[tuple[str, str]], exc_info: Optional[_OptExcInfo] = ...
    ) -> Callable[[str], Any]: ...

WSGIEnvironment = dict[Text, Any]
WSGIApplication = Callable[[WSGIEnvironment, StartResponse], Iterable[str]]

# WSGI input streams per PEP 3333
class InputStream(Protocol):
    def read(self, size: int = ...) -> str: ...
    def readline(self, size: int = ...) -> str: ...
    def readlines(self, hint: int = ...) -> list[str]: ...
    def __iter__(self) -> Iterable[str]: ...

# WSGI error streams per PEP 3333
class ErrorStream(Protocol):
    def flush(self) -> None: ...
    def write(self, s: str) -> None: ...
    def writelines(self, seq: list[str]) -> None: ...

class _Readable(Protocol):
    def read(self, size: int = ...) -> str: ...

# Optional file wrapper in wsgi.file_wrapper
class FileWrapper(Protocol):
    def __call__(self, file: _Readable, block_size: int = ...) -> Iterable[str]: ...
