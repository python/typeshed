from typing import Any
from typing_extensions import Literal
from xml.dom.minidom import Node, DOMImplementation, TypeInfo, Document
from xml.dom.xmlbuilder import DOMBuilderFilter, Options

TEXT_NODE = Node.TEXT_NODE
CDATA_SECTION_NODE = Node.CDATA_SECTION_NODE
DOCUMENT_NODE = Node.DOCUMENT_NODE
FILTER_ACCEPT = DOMBuilderFilter.FILTER_ACCEPT
FILTER_REJECT = DOMBuilderFilter.FILTER_REJECT
FILTER_SKIP = DOMBuilderFilter.FILTER_SKIP
FILTER_INTERRUPT = DOMBuilderFilter.FILTER_INTERRUPT
theDOMImplementation: DOMImplementation | None

class ElementInfo:
    tagName: Any
    def __init__(self, tagName: Any, model: Any | None = ...) -> None: ...
    def getAttributeType(self, aname: Any) -> TypeInfo: ...
    def getAttributeTypeNS(self, namespaceURI: Any, localName: Any) -> TypeInfo: ...
    def isElementContent(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isId(self, aname: Any) -> bool: ...
    def isIdNS(self, euri: Any, ename: Any, auri: Any, aname: Any) -> bool: ...
      
class ExpatBuilder:
    doc: Document
    curnode: Document
    def __init__(self, options: Options | None = ... ) -> None: ...
    def createParser(self) -> Any: ...
    def getParser(self) -> Any | None: ...
    def reset(self) -> None: ...
    def install(self, parser: Any) -> None: ...
    def parseFile(self, file: Any) -> Document: ...
    def parseString(self, string: str) -> Document: ...
    def start_doctype_decl_handler(
        self, 
        doctypeName: Any, 
        systemId: Any, 
        publicId: Any,          
        has_internal_subset: Any
    ) -> None: ...
    def end_doctype_decl_handler(self) -> None: ...
    def pi_handler(self, target: Any, data: Any) -> None: ...
    def character_data_handler_cdata(self, data: Any) -> None: ...
    def character_data_handler(self, data: Any) -> None: ...
    def start_cdata_section_handler(self) -> None: ...
    def end_cdata_section_handler(self) -> None: ...
    def entity_decl_handler(
        self, 
        entityName: Any, 
        is_parameter_entity: Any, 
        value: Any,
        base: Any, 
        systemId: Any, 
        publicId: Any, 
        notationName: Any
    ) -> None: ...
    def notation_decl_handler(
        self, 
        notationName: Any, 
        base: Any, 
        systemId: Any, 
        publicId: Any
    ) -> None: ...
    def comment_handler(self, data: Any) -> None: ...
    def external_entity_ref_handler(
        self, 
        context: Any, 
        base: Any, 
        systemId: Any, 
        publicId: Any
    ) -> Literal[1]: ...
    def first_element_handler(self, name: Any, attributes: Any) -> None: ...
    def start_element_handler(self, name: Any, attributes: Any) -> None: ...
    def end_element_handler(self, name: Any) -> None: ...
  
class FilterCrutch:
    def __init__(self, builder: Any) -> None: ...
      
class Rejecter(FilterCrutch):
    def start_element_handler(self, *args: Any) -> None: ...
    def end_element_handler(self, *args: Any) -> None: ...
    
class Skipper(FilterCrutch):
    def start_element_handler(self, *args: Any) -> None: ...
    def end_element_handler(self, *args: Any) -> None: ...
      
class FragmentBuilder(ExpatBuilder):
    fragment: Any | None
    originalDocument: Any
    context: Any
    def __init__(self, context: Any, options: Options | None = ...) -> None: ...
    def external_entity_ref_handler(
        self, 
        context: Any, 
        base: Any, 
        systemId: Any, 
        publicId: Any
    ) -> Literal[1, -1]: ...
    
class ParseEscape(Exception): ...
