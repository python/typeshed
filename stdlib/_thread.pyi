import sys
from _typeshed import structseq
from threading import Thread
from types import TracebackType
from typing import Any, Callable, NoReturn, Sequence, Tuple, Type, overload
from typing_extensions import Literal, SupportsIndex, final

error = RuntimeError

def _count() -> int: ...

_dangling: Any

@final
class LockType:
    def acquire(self, blocking: bool = ..., timeout: float = ...) -> bool: ...
    def release(self) -> None: ...
    def locked(self) -> bool: ...
    def __enter__(self) -> bool: ...
    def __exit__(
        self, type: Type[BaseException] | None, value: BaseException | None, traceback: TracebackType | None
    ) -> None: ...

def start_new_thread(function: Callable[..., Any], args: Tuple[Any, ...], kwargs: dict[str, Any] = ...) -> int: ...
def interrupt_main() -> None: ...
def exit() -> NoReturn: ...
def allocate_lock() -> LockType: ...
def get_ident() -> int: ...
def stack_size(size: int = ...) -> int: ...

TIMEOUT_MAX: float

if sys.version_info >= (3, 8):
    def get_native_id() -> int: ...  # only available on some platforms
    @final
    class _ExceptHookArgs(structseq[Any]):  # The constructor takes a sequence of any kind, which must have length of exactly 4.
        @overload  # type: ignore[override]
        def __getitem__(self, __i: Literal[0]) -> Type[BaseException]: ...
        @overload
        def __getitem__(self, __i: Literal[1]) -> BaseException | None: ...
        @overload
        def __getitem__(self, __i: Literal[2]) -> TracebackType | None: ...
        @overload
        def __getitem__(self, __i: Literal[3]) -> Thread | None: ...
        @overload
        def __getitem__(self, __i: SupportsIndex) -> Any: ...
        @overload
        def __getitem__(self, __i: slice) -> Sequence[Any]: ...
        @property
        def exc_type(self) -> Type[BaseException]: ...
        @property
        def exc_value(self) -> BaseException | None: ...
        @property
        def exc_traceback(self) -> TracebackType | None: ...
        @property
        def thread(self) -> Thread | None: ...
    _excepthook: Callable[[_ExceptHookArgs], Any]
