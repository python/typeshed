from . import wasyncore as wasyncore
from .proxy_headers import proxy_headers_middleware as proxy_headers_middleware
from typing import Any, Optional
from waitress import trigger as trigger
from waitress.adjustments import Adjustments as Adjustments
from waitress.channel import HTTPChannel as HTTPChannel
from waitress.compat import IPPROTO_IPV6 as IPPROTO_IPV6, IPV6_V6ONLY as IPV6_V6ONLY
from waitress.task import ThreadedTaskDispatcher as ThreadedTaskDispatcher
from waitress.utilities import cleanup_unix_socket as cleanup_unix_socket

def create_server(application: Any, map: Optional[Any] = ..., _start: bool = ..., _sock: Optional[Any] = ..., _dispatcher: Optional[Any] = ..., **kw: Any): ...

class MultiSocketServer:
    asyncore: Any = ...
    adj: Any = ...
    map: Any = ...
    effective_listen: Any = ...
    task_dispatcher: Any = ...
    def __init__(self, map: Optional[Any] = ..., adj: Optional[Any] = ..., effective_listen: Optional[Any] = ..., dispatcher: Optional[Any] = ...) -> None: ...
    def print_listen(self, format_str: Any) -> None: ...
    def run(self) -> None: ...
    def close(self) -> None: ...

class BaseWSGIServer(wasyncore.dispatcher):
    channel_class: Any = ...
    next_channel_cleanup: int = ...
    socketmod: Any = ...
    asyncore: Any = ...
    sockinfo: Any = ...
    family: Any = ...
    socktype: Any = ...
    application: Any = ...
    adj: Any = ...
    trigger: Any = ...
    task_dispatcher: Any = ...
    server_name: Any = ...
    active_channels: Any = ...
    def __init__(self, application: Any, map: Optional[Any] = ..., _start: bool = ..., _sock: Optional[Any] = ..., dispatcher: Optional[Any] = ..., adj: Optional[Any] = ..., sockinfo: Optional[Any] = ..., bind_socket: bool = ..., **kw: Any) -> None: ...
    def bind_server_socket(self) -> None: ...
    def get_server_name(self, ip: Any): ...
    def getsockname(self) -> None: ...
    accepting: bool = ...
    def accept_connections(self) -> None: ...
    def add_task(self, task: Any) -> None: ...
    def readable(self): ...
    def writable(self): ...
    def handle_read(self) -> None: ...
    def handle_connect(self) -> None: ...
    def handle_accept(self) -> None: ...
    def run(self) -> None: ...
    def pull_trigger(self) -> None: ...
    def set_socket_options(self, conn: Any) -> None: ...
    def fix_addr(self, addr: Any): ...
    def maintenance(self, now: Any) -> None: ...
    def print_listen(self, format_str: Any) -> None: ...
    def close(self): ...

class TcpWSGIServer(BaseWSGIServer):
    def bind_server_socket(self) -> None: ...
    def getsockname(self): ...
    def set_socket_options(self, conn: Any) -> None: ...

class UnixWSGIServer(BaseWSGIServer):
    def __init__(self, application: Any, map: Optional[Any] = ..., _start: bool = ..., _sock: Optional[Any] = ..., dispatcher: Optional[Any] = ..., adj: Optional[Any] = ..., sockinfo: Optional[Any] = ..., **kw: Any) -> None: ...
    def bind_server_socket(self) -> None: ...
    def getsockname(self): ...
    def fix_addr(self, addr: Any): ...
    def get_server_name(self, ip: Any): ...
WSGIServer = TcpWSGIServer
