import collections
from typing import Any, Dict, Hashable, Iterator, Mapping, Type

class frozendict(collections.Mapping):

    dict_cls: Type[Dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, key: Hashable) -> Hashable: ...
    def __contains__(self, key: Hashable) -> bool: ...
    def copy(self, **add_or_replace) -> Mapping: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __hash__(self) -> int: ...

class FrozenOrderedDict(frozendict):

    dict_cls: Type[collections.OrderedDict] = ...
