# Stubs for geoip2.models (Python 3)

from typing import Any, Mapping, Optional, Sequence

from geoip2 import records

from geoip2.mixins import SimpleEquality

_Locales = Optional[Sequence[str]]
_RawResonse = Mapping[str, Mapping[str, Any]]

class Country(SimpleEquality):
    continent: records.Continent = ...
    country: records.Country = ...
    registered_country: records.Country = ...
    represented_country: records.RepresentedCountry = ...
    maxmind: records.MaxMind = ...
    traits: records.Traits = ...
    raw: Any = ...
    def __init__(self, raw_response: _RawResonse, locales: _Locales = ...) -> None: ...

class City(Country):
    city: records.City = ...
    location: records.Location = ...
    postal: records.Postal = ...
    subdivisions: records.Subdivisions = ...
    def __init__(self, raw_response: _RawResonse, locales: _Locales = ...) -> None: ...

class Insights(City): ...

class Enterprise(City): ...

class SimpleModel(SimpleEquality):
    __metaclass__: Any = ...

class AnonymousIP(SimpleModel):
    is_anonymous: bool = ...
    is_anonymous_vpn: bool = ...
    is_hosting_provider: bool = ...
    is_public_proxy: bool = ...
    is_tor_exit_node: bool = ...
    ip_address: str = ...
    raw: str = ...
    def __init__(self, raw: str) -> None: ...

class ASN(SimpleModel):
    autonomous_system_number: int = ...
    autonomous_system_organization: str = ...
    ip_address: str = ...
    raw: str = ...
    def __init__(self, raw: str) -> None: ...

class ConnectionType(SimpleModel):
    connection_type: str = ...
    ip_address: str = ...
    raw: str = ...
    def __init__(self, raw: str) -> None: ...

class Domain(SimpleModel):
    domain: str = ...
    ip_address: str = ...
    raw: str = ...
    def __init__(self, raw: str) -> None: ...

class ISP(ASN):
    isp: str = ...
    organization: str = ...
    def __init__(self, raw: str) -> None: ...
