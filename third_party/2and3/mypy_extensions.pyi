from typing import Dict, Type, TypeVar, Optional, Union

_T = TypeVar('_T')


def TypedDict(typename: str, fields: Dict[str, Type[T]]) -> Type[dict]: ...

def Arg(name: Optional[str] = ..., typ: T = ...) -> T: ...

def DefaultArg(name: Optional[str] = ..., typ: T = ...) -> T: ...

def NamedArg(name: Optional[str] = ..., typ: T = ...) -> T: ...

def DefaultNamedArg(name: Optional[str] = ..., typ: T = ...) -> T: ...

def StarArg(typ: T = ...) -> T: ...

def KwArg(typ: T = ...) -> T: ...


def TypedDict(typename: str, fields: Dict[str, Type[_T]]) -> Type[dict]: ...

# Return type that indicates a function does not return.
# This type is equivalent to the None type, but the no-op Union is necessary to
# distinguish the None type from the None value.
NoReturn = Union[None]
