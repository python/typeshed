from typing import List, Optional, Union
import sys

class InvalidToken(Exception): ...

if sys.version_info < (3,):
    _key_decodable = Union[bytes, unicode]
else:
    _key_decodable = Union[bytes, str]

class Fernet(object):
    def __init__(self, key: _key_decodable) -> None: ...
    def decrypt(self, token: bytes, ttl: Optional[int] = ...) -> bytes: ...
    def encrypt(self, data: bytes) -> bytes: ...
    def extract_timestamp(self, token: bytes) -> int: ...
    @classmethod
    def generate_key(cls) -> bytes: ...

class MultiFernet(object):
    def __init__(self, fernets: List[Fernet]) -> None: ...
    def decrypt(self, token: bytes, ttl: Optional[int] = ...) -> bytes: ...
    def encrypt(self, data: bytes) -> bytes: ...
    def rotate(self, msg: bytes) -> bytes: ...
