from abc import ABCMeta, abstractmethod
from typing import Union

from cryptography.hazmat.backends.interfaces import EllipticCurveBackend
from cryptography.hazmat.primitives.asymmetric.padding import AsymmetricPadding
from cryptography.hazmat.primitives.asymmetric.utils import Prehashed
from cryptography.hazmat.primitives.hashes import HashAlgorithm
from cryptography.hazmat.primitives.serialization import Encoding, KeySerializationEncryption, PrivateFormat, PublicFormat
from cryptography.x509 import ObjectIdentifier

class EllipticCurve(metaclass=ABCMeta):
    key_size: int
    name: str

class BrainpoolP256R1(EllipticCurve): ...
class BrainpoolP384R1(EllipticCurve): ...
class BrainpoolP512R1(EllipticCurve): ...
class SECP192R1(EllipticCurve): ...
class SECP224R1(EllipticCurve): ...
class SECP256K1(EllipticCurve): ...
class SECP256R1(EllipticCurve): ...
class SECP384R1(EllipticCurve): ...
class SECP521R1(EllipticCurve): ...
class SECT163K1(EllipticCurve): ...
class SECT163R2(EllipticCurve): ...
class SECT233K1(EllipticCurve): ...
class SECT233R1(EllipticCurve): ...
class SECT283K1(EllipticCurve): ...
class SECT283R1(EllipticCurve): ...
class SECT409K1(EllipticCurve): ...
class SECT409R1(EllipticCurve): ...
class SECT571K1(EllipticCurve): ...
class SECT571R1(EllipticCurve): ...

class EllipticCurveOID:
    SECP192R1: ObjectIdentifier
    SECP224R1: ObjectIdentifier
    SECP256K1: ObjectIdentifier
    SECP256R1: ObjectIdentifier
    SECP384R1: ObjectIdentifier
    SECP521R1: ObjectIdentifier
    BRAINPOOLP256R1: ObjectIdentifier
    BRAINPOOLP384R1: ObjectIdentifier
    BRAINPOOLP512R1: ObjectIdentifier
    SECT163K1: ObjectIdentifier
    SECT163R2: ObjectIdentifier
    SECT233K1: ObjectIdentifier
    SECT233R1: ObjectIdentifier
    SECT283K1: ObjectIdentifier
    SECT283R1: ObjectIdentifier
    SECT409K1: ObjectIdentifier
    SECT409R1: ObjectIdentifier
    SECT571K1: ObjectIdentifier
    SECT571R1: ObjectIdentifier

class EllipticCurvePrivateKey(metaclass=ABCMeta):
    key_size: int
    @abstractmethod
    def exchange(self, algorithm: ECDH, peer_public_key: EllipticCurvePublicKey) -> bytes: ...
    @abstractmethod
    def public_key(self) -> EllipticCurvePublicKey: ...

class EllipticCurvePrivateKeyWithSerialization(EllipticCurvePrivateKey):
    @abstractmethod
    def private_bytes(
        self, encoding: Encoding, format: PrivateFormat, encryption_algorithm: KeySerializationEncryption
    ) -> bytes: ...
    @abstractmethod
    def private_numbers(self) -> EllipticCurvePrivateNumbers: ...

class EllipticCurvePrivateNumbers:
    private_value: int
    public_numbers: EllipticCurvePublicNumbers
    def __init__(self, private_value: int, public_numbers: EllipticCurvePublicNumbers) -> None: ...
    def private_key(self, backend: EllipticCurveBackend) -> EllipticCurvePrivateKey: ...

class EllipticCurvePublicKey(metaclass=ABCMeta):
    curve: EllipticCurve
    key_size: int
    @classmethod
    def from_encoded_point(cls, curve: EllipticCurve, data: bytes) -> EllipticCurvePublicKey: ...
    @abstractmethod
    def public_bytes(self, encoding: Encoding, format: PublicFormat) -> bytes: ...
    @abstractmethod
    def public_numbers(self) -> EllipticCurvePublicNumbers: ...
    @abstractmethod
    def sign(self, data: bytes, padding: AsymmetricPadding, algorithm: HashAlgorithm) -> bytes: ...
    @abstractmethod
    def verify(self, signature: bytes, data: bytes, padding: AsymmetricPadding, algorithm: HashAlgorithm) -> None: ...

EllipticCurvePublicKeyWithSerialization = EllipticCurvePublicKey

class EllipticCurvePublicNumbers:
    curve: EllipticCurve
    x: int
    y: int
    def __init__(self, x: int, y: int, curve: EllipticCurve) -> None: ...
    @classmethod
    def from_encoded_point(cls, curve: EllipticCurve, data: bytes) -> EllipticCurvePublicNumbers: ...
    def public_key(self, backend: EllipticCurveBackend) -> EllipticCurvePublicKey: ...

class EllipticCurveSignatureAlgorithm(metaclass=ABCMeta):
    algorithm: Union[HashAlgorithm, Prehashed]

class ECDH: ...

class ECDSA(EllipticCurveSignatureAlgorithm):
    def __init__(self, algorithm: HashAlgorithm): ...

def derive_private_key(private_value: int, curve: EllipticCurve, backend: EllipticCurveBackend) -> EllipticCurvePrivateKey: ...
def generate_private_key(curve: EllipticCurve, backend: EllipticCurveBackend) -> EllipticCurvePrivateKey: ...
def get_curve_for_oid(oid: ObjectIdentifier) -> EllipticCurve: ...
