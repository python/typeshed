from collections import namedtuple
from typing import Any, Optional


_URLTuple = namedtuple(
    '_URLTuple',
    ['scheme', 'netloc', 'path', 'query', 'fragment']
)


class BaseURL(_URLTuple):
    def replace(self, **kwargs): ...
    @property
    def host(self): ...
    @property
    def ascii_host(self): ...
    @property
    def port(self): ...
    @property
    def auth(self): ...
    @property
    def username(self): ...
    @property
    def raw_username(self): ...
    @property
    def password(self): ...
    @property
    def raw_password(self): ...
    def decode_query(self, *args, **kwargs): ...
    def join(self, *args, **kwargs): ...
    def to_url(self): ...
    def decode_netloc(self): ...
    def to_uri_tuple(self): ...
    def to_iri_tuple(self): ...
    def get_file_location(self, pathformat: Optional[Any] = ...): ...

class URL(BaseURL):
    def encode_netloc(self): ...
    def encode(self, charset: str = ..., errors: str = ...): ...

class BytesURL(BaseURL):
    def encode_netloc(self): ...
    def decode(self, charset: str = ..., errors: str = ...): ...

def url_parse(url, scheme: Optional[Any] = ..., allow_fragments: bool = ...): ...
def url_quote(string, charset: str = ..., errors: str = ..., safe: str = ..., unsafe: str = ...): ...
def url_quote_plus(string, charset: str = ..., errors: str = ..., safe: str = ...): ...
def url_unparse(components): ...
def url_unquote(string, charset: str = ..., errors: str = ..., unsafe: str = ...): ...
def url_unquote_plus(s, charset: str = ..., errors: str = ...): ...
def url_fix(s, charset: str = ...): ...
def uri_to_iri(uri, charset: str = ..., errors: str = ...): ...
def iri_to_uri(iri, charset: str = ..., errors: str = ..., safe_conversion: bool = ...): ...
def url_decode(s, charset: str = ..., decode_keys: bool = ..., include_empty: bool = ..., errors: str = ...,
               separator: str = ..., cls: Optional[Any] = ...): ...
def url_decode_stream(stream, charset: str = ..., decode_keys: bool = ..., include_empty: bool = ..., errors: str = ...,
                      separator: str = ..., cls: Optional[Any] = ..., limit: Optional[Any] = ...,
                      return_iterator: bool = ...): ...
def url_encode(obj, charset: str = ..., encode_keys: bool = ..., sort: bool = ..., key: Optional[Any] = ...,
               separator: bytes = ...): ...
def url_encode_stream(obj, stream: Optional[Any] = ..., charset: str = ..., encode_keys: bool = ..., sort: bool = ...,
                      key: Optional[Any] = ..., separator: bytes = ...): ...
def url_join(base, url, allow_fragments: bool = ...): ...

class Href:
    base = ...  # type: Any
    charset = ...  # type: Any
    sort = ...  # type: Any
    key = ...  # type: Any
    def __init__(self, base: str = ..., charset: str = ..., sort: bool = ..., key: Optional[Any] = ...): ...
    def __getattr__(self, name): ...
    def __call__(self, *path, **query): ...
