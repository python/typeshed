from . import wasyncore as wasyncore
from typing import Any, Optional
from waitress.buffers import OverflowableBuffer as OverflowableBuffer, ReadOnlyFileBasedBuffer as ReadOnlyFileBasedBuffer
from waitress.parser import HTTPRequestParser as HTTPRequestParser
from waitress.task import ErrorTask as ErrorTask, WSGITask as WSGITask
from waitress.utilities import InternalServerError as InternalServerError

class ClientDisconnected(Exception): ...

class HTTPChannel(wasyncore.dispatcher):
    task_class: Any = ...
    error_task_class: Any = ...
    parser_class: Any = ...
    request: Any = ...
    last_activity: int = ...
    will_close: bool = ...
    close_when_flushed: bool = ...
    requests: Any = ...
    sent_continue: bool = ...
    total_outbufs_len: int = ...
    current_outbuf_count: int = ...
    server: Any = ...
    adj: Any = ...
    outbufs: Any = ...
    creation_time: Any = ...
    sendbuf_len: Any = ...
    task_lock: Any = ...
    outbuf_lock: Any = ...
    addr: Any = ...
    def __init__(self, server: Any, sock: Any, addr: Any, adj: Any, map: Optional[Any] = ...) -> None: ...
    def writable(self): ...
    def handle_write(self) -> None: ...
    def readable(self): ...
    def handle_read(self) -> None: ...
    def received(self, data: Any): ...
    connected: bool = ...
    def handle_close(self) -> None: ...
    def add_channel(self, map: Optional[Any] = ...) -> None: ...
    def del_channel(self, map: Optional[Any] = ...) -> None: ...
    def write_soon(self, data: Any): ...
    def service(self) -> None: ...
    def cancel(self) -> None: ...
