from typing import Any, Optional

COPY_BYTES: Any
STRBUF_LIMIT: int

class FileBasedBuffer:
    remain: int = ...
    file: Any = ...
    def __init__(self, file: Any, from_buffer: Optional[Any] = ...) -> None: ...
    def __len__(self): ...
    def __nonzero__(self): ...
    __bool__: Any = ...
    def append(self, s: Any) -> None: ...
    def get(self, numbytes: int = ..., skip: bool = ...): ...
    def skip(self, numbytes: Any, allow_prune: int = ...) -> None: ...
    def newfile(self) -> None: ...
    def prune(self) -> None: ...
    def getfile(self): ...
    def close(self) -> None: ...

class TempfileBasedBuffer(FileBasedBuffer):
    def __init__(self, from_buffer: Optional[Any] = ...) -> None: ...
    def newfile(self): ...

class BytesIOBasedBuffer(FileBasedBuffer):
    file: Any = ...
    def __init__(self, from_buffer: Optional[Any] = ...) -> None: ...
    def newfile(self): ...

class ReadOnlyFileBasedBuffer(FileBasedBuffer):
    file: Any = ...
    block_size: Any = ...
    def __init__(self, file: Any, block_size: int = ...) -> None: ...
    remain: Any = ...
    def prepare(self, size: Optional[Any] = ...): ...
    def get(self, numbytes: int = ..., skip: bool = ...): ...
    def __iter__(self) -> Any: ...
    def next(self): ...
    __next__: Any = ...
    def append(self, s: Any) -> None: ...

class OverflowableBuffer:
    overflowed: bool = ...
    buf: Any = ...
    strbuf: bytes = ...
    overflow: Any = ...
    def __init__(self, overflow: Any) -> None: ...
    def __len__(self): ...
    def __nonzero__(self): ...
    __bool__: Any = ...
    def append(self, s: Any) -> None: ...
    def get(self, numbytes: int = ..., skip: bool = ...): ...
    def skip(self, numbytes: Any, allow_prune: bool = ...) -> None: ...
    def prune(self) -> None: ...
    def getfile(self): ...
    def close(self) -> None: ...
