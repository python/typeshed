from .buffers import ReadOnlyFileBasedBuffer as ReadOnlyFileBasedBuffer
from .compat import reraise as reraise, tobytes as tobytes
from .utilities import build_http_date as build_http_date, logger as logger, queue_logger as queue_logger
from typing import Any

rename_headers: Any
hop_by_hop: Any

class ThreadedTaskDispatcher:
    stop_count: int = ...
    active_count: int = ...
    logger: Any = ...
    queue_logger: Any = ...
    threads: Any = ...
    queue: Any = ...
    lock: Any = ...
    queue_cv: Any = ...
    thread_exit_cv: Any = ...
    def __init__(self) -> None: ...
    def start_new_thread(self, target: Any, args: Any) -> None: ...
    def handler_thread(self, thread_no: Any) -> None: ...
    def set_thread_count(self, count: Any) -> None: ...
    def add_task(self, task: Any) -> None: ...
    def shutdown(self, cancel_pending: bool = ..., timeout: int = ...): ...

class Task:
    close_on_finish: bool = ...
    status: str = ...
    wrote_header: bool = ...
    start_time: int = ...
    content_length: Any = ...
    content_bytes_written: int = ...
    logged_write_excess: bool = ...
    logged_write_no_body: bool = ...
    complete: bool = ...
    chunked_response: bool = ...
    logger: Any = ...
    channel: Any = ...
    request: Any = ...
    response_headers: Any = ...
    version: Any = ...
    def __init__(self, channel: Any, request: Any) -> None: ...
    def service(self) -> None: ...
    @property
    def has_body(self): ...
    def build_response_header(self): ...
    def remove_content_length_header(self) -> None: ...
    def start(self) -> None: ...
    def finish(self) -> None: ...
    def write(self, data: Any) -> None: ...

class ErrorTask(Task):
    complete: bool = ...
    status: Any = ...
    close_on_finish: bool = ...
    content_length: Any = ...
    def execute(self) -> None: ...

class WSGITask(Task):
    environ: Any = ...
    response_headers: Any = ...
    complete: bool = ...
    status: Any = ...
    content_length: Any = ...
    close_on_finish: bool = ...
    def execute(self): ...
    def get_environment(self): ...
