from . import compat as compat, utilities as utilities
from typing import Any, Optional

socket_map: Any

class ExitNow(Exception): ...

def read(obj: Any) -> None: ...
def write(obj: Any) -> None: ...
def readwrite(obj: Any, flags: Any) -> None: ...
def poll(timeout: float = ..., map: Optional[Any] = ...) -> None: ...
def poll2(timeout: float = ..., map: Optional[Any] = ...) -> None: ...
poll3 = poll2

def loop(timeout: float = ..., use_poll: bool = ..., map: Optional[Any] = ..., count: Optional[Any] = ...) -> None: ...
def compact_traceback(): ...

class dispatcher:
    debug: bool = ...
    connected: bool = ...
    accepting: bool = ...
    connecting: bool = ...
    closing: bool = ...
    addr: Any = ...
    ignore_log_types: Any = ...
    logger: Any = ...
    compact_traceback: Any = ...
    socket: Any = ...
    def __init__(self, sock: Optional[Any] = ..., map: Optional[Any] = ...) -> None: ...
    def add_channel(self, map: Optional[Any] = ...) -> None: ...
    def del_channel(self, map: Optional[Any] = ...) -> None: ...
    family_and_type: Any = ...
    def create_socket(self, family: Any = ..., type: Any = ...) -> None: ...
    def set_socket(self, sock: Any, map: Optional[Any] = ...) -> None: ...
    def set_reuse_addr(self) -> None: ...
    def readable(self): ...
    def writable(self): ...
    def listen(self, num: Any): ...
    def bind(self, addr: Any): ...
    def connect(self, address: Any) -> None: ...
    def accept(self): ...
    def send(self, data: Any): ...
    def recv(self, buffer_size: Any): ...
    def close(self) -> None: ...
    def log(self, message: Any) -> None: ...
    def log_info(self, message: Any, type: str = ...) -> None: ...
    def handle_read_event(self) -> None: ...
    def handle_connect_event(self) -> None: ...
    def handle_write_event(self) -> None: ...
    def handle_expt_event(self) -> None: ...
    def handle_error(self) -> None: ...
    def handle_expt(self) -> None: ...
    def handle_read(self) -> None: ...
    def handle_write(self) -> None: ...
    def handle_connect(self) -> None: ...
    def handle_accept(self) -> None: ...
    def handle_accepted(self, sock: Any, addr: Any) -> None: ...
    def handle_close(self) -> None: ...

class dispatcher_with_send(dispatcher):
    out_buffer: bytes = ...
    def __init__(self, sock: Optional[Any] = ..., map: Optional[Any] = ...) -> None: ...
    def initiate_send(self) -> None: ...
    handle_write: Any = ...
    def writable(self): ...
    def send(self, data: Any) -> None: ...

def close_all(map: Optional[Any] = ..., ignore_all: bool = ...) -> None: ...

class file_wrapper:
    fd: Any = ...
    def __init__(self, fd: Any) -> None: ...
    def __del__(self) -> None: ...
    def recv(self, *args: Any): ...
    def send(self, *args: Any): ...
    def getsockopt(self, level: Any, optname: Any, buflen: Optional[Any] = ...): ...
    read: Any = ...
    write: Any = ...
    def close(self) -> None: ...
    def fileno(self): ...

class file_dispatcher(dispatcher):
    connected: bool = ...
    def __init__(self, fd: Any, map: Optional[Any] = ...) -> None: ...
    socket: Any = ...
    def set_file(self, fd: Any) -> None: ...
