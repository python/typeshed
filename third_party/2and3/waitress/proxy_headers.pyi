from .utilities import BadRequest as BadRequest, logger as logger, undquote as undquote
from collections import namedtuple
from typing import Any, Optional

PROXY_HEADERS: Any

Forwarded = namedtuple('Forwarded', ['by', 'for_', 'host', 'proto'])

class MalformedProxyHeader(Exception):
    header: Any = ...
    reason: Any = ...
    value: Any = ...
    def __init__(self, header: Any, reason: Any, value: Any) -> None: ...

def proxy_headers_middleware(app: Any, trusted_proxy: Optional[Any] = ..., trusted_proxy_count: int = ..., trusted_proxy_headers: Optional[Any] = ..., clear_untrusted: bool = ..., log_untrusted: bool = ..., logger: Any = ...): ...
def parse_proxy_headers(environ: Any, trusted_proxy_count: Any, trusted_proxy_headers: Any, logger: Any = ...): ...
def strip_brackets(addr: Any): ...
def clear_untrusted_headers(environ: Any, untrusted_headers: Any, log_warning: bool = ..., logger: Any = ...) -> None: ...
