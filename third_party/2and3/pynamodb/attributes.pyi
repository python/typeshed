# Stubs for pynamodb.attributes (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Callable, Dict, Optional, Text, Type, Union, Set

from datetime import datetime

class Attribute:
    attr_name = ...  # type: Any
    attr_type = ...  # type: Any
    null = ...  # type: bool
    default = ...  # type: Any
    is_hash_key = ...  # type: Any
    is_range_key = ...  # type: Any
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[Any, Callable[..., Any]]] = ..., attr_name: Optional[Text] = ...) -> None: ...
    def __set__(self, instance, value): ...
    def __get__(self, instance, owner): ...
    def serialize(self, value): ...
    def deserialize(self, value): ...
    def get_value(self, value): ...

class SetMixin:
    def serialize(self, value): ...
    def deserialize(self, value): ...

class BinaryAttribute(Attribute):
    attr_type = ...  # type: Any
    def serialize(self, value): ...
    def deserialize(self, value): ...
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[bytes, Callable[..., bytes]]] = ..., attr_name: Optional[Text] = ...) -> None: ...
    def __set__(self, instance, value: bytes): ...
    def __get__(self, instance, owner) -> bytes: ...

class BinarySetAttribute(SetMixin, Attribute):
    attr_type = ...  # type: Any
    null = ...  # type: bool
    def serialize(self, value): ...
    def deserialize(self, value): ...
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[Set[bytes], Callable[..., Set[bytes]]]] = ..., attr_name: Optional[Text] = ...) -> None: ...
    def __set__(self, instance, value: Set[bytes]): ...
    def __get__(self, instance, owner) -> Set[bytes]: ...

class UnicodeSetAttribute(SetMixin, Attribute):
    attr_type = ...  # type: Any
    null = ...  # type: bool
    def element_serialize(self, value): ...
    def element_deserialize(self, value): ...
    def serialize(self, value): ...
    def deserialize(self, value): ...
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[Set[Text], Callable[..., Set[Text]]]] = ..., attr_name: Optional[Text] = ...) -> None: ...
    def __set__(self, instance, value: Set[Text]): ...
    def __get__(self, instance, owner) -> Set[Text]: ...

class UnicodeAttribute(Attribute):
    attr_type = ...  # type: Any
    def __set__(self, instance, value: Text): ...
    def __get__(self, instance, owner) -> Text: ...
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[Text, Callable[..., Text]]] = ..., attr_name: Optional[Text] = ...) -> None: ...
    def serialize(self, value): ...

class JSONAttribute(Attribute):
    attr_type = ...  # type: Any
    def serialize(self, value): ...
    def deserialize(self, value): ...
    def __set__(self, instance, value: Dict[Text, Any]): ...
    def __get__(self, instance, owner) -> Dict[Text, Any]: ...

class LegacyBooleanAttribute(Attribute):
    attr_type = ...  # type: Any
    def serialize(self, value): ...
    def deserialize(self, value): ...
    def get_value(self, value): ...
    def __set__(self, instance, value: bool): ...
    def __get__(self, instance, owner) -> bool: ...
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[bool, Callable[..., bool]]] = ..., attr_name: Optional[Text] = ...) -> None: ...

class BooleanAttribute(Attribute):
    attr_type = ...  # type: Any
    def serialize(self, value): ...
    def deserialize(self, value): ...
    def get_value(self, value): ...
    def __set__(self, instance, value: bool): ...
    def __get__(self, instance, owner) -> bool: ...
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[bool, Callable[..., bool]]] = ..., attr_name: Optional[Text] = ...) -> None: ...

class NumberSetAttribute(SetMixin, Attribute):
    attr_type = ...  # type: Any
    null = ...  # type: bool
    def __set__(self, instance, value: Set[float]): ...
    def __get__(self, instance, owner) -> Set[float]: ...
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[Set[float], Callable[..., Set[float]]]] = ..., attr_name: Optional[Text] = ...) -> None: ...

class NumberAttribute(Attribute):
    attr_type = ...  # type: Any
    def serialize(self, value): ...
    def deserialize(self, value): ...
    def __set__(self, instance, value: float): ...
    def __get__(self, instance, owner) -> float: ...
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[float, Callable[..., float]]] = ..., attr_name: Optional[Text] = ...) -> None: ...

class UTCDateTimeAttribute(Attribute):
    attr_type = ...  # type: Any
    def serialize(self, value): ...
    def deserialize(self, value): ...
    def __set__(self, instance, value: datetime): ...
    def __get__(self, instance, owner) -> datetime: ...
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[datetime, Callable[..., datetime]]] = ..., attr_name: Optional[Text] = ...) -> None: ...

class NullAttribute(Attribute):
    attr_type = ...  # type: Any
    def serialize(self, value): ...
    def deserialize(self, value): ...
    def __set__(self, instance, value: None): ...
    def __get__(self, instance, owner) -> None: ...

class MapAttributeMeta(type):
    def __init__(cls, name, bases, attrs) -> None: ...

class MapAttribute:
    attr_type = ...  # type: Any
    attribute_values = ...  # type: Any
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[Any, Callable[..., Any]]] = ..., attr_name: Optional[Text] = ..., **attrs) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, item): ...
    def get_values(self): ...
    def is_type_safe(self, key, value) -> bool: ...
    def validate(self) -> bool: ...
    def serialize(self, values): ...
    def deserialize(self, values): ...

class ListAttribute(Attribute):
    attr_type = ...  # type: Any
    element_type = ...  # type: Any
    def __init__(self, hash_key: bool = ..., range_key: bool = ..., null: Optional[bool] = ..., default: Optional[Union[Any, Callable[..., Any]]] = ..., attr_name: Optional[Text] = ..., of: Optional[Type[MapAttribute]] = ...) -> None: ...
    def serialize(self, values): ...
    def deserialize(self, values): ...

DESERIALIZE_CLASS_MAP = ...  # type: Any
SERIALIZE_CLASS_MAP = ...  # type: Any
SERIALIZE_KEY_MAP = ...  # type: Any
