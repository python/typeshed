from typing import Any, Iterator, MutableMapping, Text, Tuple, Union

class CaseInsensitiveDict(MutableMapping[str, Union[Text, bytes]]):
    def lower_items(self) -> Iterator[Tuple[str, Union[Text, bytes]]]: ...
    def __setitem__(self, key: str, value: Union[Text, bytes]) -> None: ...
    def __getitem__(self, key: str) -> Union[Text, bytes]: ...
    def __delitem__(self, key: str) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...

class LookupDict(dict):
    name = ...  # type: Any
    def __init__(self, name=...) -> None: ...
    def __getitem__(self, key): ...
    def get(self, key, default=...): ...
