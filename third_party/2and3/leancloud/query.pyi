from typing import Union, Any, SupportsFloat, Tuple

import leancloud
from leancloud.object_ import Object
from leancloud.geo_point import GeoPoint


class CQLResult(object):
    def __init__(self, results: List[Object], count: SupportsFloat, class_name: str) -> None:...

class Query(object):
    def __init__(self, query_class: Union[str, Object]) -> None:...

    @classmethod
    def or_(cls, *queries: Query) -> Query:...
 
    @classmethod
    def and_(cls, *queries: Query) -> Query:...

    @classmethod 
    def do_cloud_query(cql, *pvalues) -> CQLResult:...

    def dump(self) -> Dict:...

    def first(self) -> Object:...

    def get(self, object_id: str) -> Object:...

    def find(self) -> List[Object]:...

    def count(self) -> int:...

    def skip(self, n:int) -> Query:...

    def limit(self,n:int) -> Query:...

    def equal_to(self, key: str, value: Any) -> Query:...

    def not_equal_to(self, key: str, value: Any) -> Query:...

    def less_than(self, key: str, value: Any) -> Query:...

    def greater_than(self, key: str, value: Any) -> Query:...

    def less_than_or_equal_to(self, key: str, value: Any) -> Query:...

    def greater_than_or_equal_to(self, key: str, value: Any) -> Query:...

    def contained_in(self, key: str, values: Union[List[Any],Tuple[Any]]) -> Query:...

    def not_contained_in(self, key: str, values: Union[List[Any],Tuple[Any]]) -> Query:...

    def contains_all(self, key: str, values: Union[List[Any],Tuple[Any]]) -> Query:...

    def exitst(self, key: str) -> Query:...

    def does_not_exists(self, key: str) -> Query:...

    def matched(self, key: str, regex: str, ignore_case: bool=False, muliti_line: bool=False) -> Query:...

    def matches_query(self, key: str, value: Any) -> Query:...

    def does_not_match_query(self, key: str, value: Any) -> Query:...

    def matched_key_in_query(self, key: str, query_key: str, query: Query) -> Query:...

    def matches_key_in_query(self, key: str, query_key: str, query: Query) -> Query:...

    def does_not_match_key_in_query(self, key: str, query_key: str, query: Query) -> Query:...

    def contains(self, key: str, value: Any) -> Query:... 

    def startwith(self, key: str, value: Any) -> Query:...

    def endwith(self, key: str, value: Any) -> Query:...

    def ascending(self, key: str) -> Query:...

    def add_ascending(self, key: str) -> Query:...

    def descending(self, key: str) -> Query:...
     
    def add_descending(self, key: str) -> Query:...

    def near(self, key: str, point: GeoPoint) -> Query:...

    def within_radians(self, key: str, point: GeoPoint, max_distance: SupportsFloat, min_distance: SupportsFloat=None) -> Query:...

    def within_miles(self, key: str, point: GeoPoint, max_distance: SupportsFloat, min_distance: SupportsFloat=None) -> Query:...

    def within_kilometers(self, key: str, point: GeoPoint, max_distance: SupportsFloat, min_distance: SupportsFloat=None) -> Query:...

    def within_geo_box(self, key: str, southwest: Union[List, Tuple], northeast: Union[List, Tuple]) -> Query:...

    def include(self, *keys: str) -> Query:...

    def select(self, *keys: str) -> Query:...
