# Stubs for boto.kms.layer1 (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from boto.connection import AWSQueryConnection

class KMSConnection(AWSQueryConnection):
    APIVersion = ...  # type: str
    DefaultRegionName = ...  # type: str
    DefaultRegionEndpoint = ...  # type: str
    ServiceName = ...  # type: str
    TargetPrefix = ...  # type: str
    ResponseError = ...  # type: Any
    region = ...  # type: Any
    def __init__(self, **kwargs) -> None: ...
    def create_alias(self, alias_name, target_key_id): ...
    def create_grant(self, key_id, grantee_principal, retiring_principal: Optional[Any] = ..., operations: Optional[Any] = ..., constraints: Optional[Any] = ..., grant_tokens: Optional[Any] = ...): ...
    def create_key(self, policy: Optional[Any] = ..., description: Optional[Any] = ..., key_usage: Optional[Any] = ...): ...
    def decrypt(self, ciphertext_blob, encryption_context: Optional[Any] = ..., grant_tokens: Optional[Any] = ...): ...
    def delete_alias(self, alias_name): ...
    def describe_key(self, key_id): ...
    def disable_key(self, key_id): ...
    def disable_key_rotation(self, key_id): ...
    def enable_key(self, key_id): ...
    def enable_key_rotation(self, key_id): ...
    def encrypt(self, key_id, plaintext, encryption_context: Optional[Any] = ..., grant_tokens: Optional[Any] = ...): ...
    def generate_data_key(self, key_id, encryption_context: Optional[Any] = ..., number_of_bytes: Optional[Any] = ..., key_spec: Optional[Any] = ..., grant_tokens: Optional[Any] = ...): ...
    def generate_data_key_without_plaintext(self, key_id, encryption_context: Optional[Any] = ..., key_spec: Optional[Any] = ..., number_of_bytes: Optional[Any] = ..., grant_tokens: Optional[Any] = ...): ...
    def generate_random(self, number_of_bytes: Optional[Any] = ...): ...
    def get_key_policy(self, key_id, policy_name): ...
    def get_key_rotation_status(self, key_id): ...
    def list_aliases(self, limit: Optional[Any] = ..., marker: Optional[Any] = ...): ...
    def list_grants(self, key_id, limit: Optional[Any] = ..., marker: Optional[Any] = ...): ...
    def list_key_policies(self, key_id, limit: Optional[Any] = ..., marker: Optional[Any] = ...): ...
    def list_keys(self, limit: Optional[Any] = ..., marker: Optional[Any] = ...): ...
    def put_key_policy(self, key_id, policy_name, policy): ...
    def re_encrypt(self, ciphertext_blob, destination_key_id, source_encryption_context: Optional[Any] = ..., destination_encryption_context: Optional[Any] = ..., grant_tokens: Optional[Any] = ...): ...
    def retire_grant(self, grant_token): ...
    def revoke_grant(self, key_id, grant_id): ...
    def update_key_description(self, key_id, description): ...
    def make_request(self, action, body): ...
