# Stubs for boto.kms.layer1 (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Dict, List, Optional, Type
from boto.connection import AWSQueryConnection

class KMSConnection(AWSQueryConnection):
    APIVersion = ...  # type: str
    DefaultRegionName = ...  # type: str
    DefaultRegionEndpoint = ...  # type: str
    ServiceName = ...  # type: str
    TargetPrefix = ...  # type: str
    ResponseError = ...  # type: Type[Exception]
    region = ...  # type: Any
    def __init__(self, **kwargs) -> None: ...
    def create_alias(self, alias_name: str, target_key_id: str): ...
    def create_grant(self, key_id: str, grantee_principal: str, retiring_principal: Optional[str] = ..., operations: Optional[List] = ..., constraints: Optional[Dict] = ..., grant_tokens: Optional[List] = ...): ...
    def create_key(self, policy: Optional[str] = ..., description: Optional[str] = ..., key_usage: Optional[str] = ...): ...
    def decrypt(self, ciphertext_blob: bytes, encryption_context: Optional[Dict] = ..., grant_tokens: Optional[List] = ...): ...
    def delete_alias(self, alias_name: str): ...
    def describe_key(self, key_id: str): ...
    def disable_key(self, key_id: str): ...
    def disable_key_rotation(self, key_id: str): ...
    def enable_key(self, key_id: str): ...
    def enable_key_rotation(self, key_id: str): ...
    def encrypt(self, key_id: str, plaintext: bytes, encryption_context: Optional[Dict] = ..., grant_tokens: Optional[List] = ...): ...
    def generate_data_key(self, key_id: str, encryption_context: Optional[Dict] = ..., number_of_bytes: Optional[int] = ..., key_spec: Optional[str] = ..., grant_tokens: Optional[List] = ...): ...
    def generate_data_key_without_plaintext(self, key_id: str, encryption_context: Optional[Dict] = ..., key_spec: Optional[str] = ..., number_of_bytes: Optional[int] = ..., grant_tokens: Optional[List] = ...): ...
    def generate_random(self, number_of_bytes: Optional[int] = ...): ...
    def get_key_policy(self, key_id: str, policy_name: str): ...
    def get_key_rotation_status(self, key_id: str): ...
    def list_aliases(self, limit: Optional[int] = ..., marker: Optional[str] = ...): ...
    def list_grants(self, key_id: str, limit: Optional[int] = ..., marker: Optional[str] = ...): ...
    def list_key_policies(self, key_id: str, limit: Optional[int] = ..., marker: Optional[str] = ...): ...
    def list_keys(self, limit: Optional[int] = ..., marker: Optional[str] = ...): ...
    def put_key_policy(self, key_id: str, policy_name: str, policy: str): ...
    def re_encrypt(self, ciphertext_blob: bytes, destination_key_id: str, source_encryption_context: Optional[Dict] = ..., destination_encryption_context: Optional[Dict] = ..., grant_tokens: Optional[List] = ...): ...
    def retire_grant(self, grant_token: str): ...
    def revoke_grant(self, key_id: str, grant_id: str): ...
    def update_key_description(self, key_id: str, description: str): ...
    def make_request(self, key_id, description): ...
