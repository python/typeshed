# Stubs for markupsafe (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, Text
from collections import Mapping
from markupsafe._compat import text_type
import string
from markupsafe._speedups import escape as escape, escape_silent as escape_silent, soft_unicode as soft_unicode
from markupsafe._native import escape as escape, escape_silent as escape_silent, soft_unicode as soft_unicode

class Markup(text_type):
    def __new__(cls, base: str = ..., encoding: Optional[Text] = ..., errors: Text = ...): ...
    def __html__(self): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, num): ...
    __rmul__ = ...  # type: Any
    def __mod__(self, arg): ...
    def join(self, seq): ...
    def split(self, *args, **kwargs): ...
    def rsplit(self, *args, **kwargs): ...
    def splitlines(self, *args, **kwargs): ...
    def unescape(self): ...
    def striptags(self): ...
    @classmethod
    def escape(cls, s): ...
    def make_simple_escaping_wrapper(name): ...
    def partition(self, sep): ...
    def rpartition(self, sep): ...
    def format(*args, **kwargs): ...
    def __html_format__(self, format_spec): ...
    __getslice__ = ...  # type: Any

class _MagicFormatMapping(Mapping):
    def __init__(self, args, kwargs) -> None: ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def __len__(self): ...

class EscapeFormatter(string.Formatter):
    escape = ...  # type: Any
    def __init__(self, escape) -> None: ...
    def format_field(self, value, format_spec): ...

class _MarkupEscapeHelper:
    obj = ...  # type: Any
    escape = ...  # type: Any
    def __init__(self, obj, escape) -> None: ...
    __getitem__ = ...  # type: Any
    __unicode__ = ...  # type: Any
    __int__ = ...  # type: Any
    __float__ = ...  # type: Any

soft_str = ...  # type: Any
