# Stubs for sqlalchemy.ext.instrumentation (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from ..orm import instrumentation as orm_instrumentation
from ..orm.instrumentation import ClassManager as ClassManager, InstrumentationFactory as InstrumentationFactory
from ..orm import attributes as attributes, collections as collections
from ..orm import base as orm_base
from ..orm import exc as orm_exc

INSTRUMENTATION_MANAGER = ...  # type: str

def find_native_user_instrumentation_hook(cls): ...

instrumentation_finders = ...  # type: Any

class ExtendedInstrumentationRegistry(InstrumentationFactory):
    def unregister(self, class_): ...
    def manager_of_class(self, cls): ...
    def state_of(self, instance): ...
    def dict_of(self, instance): ...

class InstrumentationManager(object):
    def __init__(self, class_) -> None: ...
    def manage(self, class_, manager): ...
    def dispose(self, class_, manager): ...
    def manager_getter(self, class_): ...
    def instrument_attribute(self, class_, key, inst): ...
    def post_configure_attribute(self, class_, key, inst): ...
    def install_descriptor(self, class_, key, inst): ...
    def uninstall_descriptor(self, class_, key): ...
    def install_member(self, class_, key, implementation): ...
    def uninstall_member(self, class_, key): ...
    def instrument_collection_class(self, class_, key, collection_class): ...
    def get_instance_dict(self, class_, instance): ...
    def initialize_instance_dict(self, class_, instance): ...
    def install_state(self, class_, instance, state): ...
    def remove_state(self, class_, instance): ...
    def state_getter(self, class_): ...
    def dict_getter(self, class_): ...

class _ClassInstrumentationAdapter(ClassManager):
    def __init__(self, class_, override) -> None: ...
    def manage(self): ...
    def dispose(self): ...
    def manager_getter(self): ...
    def instrument_attribute(self, key, inst, propagated: bool = ...): ...
    def post_configure_attribute(self, key): ...
    def install_descriptor(self, key, inst): ...
    def uninstall_descriptor(self, key): ...
    def install_member(self, key, implementation): ...
    def uninstall_member(self, key): ...
    def instrument_collection_class(self, key, collection_class): ...
    def initialize_collection(self, key, state, factory): ...
    def new_instance(self, state: Optional[Any] = ...): ...
    def setup_instance(self, instance, state: Optional[Any] = ...): ...
    def teardown_instance(self, instance): ...
    def has_state(self, instance): ...
    def state_getter(self): ...
    def dict_getter(self): ...
