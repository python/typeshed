# Stubs for sqlalchemy.ext.baked (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from ..orm.query import Query as Query
from ..orm import strategies as strategies, attributes as attributes, properties as properties, strategy_options as strategy_options, interfaces as interfaces
from ..orm import util as orm_util
from .. import log as sqla_log
from ..sql import func as func, literal_column as literal_column
from ..sql import util as sql_util
from ..orm import exc as orm_exc
from .. import exc as sa_exc

log = ...  # type: Any

class BakedQuery(object):
    steps = ...  # type: Any
    def __init__(self, bakery, initial_fn, args: Any = ...) -> None: ...
    @classmethod
    def bakery(cls, size: int = ...): ...
    def __iadd__(self, other): ...
    def __add__(self, other): ...
    def add_criteria(self, fn, *args): ...
    def with_criteria(self, fn, *args): ...
    def for_session(self, session): ...
    def __call__(self, session): ...
    def spoil(self, full: bool = ...): ...

class Result(object):
    bq = ...  # type: Any
    session = ...  # type: Any
    def __init__(self, bq, session) -> None: ...
    def params(self, *args, **kw): ...
    def __iter__(self): ...
    def count(self): ...
    def scalar(self): ...
    def first(self): ...
    def one(self): ...
    def one_or_none(self): ...
    def all(self): ...
    def get(self, ident): ...

def bake_lazy_loaders(): ...
def unbake_lazy_loaders(): ...

class BakedLazyLoader(strategies.LazyLoader): ...

def baked_lazyload(loadopt, attr): ...
def baked_lazyload_all(*keys): ...

bakery = ...  # type: Any
