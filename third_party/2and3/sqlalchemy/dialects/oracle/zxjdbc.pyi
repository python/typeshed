# Stubs for sqlalchemy.dialects.oracle.zxjdbc (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from sqlalchemy.sql import sqltypes
from sqlalchemy.connectors.zxJDBC import ZxJDBCConnector
from sqlalchemy.dialects.oracle.base import OracleCompiler, OracleDialect, OracleExecutionContext
from sqlalchemy.engine import result as _result

SQLException = ...  # type: Any
zxJDBC = ...  # type: Any

class _ZxJDBCDate(sqltypes.Date):
    def result_processor(self, dialect, coltype): ...

class _ZxJDBCNumeric(sqltypes.Numeric):
    def result_processor(self, dialect, coltype): ...

class OracleCompiler_zxjdbc(OracleCompiler):
    returning_cols = ...  # type: Any
    returning_parameters = ...  # type: Any
    def returning_clause(self, stmt, returning_cols): ...

class OracleExecutionContext_zxjdbc(OracleExecutionContext):
    statement = ...  # type: Any
    def pre_exec(self): ...
    def get_result_proxy(self): ...
    def create_cursor(self): ...

class ReturningResultProxy(_result.FullyBufferedResultProxy):
    def __init__(self, context, returning_row) -> None: ...

class ReturningParam(object):
    type = ...  # type: Any
    def __init__(self, type) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class OracleDialect_zxjdbc(ZxJDBCConnector, OracleDialect):
    jdbc_db_name = ...  # type: str
    jdbc_driver_name = ...  # type: str
    statement_compiler = ...  # type: Any
    execution_ctx_cls = ...  # type: Any
    colspecs = ...  # type: Any
    DataHandler = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    implicit_returning = ...  # type: Any
    def initialize(self, connection): ...

dialect = ...  # type: Any
