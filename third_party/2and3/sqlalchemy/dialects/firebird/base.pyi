# Stubs for sqlalchemy.dialects.firebird.base (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from sqlalchemy import sql
from sqlalchemy.sql import compiler
from sqlalchemy.engine import default
from sqlalchemy import schema as sa_schema
from sqlalchemy import types as sqltypes

from sqlalchemy.types import (BIGINT as BIGINT, BLOB as BLOB, DATE as DATE, FLOAT as FLOAT, INTEGER as INTEGER, NUMERIC as NUMERIC,
                              SMALLINT as SMALLINT, TEXT as TEXT, TIME as TIME, TIMESTAMP as TIMESTAMP, Integer as Integer)

RESERVED_WORDS = ...  # type: Any

class _StringType(sqltypes.String):
    charset = ...  # type: Any
    def __init__(self, charset: Optional[Any] = ..., **kw) -> None: ...

class VARCHAR(_StringType, sqltypes.VARCHAR):
    __visit_name__ = ...  # type: str
    def __init__(self, length: Optional[Any] = ..., **kwargs) -> None: ...

class CHAR(_StringType, sqltypes.CHAR):
    __visit_name__ = ...  # type: str
    def __init__(self, length: Optional[Any] = ..., **kwargs) -> None: ...

class _FBDateTime(sqltypes.DateTime):
    def bind_processor(self, dialect): ...

colspecs = ...  # type: Any
ischema_names = ...  # type: Any

class FBTypeCompiler(compiler.GenericTypeCompiler):
    def visit_boolean(self, type_, **kw): ...
    def visit_datetime(self, type_, **kw): ...
    def visit_TEXT(self, type_, **kw): ...
    def visit_BLOB(self, type_, **kw): ...
    def visit_CHAR(self, type_, **kw): ...
    def visit_VARCHAR(self, type_, **kw): ...

class FBCompiler(sql.compiler.SQLCompiler):
    ansi_bind_rules = ...  # type: bool
    def visit_now_func(self, fn, **kw): ...
    def visit_startswith_op_binary(self, binary, operator, **kw): ...
    def visit_notstartswith_op_binary(self, binary, operator, **kw): ...
    def visit_mod_binary(self, binary, operator, **kw): ...
    def visit_alias(self, *args, **kwargs): ...
    def visit_substring_func(self, func, **kw): ...
    def visit_length_func(self, function, **kw): ...
    visit_char_length_func = ...  # type: Any
    def function_argspec(self, func, **kw): ...
    def default_from(self): ...
    def visit_sequence(self, seq): ...
    def get_select_precolumns(self, select, **kw): ...
    def limit_clause(self, select, **kw): ...
    def returning_clause(self, stmt, returning_cols): ...

class FBDDLCompiler(sql.compiler.DDLCompiler):
    def visit_create_sequence(self, create): ...
    def visit_drop_sequence(self, drop): ...

class FBIdentifierPreparer(sql.compiler.IdentifierPreparer):
    reserved_words = ...  # type: Any
    illegal_initial_characters = ...  # type: Any
    def __init__(self, dialect) -> None: ...

class FBExecutionContext(default.DefaultExecutionContext):
    def fire_sequence(self, seq, type_): ...

class FBDialect(default.DefaultDialect):
    name = ...  # type: str
    max_identifier_length = ...  # type: int
    supports_sequences = ...  # type: bool
    sequences_optional = ...  # type: bool
    supports_default_values = ...  # type: bool
    postfetch_lastrowid = ...  # type: bool
    supports_native_boolean = ...  # type: bool
    requires_name_normalize = ...  # type: bool
    supports_empty_insert = ...  # type: bool
    statement_compiler = ...  # type: Any
    ddl_compiler = ...  # type: Any
    preparer = ...  # type: Any
    type_compiler = ...  # type: Any
    execution_ctx_cls = ...  # type: Any
    colspecs = ...  # type: Any
    ischema_names = ...  # type: Any
    construct_arguments = ...  # type: Any
    implicit_returning = ...  # type: Any
    def initialize(self, connection): ...
    def normalize_name(self, name): ...
    def denormalize_name(self, name): ...
    def has_table(self, connection, table_name, schema: Optional[Any] = ...): ...
    def has_sequence(self, connection, sequence_name, schema: Optional[Any] = ...): ...
    def get_table_names(self, connection, schema: Optional[Any] = ..., **kw): ...
    def get_view_names(self, connection, schema: Optional[Any] = ..., **kw): ...
    def get_view_definition(self, connection, view_name, schema: Optional[Any] = ..., **kw): ...
    def get_pk_constraint(self, connection, table_name, schema: Optional[Any] = ..., **kw): ...
    def get_column_sequence(self, connection, table_name, column_name, schema: Optional[Any] = ..., **kw): ...
    def get_columns(self, connection, table_name, schema: Optional[Any] = ..., **kw): ...
    def get_foreign_keys(self, connection, table_name, schema: Optional[Any] = ..., **kw): ...
    def get_indexes(self, connection, table_name, schema: Optional[Any] = ..., **kw): ...
