# Stubs for sqlalchemy.event.attr (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from .. import util
from ..util import threading as threading

class RefCollection(util.MemoizedSlots): ...

class _ClsLevelDispatch(RefCollection):
    name = ...  # type: Any
    arg_names = ...  # type: Any
    has_kw = ...  # type: Any
    legacy_signatures = ...  # type: Any
    def __init__(self, parent_dispatch_cls, fn) -> None: ...
    def insert(self, event_key, propagate): ...
    def append(self, event_key, propagate): ...
    def update_subclass(self, target): ...
    def remove(self, event_key): ...
    def clear(self): ...
    def for_modify(self, obj): ...

class _InstanceLevelDispatch(RefCollection): ...

class _EmptyListener(_InstanceLevelDispatch):
    propagate = ...  # type: Any
    listeners = ...  # type: Any
    parent = ...  # type: Any
    parent_listeners = ...  # type: Any
    name = ...  # type: Any
    def __init__(self, parent, target_cls) -> None: ...
    def for_modify(self, obj): ...
    exec_once = ...  # type: Any
    insert = ...  # type: Any
    append = ...  # type: Any
    remove = ...  # type: Any
    clear = ...  # type: Any
    def __call__(self, *args, **kw): ...
    def __len__(self): ...
    def __iter__(self): ...
    def __bool__(self): ...
    __nonzero__ = ...  # type: Any

class _CompoundListener(_InstanceLevelDispatch):
    def exec_once(self, *args, **kw): ...
    def __call__(self, *args, **kw): ...
    def __len__(self): ...
    def __iter__(self): ...
    def __bool__(self): ...
    __nonzero__ = ...  # type: Any

class _ListenerCollection(_CompoundListener):
    parent_listeners = ...  # type: Any
    parent = ...  # type: Any
    name = ...  # type: Any
    listeners = ...  # type: Any
    propagate = ...  # type: Any
    def __init__(self, parent, target_cls) -> None: ...
    def for_modify(self, obj): ...
    def insert(self, event_key, propagate): ...
    def append(self, event_key, propagate): ...
    def remove(self, event_key): ...
    def clear(self): ...

class _JoinedListener(_CompoundListener):
    parent = ...  # type: Any
    name = ...  # type: Any
    local = ...  # type: Any
    parent_listeners = ...  # type: Any
    def __init__(self, parent, name, local) -> None: ...
    @property
    def listeners(self): ...
    def for_modify(self, obj): ...
    def insert(self, event_key, propagate): ...
    def append(self, event_key, propagate): ...
    def remove(self, event_key): ...
    def clear(self): ...
