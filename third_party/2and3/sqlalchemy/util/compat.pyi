# Stubs for sqlalchemy.util.compat (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import sys
from typing import Any, Optional, Text
import threading as threading
from collections import namedtuple
from io import BytesIO as byte_buffer
from io import StringIO
from inspect import getargspec as inspect_getfullargspec
from operator import attrgetter as dottedgetter
if sys.version_info < (3, 0):
    from itertools import izip_longest as zip_longest
    import cPickle as pickle
    from urllib import quote_plus as quote_plus, unquote_plus as unquote_plus, quote as quote, unquote as unquote
    from urlparse import parse_qsl as parse_qsl
else:
    from itertools import zip_longest as zip_longest
    import pickle as pickle
    from urllib.parse import (quote_plus as quote_plus, unquote_plus as unquote_plus,
                              parse_qsl as parse_qsl, quote as quote, unquote as unquote)

py36 = ...  # type: Any
py33 = ...  # type: Any
py32 = ...  # type: Any
py3k = ...  # type: Any
py2k = ...  # type: Any
py265 = ...  # type: Any
jython = ...  # type: Any
pypy = ...  # type: Any
win32 = ...  # type: Any
cpython = ...  # type: Any
next = ...  # type: Any
safe_kwarg = ...  # type: Any

ArgSpec = namedtuple('ArgSpec', ['args', 'varargs', 'keywords', 'defaults'])

def inspect_getargspec(func): ...

string_types = ...  # type: Any
binary_types = ...  # type: Any
binary_type = ...  # type: Any
text_type = Text
int_types = ...  # type: Any
iterbytes = ...  # type: Any

def u(s): ...
def ue(s): ...
def b(s): ...

callable = ...  # type: Any

def cmp(a, b): ...

print_ = ...  # type: Any
import_ = ...  # type: Any
itertools_filterfalse = ...  # type: Any
itertools_filter = ...  # type: Any
itertools_imap = ...  # type: Any

def b64encode(x): ...
def b64decode(x): ...

reduce = ...  # type: Any
time_func = ...  # type: Any

def reraise(tp, value, tb: Optional[Any] = ..., cause: Optional[Any] = ...): ...
def raise_from_cause(exception, exc_info: Optional[Any] = ...): ...

exec_ = ...  # type: Any

def with_metaclass(meta, *bases): ...
def nested(*managers): ...
