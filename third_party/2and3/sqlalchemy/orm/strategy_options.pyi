# Stubs for sqlalchemy.orm.strategy_options (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .interfaces import MapperOption as MapperOption, PropComparator as PropComparator
from ..sql.base import Generative as Generative
from .. import exc as sa_exc
from . import util as orm_util
from .path_registry import PathRegistry as PathRegistry, TokenRegistry as TokenRegistry

class Load(Generative, MapperOption):
    path = ...  # type: Any
    context = ...  # type: Any
    local_opts = ...  # type: Any
    def __init__(self, entity) -> None: ...
    @classmethod
    def for_existing_path(cls, path): ...
    is_opts_only = ...  # type: bool
    strategy = ...  # type: Any
    propagate_to_loaders = ...  # type: bool
    def process_query(self, query): ...
    def process_query_conditionally(self, query): ...
    def set_relationship_strategy(self, attr, strategy, propagate_to_loaders: bool = ...): ...
    def set_column_strategy(self, attrs, strategy, opts: Optional[Any] = ..., opts_only: bool = ...): ...

class _UnboundLoad(Load):
    path = ...  # type: Any
    local_opts = ...  # type: Any
    def __init__(self) -> None: ...

class loader_option(object):
    def __init__(self) -> None: ...
    name = ...  # type: Any
    fn = ...  # type: Any
    def __call__(self, fn): ...

def contains_eager(loadopt, attr, alias: Optional[Any] = ...): ...
def load_only(loadopt, *attrs): ...
def joinedload(loadopt, attr, innerjoin: Optional[Any] = ...): ...
def joinedload_all(*keys, **kw): ...
def subqueryload(loadopt, attr): ...
def subqueryload_all(*keys): ...
def lazyload(loadopt, attr): ...
def lazyload_all(*keys): ...
def immediateload(loadopt, attr): ...
def noload(loadopt, attr): ...
def raiseload(loadopt, attr, sql_only: bool = ...): ...
def defaultload(loadopt, attr): ...
def defer(loadopt, key): ...
def undefer(loadopt, key): ...
def undefer_group(loadopt, name): ...
