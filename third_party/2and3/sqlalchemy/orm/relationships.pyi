# Stubs for sqlalchemy.orm.relationships (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .. import exc as sa_exc
from .util import CascadeOptions as CascadeOptions
from ..sql.util import ClauseAdapter as ClauseAdapter, join_condition as join_condition, visit_binary_product as visit_binary_product, selectables_overlap as selectables_overlap, adapt_criterion_to_null as adapt_criterion_to_null
from ..sql import operators as operators, expression as expression, visitors as visitors
from .interfaces import MANYTOMANY as MANYTOMANY, MANYTOONE as MANYTOONE, ONETOMANY as ONETOMANY, StrategizedProperty as StrategizedProperty, PropComparator as PropComparator
from ..inspection import inspect as inspect
from . import mapper as mapperlib

def remote(expr): ...
def foreign(expr): ...

class RelationshipProperty(StrategizedProperty):
    strategy_wildcard_key = ...  # type: str
    uselist = ...  # type: Any
    argument = ...  # type: Any
    secondary = ...  # type: Any
    primaryjoin = ...  # type: Any
    secondaryjoin = ...  # type: Any
    post_update = ...  # type: Any
    direction = ...  # type: Any
    viewonly = ...  # type: Any
    lazy = ...  # type: Any
    single_parent = ...  # type: Any
    collection_class = ...  # type: Any
    passive_deletes = ...  # type: Any
    cascade_backrefs = ...  # type: Any
    passive_updates = ...  # type: Any
    remote_side = ...  # type: Any
    enable_typechecks = ...  # type: Any
    query_class = ...  # type: Any
    innerjoin = ...  # type: Any
    distinct_target_key = ...  # type: Any
    doc = ...  # type: Any
    active_history = ...  # type: Any
    join_depth = ...  # type: Any
    local_remote_pairs = ...  # type: Any
    extension = ...  # type: Any
    bake_queries = ...  # type: Any
    load_on_pending = ...  # type: Any
    comparator_factory = ...  # type: Any
    comparator = ...  # type: Any
    info = ...  # type: Any
    strategy_key = ...  # type: Any
    cascade = ...  # type: Any
    order_by = ...  # type: Any
    back_populates = ...  # type: Any
    backref = ...  # type: Any
    def __init__(self, argument, secondary: Optional[Any] = ..., primaryjoin: Optional[Any] = ..., secondaryjoin: Optional[Any] = ..., foreign_keys: Optional[Any] = ..., uselist: Optional[Any] = ..., order_by: bool = ..., backref: Optional[Any] = ..., back_populates: Optional[Any] = ..., post_update: bool = ..., cascade: bool = ..., extension: Optional[Any] = ..., viewonly: bool = ..., lazy: bool = ..., collection_class: Optional[Any] = ..., passive_deletes: bool = ..., passive_updates: bool = ..., remote_side: Optional[Any] = ..., enable_typechecks: bool = ..., join_depth: Optional[Any] = ..., comparator_factory: Optional[Any] = ..., single_parent: bool = ..., innerjoin: bool = ..., distinct_target_key: Optional[Any] = ..., doc: Optional[Any] = ..., active_history: bool = ..., cascade_backrefs: bool = ..., load_on_pending: bool = ..., bake_queries: bool = ..., _local_remote_pairs: Optional[Any] = ..., query_class: Optional[Any] = ..., info: Optional[Any] = ...) -> None: ...
    def instrument_class(self, mapper): ...
    class Comparator(PropComparator):
        prop = ...  # type: Any
        def __init__(self, prop, parentmapper, adapt_to_entity: Optional[Any] = ..., of_type: Optional[Any] = ...) -> None: ...
        def adapt_to_entity(self, adapt_to_entity): ...
        def mapper(self): ...
        def __clause_element__(self): ...
        def of_type(self, cls): ...
        def in_(self, other): ...
        __hash__ = ...  # type: Any
        def __eq__(self, other): ...
        def any(self, criterion: Optional[Any] = ..., **kwargs): ...
        def has(self, criterion: Optional[Any] = ..., **kwargs): ...
        def contains(self, other, **kwargs): ...
        def __ne__(self, other): ...
        @property
        def property(self): ...
    def merge(self, session, source_state, source_dict, dest_state, dest_dict, load, _recursive, _resolve_conflict_map): ...
    def cascade_iterator(self, *args, **kwargs): ...
    @property
    def mapper(self): ...
    def table(self): ...
    def do_init(self): ...

class JoinCondition(object):
    parent_selectable = ...  # type: Any
    parent_local_selectable = ...  # type: Any
    child_selectable = ...  # type: Any
    child_local_selectable = ...  # type: Any
    parent_equivalents = ...  # type: Any
    child_equivalents = ...  # type: Any
    primaryjoin = ...  # type: Any
    secondaryjoin = ...  # type: Any
    secondary = ...  # type: Any
    consider_as_foreign_keys = ...  # type: Any
    prop = ...  # type: Any
    self_referential = ...  # type: Any
    support_sync = ...  # type: Any
    can_be_synced_fn = ...  # type: Any
    def __init__(self, parent_selectable, child_selectable, parent_local_selectable, child_local_selectable, primaryjoin: Optional[Any] = ..., secondary: Optional[Any] = ..., secondaryjoin: Optional[Any] = ..., parent_equivalents: Optional[Any] = ..., child_equivalents: Optional[Any] = ..., consider_as_foreign_keys: Optional[Any] = ..., local_remote_pairs: Optional[Any] = ..., remote_side: Optional[Any] = ..., self_referential: bool = ..., prop: Optional[Any] = ..., support_sync: bool = ..., can_be_synced_fn: Any = ...) -> None: ...
    @property
    def primaryjoin_minus_local(self): ...
    @property
    def secondaryjoin_minus_local(self): ...
    @property
    def primaryjoin_reverse_remote(self): ...
    @property
    def remote_columns(self): ...
    @property
    def local_columns(self): ...
    @property
    def foreign_key_columns(self): ...
    def deannotated_primaryjoin(self): ...
    def deannotated_secondaryjoin(self): ...
    def join_targets(self, source_selectable, dest_selectable, aliased, single_crit: Optional[Any] = ...): ...
    def create_lazy_clause(self, reverse_direction: bool = ...): ...

class _ColInAnnotations(object):
    name = ...  # type: Any
    def __init__(self, name) -> None: ...
    def __call__(self, c): ...
