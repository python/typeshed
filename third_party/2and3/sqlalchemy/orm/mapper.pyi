# Stubs for sqlalchemy.orm.mapper (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .. import exc as sa_exc
from ..sql import expression as expression, visitors as visitors, operators as operators
from ..sql import util as sql_util
from . import exc as orm_exc
from . import util as orm_util
from .interfaces import MapperProperty as MapperProperty, InspectionAttr as InspectionAttr
from .base import class_mapper as class_mapper, state_str as state_str
from .path_registry import PathRegistry as PathRegistry

NO_ATTRIBUTE = ...  # type: Any

class Mapper(InspectionAttr):
    class_ = ...  # type: Any
    class_manager = ...  # type: Any
    non_primary = ...  # type: Any
    order_by = ...  # type: Any
    always_refresh = ...  # type: Any
    version_id_prop = ...  # type: Any
    version_id_col = ...  # type: Any
    version_id_generator = ...  # type: bool
    concrete = ...  # type: Any
    single = ...  # type: bool
    inherits = ...  # type: Any
    local_table = ...  # type: Any
    inherit_condition = ...  # type: Any
    inherit_foreign_keys = ...  # type: Any
    batch = ...  # type: Any
    eager_defaults = ...  # type: Any
    column_prefix = ...  # type: Any
    polymorphic_on = ...  # type: Any
    validators = ...  # type: Any
    passive_updates = ...  # type: Any
    passive_deletes = ...  # type: Any
    legacy_is_orphan = ...  # type: Any
    allow_partial_pks = ...  # type: Any
    confirm_deleted_rows = ...  # type: bool
    with_polymorphic = ...  # type: Any
    polymorphic_identity = ...  # type: Any
    polymorphic_map = ...  # type: Any
    include_properties = ...  # type: Any
    exclude_properties = ...  # type: Any
    configured = ...  # type: bool
    def __init__(self, class_, local_table: Optional[Any] = ..., properties: Optional[Any] = ..., primary_key: Optional[Any] = ..., non_primary: bool = ..., inherits: Optional[Any] = ..., inherit_condition: Optional[Any] = ..., inherit_foreign_keys: Optional[Any] = ..., extension: Optional[Any] = ..., order_by: bool = ..., always_refresh: bool = ..., version_id_col: Optional[Any] = ..., version_id_generator: Optional[Any] = ..., polymorphic_on: Optional[Any] = ..., _polymorphic_map: Optional[Any] = ..., polymorphic_identity: Optional[Any] = ..., concrete: bool = ..., with_polymorphic: Optional[Any] = ..., allow_partial_pks: bool = ..., batch: bool = ..., column_prefix: Optional[Any] = ..., include_properties: Optional[Any] = ..., exclude_properties: Optional[Any] = ..., passive_updates: bool = ..., passive_deletes: bool = ..., confirm_deleted_rows: bool = ..., eager_defaults: bool = ..., legacy_is_orphan: bool = ..., _compiled_cache_size: int = ...) -> None: ...
    is_mapper = ...  # type: bool
    @property
    def mapper(self): ...
    @property
    def entity(self): ...
    mapped_table = ...  # type: Any
    tables = ...  # type: Any
    primary_key = ...  # type: Any
    base_mapper = ...  # type: Any
    columns = ...  # type: Any
    c = ...  # type: Any
    def dispose(self): ...
    def add_properties(self, dict_of_properties): ...
    def add_property(self, key, prop): ...
    def has_property(self, key): ...
    def get_property(self, key, _configure_mappers: bool = ...): ...
    def get_property_by_column(self, column): ...
    @property
    def iterate_properties(self): ...
    with_polymorphic_mappers = ...  # type: Any
    @property
    def selectable(self): ...
    def attrs(self): ...
    def all_orm_descriptors(self): ...
    def synonyms(self): ...
    def column_attrs(self): ...
    def relationships(self): ...
    def composites(self): ...
    def common_parent(self, other): ...
    def isa(self, other): ...
    def iterate_to_root(self): ...
    def self_and_descendants(self): ...
    def polymorphic_iterator(self): ...
    def primary_mapper(self): ...
    @property
    def primary_base_mapper(self): ...
    def identity_key_from_row(self, row, adapter: Optional[Any] = ...): ...
    def identity_key_from_primary_key(self, primary_key): ...
    def identity_key_from_instance(self, instance): ...
    def primary_key_from_instance(self, instance): ...
    def cascade_iterator(self, type_, state, halt_on: Optional[Any] = ...): ...

def configure_mappers(): ...
def reconstructor(fn): ...
def validates(*names, **kw): ...

class _ColumnMapping(dict):
    mapper = ...  # type: Any
    def __init__(self, mapper) -> None: ...
    def __missing__(self, column): ...
