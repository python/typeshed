# Stubs for sqlalchemy.orm.state (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from . import interfaces
from . import exc as orm_exc
from .path_registry import PathRegistry as PathRegistry
from .base import PASSIVE_NO_RESULT as PASSIVE_NO_RESULT, SQL_OK as SQL_OK, NEVER_SET as NEVER_SET, ATTR_WAS_SET as ATTR_WAS_SET, NO_VALUE as NO_VALUE, PASSIVE_NO_INITIALIZE as PASSIVE_NO_INITIALIZE, INIT_OK as INIT_OK, PASSIVE_OFF as PASSIVE_OFF

class InstanceState(interfaces.InspectionAttr):
    session_id = ...  # type: Any
    key = ...  # type: Any
    runid = ...  # type: Any
    load_options = ...  # type: Any
    load_path = ...  # type: Any
    insert_order = ...  # type: Any
    modified = ...  # type: bool
    expired = ...  # type: bool
    is_instance = ...  # type: bool
    callables = ...  # type: Any
    class_ = ...  # type: Any
    manager = ...  # type: Any
    obj = ...  # type: Any
    committed_state = ...  # type: Any
    expired_attributes = ...  # type: Any
    def __init__(self, obj, manager) -> None: ...
    @property
    def attrs(self): ...
    @property
    def transient(self): ...
    @property
    def pending(self): ...
    @property
    def deleted(self): ...
    @property
    def was_deleted(self): ...
    @property
    def persistent(self): ...
    @property
    def detached(self): ...
    session = ...  # type: Any
    @property
    def object(self): ...
    @property
    def identity(self): ...
    @property
    def identity_key(self): ...
    @property
    def parents(self): ...
    @property
    def mapper(self): ...
    @property
    def has_identity(self): ...
    @property
    def dict(self): ...
    def get_history(self, key, passive): ...
    def get_impl(self, key): ...
    @property
    def unmodified(self): ...
    def unmodified_intersection(self, keys): ...
    @property
    def unloaded(self): ...

class AttributeState(object):
    state = ...  # type: Any
    key = ...  # type: Any
    def __init__(self, state, key) -> None: ...
    @property
    def loaded_value(self): ...
    @property
    def value(self): ...
    @property
    def history(self): ...
    def load_history(self): ...

class PendingCollection(object):
    deleted_items = ...  # type: Any
    added_items = ...  # type: Any
    def __init__(self) -> None: ...
    def append(self, value): ...
    def remove(self, value): ...
