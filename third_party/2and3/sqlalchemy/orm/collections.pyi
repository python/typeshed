# Stubs for sqlalchemy.orm.collections (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .. import exc as sa_exc

class _PlainColumnGetter(object):
    cols = ...  # type: Any
    composite = ...  # type: Any
    def __init__(self, cols) -> None: ...
    def __reduce__(self): ...
    def __call__(self, value): ...

class _SerializableColumnGetter(object):
    colkeys = ...  # type: Any
    composite = ...  # type: Any
    def __init__(self, colkeys) -> None: ...
    def __reduce__(self): ...
    def __call__(self, value): ...

class _SerializableColumnGetterV2(_PlainColumnGetter):
    colkeys = ...  # type: Any
    composite = ...  # type: Any
    def __init__(self, colkeys) -> None: ...
    def __reduce__(self): ...

def column_mapped_collection(mapping_spec): ...

class _SerializableAttrGetter(object):
    name = ...  # type: Any
    getter = ...  # type: Any
    def __init__(self, name) -> None: ...
    def __call__(self, target): ...
    def __reduce__(self): ...

def attribute_mapped_collection(attr_name): ...
def mapped_collection(keyfunc): ...

class collection(object):
    @staticmethod
    def appender(fn): ...
    @staticmethod
    def remover(fn): ...
    @staticmethod
    def iterator(fn): ...
    @staticmethod
    def internally_instrumented(fn): ...
    @staticmethod
    def linker(fn): ...
    link = ...  # type: Any
    @staticmethod
    def converter(fn): ...
    @staticmethod
    def adds(arg): ...
    @staticmethod
    def replaces(arg): ...
    @staticmethod
    def removes(arg): ...
    @staticmethod
    def removes_return(): ...

collection_adapter = ...  # type: Any

class CollectionAdapter(object):
    attr = ...  # type: Any
    owner_state = ...  # type: Any
    invalidated = ...  # type: bool
    def __init__(self, attr, owner_state, data) -> None: ...
    @property
    def data(self): ...
    def bulk_appender(self): ...
    def append_with_event(self, item, initiator: Optional[Any] = ...): ...
    def append_without_event(self, item): ...
    def append_multiple_without_event(self, items): ...
    def bulk_remover(self): ...
    def remove_with_event(self, item, initiator: Optional[Any] = ...): ...
    def remove_without_event(self, item): ...
    def clear_with_event(self, initiator: Optional[Any] = ...): ...
    def clear_without_event(self): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __bool__(self): ...
    __nonzero__ = ...  # type: Any
    def fire_append_event(self, item, initiator: Optional[Any] = ...): ...
    def fire_remove_event(self, item, initiator: Optional[Any] = ...): ...
    def fire_pre_remove_event(self, initiator: Optional[Any] = ...): ...

class InstrumentedList(list): ...
class InstrumentedSet(set): ...
class InstrumentedDict(dict): ...

class MappedCollection(dict):
    keyfunc = ...  # type: Any
    def __init__(self, keyfunc) -> None: ...
    def set(self, value, _sa_initiator: Optional[Any] = ...): ...
    def remove(self, value, _sa_initiator: Optional[Any] = ...): ...
