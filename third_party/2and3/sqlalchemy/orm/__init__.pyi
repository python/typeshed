# Stubs for sqlalchemy.orm (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .mapper import Mapper as Mapper, class_mapper as class_mapper, configure_mappers as configure_mappers, reconstructor as reconstructor, validates as validates
from .interfaces import EXT_CONTINUE as EXT_CONTINUE, EXT_STOP as EXT_STOP, PropComparator as PropComparator
from .deprecated_interfaces import MapperExtension as MapperExtension, SessionExtension as SessionExtension, AttributeExtension as AttributeExtension
from .util import aliased as aliased, join as join, object_mapper as object_mapper, outerjoin as outerjoin, polymorphic_union as polymorphic_union, was_deleted as was_deleted, with_parent as with_parent, with_polymorphic as with_polymorphic
from .properties import ColumnProperty as ColumnProperty
from .relationships import RelationshipProperty as RelationshipProperty
from .descriptor_props import ComparableProperty as ComparableProperty, CompositeProperty as CompositeProperty, SynonymProperty as SynonymProperty
from .relationships import foreign as foreign, remote as remote
from .session import Session as Session, object_session as object_session, sessionmaker as sessionmaker, make_transient as make_transient, make_transient_to_detached as make_transient_to_detached
from .scoping import scoped_session as scoped_session
from . import mapper as mapperlib
from .query import AliasOption as AliasOption, Query as Query, Bundle as Bundle
from ..util.langhelpers import public_factory as public_factory
from .. import util as _sa_util
from . import strategies as _strategies
from .strategy_options import Load as Load

def create_session(bind: Optional[Any] = ..., **kwargs): ...

relationship = ...  # type: Any

def relation(*arg, **kw): ...
def dynamic_loader(argument, **kw): ...

column_property = ...  # type: Any
composite = ...  # type: Any

def backref(name, **kwargs): ...
def deferred(*columns, **kw): ...

mapper = ...  # type: Any
synonym = ...  # type: Any
comparable_property = ...  # type: Any

def compile_mappers(): ...
def clear_mappers(): ...

joinedload = ...  # type: Any
joinedload_all = ...  # type: Any
contains_eager = ...  # type: Any
defer = ...  # type: Any
undefer = ...  # type: Any
undefer_group = ...  # type: Any
load_only = ...  # type: Any
lazyload = ...  # type: Any
lazyload_all = ...  # type: Any
subqueryload = ...  # type: Any
subqueryload_all = ...  # type: Any
immediateload = ...  # type: Any
noload = ...  # type: Any
raiseload = ...  # type: Any
defaultload = ...  # type: Any

def eagerload(*args, **kwargs): ...
def eagerload_all(*args, **kwargs): ...

contains_alias = ...  # type: Any
