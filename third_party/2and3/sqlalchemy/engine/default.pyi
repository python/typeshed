# Stubs for sqlalchemy.engine.default (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from . import interfaces
from ..sql import compiler as compiler, expression as expression, schema as schema
from .. import types as sqltypes

AUTOCOMMIT_REGEXP = ...  # type: Any
SERVER_SIDE_CURSOR_RE = ...  # type: Any

class DefaultDialect(interfaces.Dialect):
    statement_compiler = ...  # type: Any
    ddl_compiler = ...  # type: Any
    type_compiler = ...  # type: Any
    preparer = ...  # type: Any
    supports_alter = ...  # type: bool
    default_sequence_base = ...  # type: int
    execute_sequence_format = ...  # type: Any
    supports_views = ...  # type: bool
    supports_sequences = ...  # type: bool
    sequences_optional = ...  # type: bool
    preexecute_autoincrement_sequences = ...  # type: bool
    postfetch_lastrowid = ...  # type: bool
    implicit_returning = ...  # type: bool
    supports_right_nested_joins = ...  # type: bool
    supports_native_enum = ...  # type: bool
    supports_native_boolean = ...  # type: bool
    supports_simple_order_by_label = ...  # type: bool
    engine_config_types = ...  # type: Any
    supports_native_decimal = ...  # type: bool
    supports_unicode_statements = ...  # type: bool
    supports_unicode_binds = ...  # type: bool
    returns_unicode_strings = ...  # type: bool
    description_encoding = ...  # type: Any
    name = ...  # type: str
    max_identifier_length = ...  # type: int
    max_index_name_length = ...  # type: Any
    supports_sane_rowcount = ...  # type: bool
    supports_sane_multi_rowcount = ...  # type: bool
    dbapi_type_map = ...  # type: Any
    colspecs = ...  # type: Any
    default_paramstyle = ...  # type: str
    supports_default_values = ...  # type: bool
    supports_empty_insert = ...  # type: bool
    supports_multivalues_insert = ...  # type: bool
    supports_server_side_cursors = ...  # type: bool
    server_version_info = ...  # type: Any
    construct_arguments = ...  # type: Any
    requires_name_normalize = ...  # type: bool
    reflection_options = ...  # type: Any
    dbapi_exception_translation_map = ...  # type: Any
    convert_unicode = ...  # type: Any
    encoding = ...  # type: Any
    positional = ...  # type: bool
    dbapi = ...  # type: Any
    paramstyle = ...  # type: Any
    identifier_preparer = ...  # type: Any
    case_sensitive = ...  # type: Any
    label_length = ...  # type: Any
    def __init__(self, convert_unicode: bool = ..., encoding: str = ..., paramstyle: Optional[Any] = ..., dbapi: Optional[Any] = ..., implicit_returning: Optional[Any] = ..., supports_right_nested_joins: Optional[Any] = ..., case_sensitive: bool = ..., supports_native_boolean: Optional[Any] = ..., label_length: Optional[Any] = ..., **kwargs) -> None: ...
    @property
    def dialect_description(self): ...
    @classmethod
    def get_pool_class(cls, url): ...
    default_schema_name = ...  # type: Any
    default_isolation_level = ...  # type: Any
    def initialize(self, connection): ...
    def on_connect(self): ...
    def type_descriptor(self, typeobj): ...
    def reflecttable(self, connection, table, include_columns, exclude_columns, **opts): ...
    # Should be conn but using connection so mypy doesn't complain about superclass incompatibility
    def get_pk_constraint(self, connection, table_name, schema: Optional[Any] = ..., **kw): ...
    def validate_identifier(self, ident): ...
    def connect(self, *cargs, **cparams): ...
    def create_connect_args(self, url): ...
    def set_engine_execution_options(self, engine, opts): ...
    def set_connection_execution_options(self, connection, opts): ...
    def do_begin(self, dbapi_connection): ...
    def do_rollback(self, dbapi_connection): ...
    def do_commit(self, dbapi_connection): ...
    def do_close(self, dbapi_connection): ...
    def create_xid(self): ...
    def do_savepoint(self, connection, name): ...
    def do_rollback_to_savepoint(self, connection, name): ...
    def do_release_savepoint(self, connection, name): ...
    def do_executemany(self, cursor, statement, parameters, context: Optional[Any] = ...): ...
    def do_execute(self, cursor, statement, parameters, context: Optional[Any] = ...): ...
    def do_execute_no_params(self, *args, **kwargs): ...
    def is_disconnect(self, e, connection, cursor): ...
    def reset_isolation_level(self, dbapi_conn): ...

class StrCompileDialect(DefaultDialect):
    statement_compiler = ...  # type: Any
    ddl_compiler = ...  # type: Any
    type_compiler = ...  # type: Any
    preparer = ...  # type: Any
    supports_sequences = ...  # type: bool
    sequences_optional = ...  # type: bool
    preexecute_autoincrement_sequences = ...  # type: bool
    implicit_returning = ...  # type: bool
    supports_native_boolean = ...  # type: bool
    supports_simple_order_by_label = ...  # type: bool

class DefaultExecutionContext(interfaces.ExecutionContext):
    isinsert = ...  # type: bool
    isupdate = ...  # type: bool
    isdelete = ...  # type: bool
    is_crud = ...  # type: bool
    is_text = ...  # type: bool
    isddl = ...  # type: bool
    executemany = ...  # type: bool
    compiled = ...  # type: Any
    statement = ...  # type: Any
    result_column_struct = ...  # type: Any
    returned_defaults = ...  # type: Any
    @property
    def engine(self): ...
    @property
    def postfetch_cols(self): ...
    @property
    def prefetch_cols(self): ...
    @property
    def returning_cols(self): ...
    @property
    def no_parameters(self): ...
    @property
    def should_autocommit(self): ...
    @property
    def connection(self): ...
    def should_autocommit_text(self, statement): ...
    def create_cursor(self): ...
    def create_server_side_cursor(self): ...
    def pre_exec(self): ...
    def post_exec(self): ...
    def get_result_processor(self, type_, colname, coltype): ...
    def get_lastrowid(self): ...
    def handle_dbapi_exception(self, e): ...
    def get_result_proxy(self): ...
    @property
    def rowcount(self): ...
    def supports_sane_rowcount(self): ...
    def supports_sane_multi_rowcount(self): ...
    def lastrow_has_defaults(self): ...
    def set_input_sizes(self, translate: Optional[Any] = ..., exclude_types: Optional[Any] = ...): ...
    def get_insert_default(self, column): ...
    def get_update_default(self, column): ...
