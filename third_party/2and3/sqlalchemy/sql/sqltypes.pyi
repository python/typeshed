# Stubs for sqlalchemy.sql.sqltypes (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .type_api import TypeEngine as TypeEngine, TypeDecorator as TypeDecorator, to_instance as to_instance
from .elements import quoted_name as quoted_name, _defer_name as _defer_name, Slice as Slice
from .elements import TypeCoerce as type_coerce
from .base import SchemaEventTarget as SchemaEventTarget
from ..util import pickle as pickle
from ..util import compat as compat

class _DateAffinity(object):
    comparator_factory = ...  # type: Any

class Concatenable(object):
    comparator_factory = ...  # type: Any

class Indexable(object):
    comparator_factory = ...  # type: Any

class String(Concatenable, TypeEngine):
    __visit_name__ = ...  # type: str
    length = ...  # type: Any
    collation = ...  # type: Any
    convert_unicode = ...  # type: Any
    unicode_error = ...  # type: Any
    def __init__(self, length: Optional[Any] = ..., collation: Optional[Any] = ..., convert_unicode: bool = ..., unicode_error: Optional[Any] = ..., _warn_on_bytestring: bool = ...) -> None: ...
    def literal_processor(self, dialect): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
    @property
    def python_type(self): ...
    def get_dbapi_type(self, dbapi): ...

class Text(String):
    __visit_name__ = ...  # type: str

class Unicode(String):
    __visit_name__ = ...  # type: str
    def __init__(self, length: Optional[Any] = ..., **kwargs) -> None: ...

class UnicodeText(Text):
    __visit_name__ = ...  # type: str
    def __init__(self, length: Optional[Any] = ..., **kwargs) -> None: ...

class Integer(_DateAffinity, TypeEngine):
    __visit_name__ = ...  # type: str
    def get_dbapi_type(self, dbapi): ...
    @property
    def python_type(self): ...
    def literal_processor(self, dialect): ...

class SmallInteger(Integer):
    __visit_name__ = ...  # type: str

class BigInteger(Integer):
    __visit_name__ = ...  # type: str

class Numeric(_DateAffinity, TypeEngine):
    __visit_name__ = ...  # type: str
    precision = ...  # type: Any
    scale = ...  # type: Any
    decimal_return_scale = ...  # type: Any
    asdecimal = ...  # type: Any
    def __init__(self, precision: Optional[Any] = ..., scale: Optional[Any] = ..., decimal_return_scale: Optional[Any] = ..., asdecimal: bool = ...) -> None: ...
    def get_dbapi_type(self, dbapi): ...
    def literal_processor(self, dialect): ...
    @property
    def python_type(self): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...

class Float(Numeric):
    __visit_name__ = ...  # type: str
    scale = ...  # type: Any
    precision = ...  # type: Any
    asdecimal = ...  # type: Any
    decimal_return_scale = ...  # type: Any
    def __init__(self, precision: Optional[Any] = ..., asdecimal: bool = ..., decimal_return_scale: Optional[Any] = ..., **kwargs) -> None: ...
    def result_processor(self, dialect, coltype): ...

class DateTime(_DateAffinity, TypeEngine):
    __visit_name__ = ...  # type: str
    timezone = ...  # type: Any
    def __init__(self, timezone: bool = ...) -> None: ...
    def get_dbapi_type(self, dbapi): ...
    @property
    def python_type(self): ...

class Date(_DateAffinity, TypeEngine):
    __visit_name__ = ...  # type: str
    def get_dbapi_type(self, dbapi): ...
    @property
    def python_type(self): ...

class Time(_DateAffinity, TypeEngine):
    __visit_name__ = ...  # type: str
    timezone = ...  # type: Any
    def __init__(self, timezone: bool = ...) -> None: ...
    def get_dbapi_type(self, dbapi): ...
    @property
    def python_type(self): ...

class _Binary(TypeEngine):
    length = ...  # type: Any
    def __init__(self, length: Optional[Any] = ...) -> None: ...
    def literal_processor(self, dialect): ...
    @property
    def python_type(self): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
    def coerce_compared_value(self, op, value): ...
    def get_dbapi_type(self, dbapi): ...

class LargeBinary(_Binary):
    __visit_name__ = ...  # type: str
    def __init__(self, length: Optional[Any] = ...) -> None: ...

class Binary(LargeBinary):
    def __init__(self, *arg, **kw) -> None: ...

class SchemaType(SchemaEventTarget):
    name = ...  # type: Any
    schema = ...  # type: Any
    metadata = ...  # type: Any
    inherit_schema = ...  # type: Any
    def __init__(self, name: Optional[Any] = ..., schema: Optional[Any] = ..., metadata: Optional[Any] = ..., inherit_schema: bool = ..., quote: Optional[Any] = ..., _create_events: bool = ...) -> None: ...
    def copy(self, **kw): ...
    def adapt(self, *args, **kw): ...
    @property
    def bind(self): ...
    def create(self, bind: Optional[Any] = ..., checkfirst: bool = ...): ...
    def drop(self, bind: Optional[Any] = ..., checkfirst: bool = ...): ...

class Enum(String, SchemaType):
    __visit_name__ = ...  # type: str
    native_enum = ...  # type: Any
    create_constraint = ...  # type: Any
    validate_strings = ...  # type: Any
    def __init__(self, *enums, **kw) -> None: ...
    comparator_factory = ...  # type: Any
    def copy(self, **kw): ...
    def adapt(self, *args, **kw): ...
    def literal_processor(self, dialect): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
    @property
    def python_type(self): ...

class PickleType(TypeDecorator):
    impl = ...  # type: Any
    protocol = ...  # type: Any
    pickler = ...  # type: Any
    comparator = ...  # type: Any
    def __init__(self, protocol: Any = ..., pickler: Optional[Any] = ..., comparator: Optional[Any] = ...) -> None: ...
    def __reduce__(self): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
    def compare_values(self, x, y): ...

class Boolean(TypeEngine, SchemaType):
    __visit_name__ = ...  # type: str
    create_constraint = ...  # type: Any
    name = ...  # type: Any
    def __init__(self, create_constraint: bool = ..., name: Optional[Any] = ..., _create_events: bool = ...) -> None: ...
    @property
    def python_type(self): ...
    def literal_processor(self, dialect): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...

class Interval(_DateAffinity, TypeDecorator):
    impl = ...  # type: Any
    epoch = ...  # type: Any
    native = ...  # type: Any
    second_precision = ...  # type: Any
    day_precision = ...  # type: Any
    def __init__(self, native: bool = ..., second_precision: Optional[Any] = ..., day_precision: Optional[Any] = ...) -> None: ...
    def adapt(self, cls, **kw): ...
    @property
    def python_type(self): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
    def coerce_compared_value(self, op, value): ...

class JSON(Indexable, TypeEngine):
    __visit_name__ = ...  # type: str
    hashable = ...  # type: bool
    NULL = ...  # type: Any
    none_as_null = ...  # type: Any
    def __init__(self, none_as_null: bool = ...) -> None: ...
    class JSONElementType(TypeEngine):
        def string_bind_processor(self, dialect): ...
        def string_literal_processor(self, dialect): ...
        def bind_processor(self, dialect): ...
        def literal_processor(self, dialect): ...
    class JSONIndexType(JSONElementType): ...
    class JSONPathType(JSONElementType): ...
    comparator_factory = ...  # type: Any
    @property
    def python_type(self): ...
    @property
    def should_evaluate_none(self): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...

class ARRAY(Indexable, Concatenable, TypeEngine):
    __visit_name__ = ...  # type: str
    zero_indexes = ...  # type: bool
    comparator_factory = ...  # type: Any
    item_type = ...  # type: Any
    as_tuple = ...  # type: Any
    dimensions = ...  # type: Any
    def __init__(self, item_type, as_tuple: bool = ..., dimensions: Optional[Any] = ..., zero_indexes: bool = ...) -> None: ...
    @property
    def hashable(self): ...
    @property
    def python_type(self): ...
    def compare_values(self, x, y): ...

class REAL(Float):
    __visit_name__ = ...  # type: str

class FLOAT(Float):
    __visit_name__ = ...  # type: str

class NUMERIC(Numeric):
    __visit_name__ = ...  # type: str

class DECIMAL(Numeric):
    __visit_name__ = ...  # type: str

class INTEGER(Integer):
    __visit_name__ = ...  # type: str

INT = ...  # type: Any

class SMALLINT(SmallInteger):
    __visit_name__ = ...  # type: str

class BIGINT(BigInteger):
    __visit_name__ = ...  # type: str

class TIMESTAMP(DateTime):
    __visit_name__ = ...  # type: str
    def __init__(self, timezone: bool = ...) -> None: ...
    def get_dbapi_type(self, dbapi): ...

class DATETIME(DateTime):
    __visit_name__ = ...  # type: str

class DATE(Date):
    __visit_name__ = ...  # type: str

class TIME(Time):
    __visit_name__ = ...  # type: str

class TEXT(Text):
    __visit_name__ = ...  # type: str

class CLOB(Text):
    __visit_name__ = ...  # type: str

class VARCHAR(String):
    __visit_name__ = ...  # type: str

class NVARCHAR(Unicode):
    __visit_name__ = ...  # type: str

class CHAR(String):
    __visit_name__ = ...  # type: str

class NCHAR(Unicode):
    __visit_name__ = ...  # type: str

class BLOB(LargeBinary):
    __visit_name__ = ...  # type: str

class BINARY(_Binary):
    __visit_name__ = ...  # type: str

class VARBINARY(_Binary):
    __visit_name__ = ...  # type: str

class BOOLEAN(Boolean):
    __visit_name__ = ...  # type: str

class NullType(TypeEngine):
    __visit_name__ = ...  # type: str
    hashable = ...  # type: bool
    def literal_processor(self, dialect): ...
    comparator_factory = ...  # type: Any

class MatchType(Boolean): ...

NULLTYPE = ...  # type: Any
BOOLEANTYPE = ...  # type: Any
STRINGTYPE = ...  # type: Any
INTEGERTYPE = ...  # type: Any
MATCHTYPE = ...  # type: Any
