# Stubs for sqlalchemy.sql.functions (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .base import Executable as Executable, ColumnCollection as ColumnCollection
from .elements import ClauseList as ClauseList, Cast as Cast, Extract as Extract, literal_column as literal_column, ColumnElement as ColumnElement, Over as Over, BindParameter as BindParameter, FunctionFilter as FunctionFilter, Grouping as Grouping, WithinGroup as WithinGroup
from .selectable import FromClause as FromClause, Select as Select, Alias as Alias
from . import util as sqlutil
from .visitors import VisitableType as VisitableType

def register_function(identifier, fn, package: str = ...): ...

class FunctionElement(Executable, ColumnElement, FromClause):
    packagenames = ...  # type: Any
    clause_expr = ...  # type: Any
    def __init__(self, *clauses, **kwargs) -> None: ...
    @property
    def columns(self): ...
    def clauses(self): ...
    def over(self, partition_by: Optional[Any] = ..., order_by: Optional[Any] = ..., rows: Optional[Any] = ..., range_: Optional[Any] = ...): ...
    def within_group(self, *order_by): ...
    def filter(self, *criterion): ...
    def get_children(self, **kwargs): ...
    def within_group_type(self, within_group): ...
    def alias(self, name: Optional[Any] = ..., flat: bool = ...): ...
    def select(self): ...
    def scalar(self): ...
    def execute(self): ...
    def self_group(self, against: Optional[Any] = ...): ...

class _FunctionGenerator(object):
    opts = ...  # type: Any
    def __init__(self, **opts) -> None: ...
    def __getattr__(self, name): ...
    def __call__(self, *c, **kwargs): ...

func = ...  # type: Any
modifier = ...  # type: Any

class Function(FunctionElement):
    __visit_name__ = ...  # type: str
    packagenames = ...  # type: Any
    name = ...  # type: Any
    type = ...  # type: Any
    def __init__(self, name, *clauses, **kw) -> None: ...

class _GenericMeta(VisitableType):
    def __init__(cls, clsname, bases, clsdict) -> None: ...

class GenericFunction(Function, metaclass=_GenericMeta):
    coerce_arguments = ...  # type: bool
    packagenames = ...  # type: Any
    clause_expr = ...  # type: Any
    type = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...

class next_value(GenericFunction):
    type = ...  # type: Any
    name = ...  # type: str
    sequence = ...  # type: Any
    def __init__(self, seq, **kw) -> None: ...

class AnsiFunction(GenericFunction):
    def __init__(self, **kwargs) -> None: ...

class ReturnTypeFromArgs(GenericFunction):
    def __init__(self, *args, **kwargs) -> None: ...

class coalesce(ReturnTypeFromArgs): ...
class max(ReturnTypeFromArgs): ...
class min(ReturnTypeFromArgs): ...
class sum(ReturnTypeFromArgs): ...

class now(GenericFunction):
    type = ...  # type: Any

class concat(GenericFunction):
    type = ...  # type: Any

class char_length(GenericFunction):
    type = ...  # type: Any
    def __init__(self, arg, **kwargs) -> None: ...

class random(GenericFunction): ...

class count(GenericFunction):
    type = ...  # type: Any
    def __init__(self, expression: Optional[Any] = ..., **kwargs) -> None: ...

class current_date(AnsiFunction):
    type = ...  # type: Any

class current_time(AnsiFunction):
    type = ...  # type: Any

class current_timestamp(AnsiFunction):
    type = ...  # type: Any

class current_user(AnsiFunction):
    type = ...  # type: Any

class localtime(AnsiFunction):
    type = ...  # type: Any

class localtimestamp(AnsiFunction):
    type = ...  # type: Any

class session_user(AnsiFunction):
    type = ...  # type: Any

class sysdate(AnsiFunction):
    type = ...  # type: Any

class user(AnsiFunction):
    type = ...  # type: Any

class array_agg(GenericFunction):
    type = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...

class OrderedSetAgg(GenericFunction):
    array_for_multi_clause = ...  # type: bool
    def within_group_type(self, within_group): ...

class mode(OrderedSetAgg): ...

class percentile_cont(OrderedSetAgg):
    array_for_multi_clause = ...  # type: bool

class percentile_disc(OrderedSetAgg):
    array_for_multi_clause = ...  # type: bool

class rank(GenericFunction):
    type = ...  # type: Any

class dense_rank(GenericFunction):
    type = ...  # type: Any

class percent_rank(GenericFunction):
    type = ...  # type: Any

class cume_dist(GenericFunction):
    type = ...  # type: Any
