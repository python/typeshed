# Stubs for sqlalchemy.sql.schema (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from . import visitors
from .base import SchemaEventTarget as SchemaEventTarget, DialectKWArgs as DialectKWArgs
from .base import ColumnCollection as ColumnCollection
from .elements import ClauseElement as ClauseElement, ColumnClause as ColumnClause, TextClause as TextClause, ColumnElement as ColumnElement, quoted_name as quoted_name
from .selectable import TableClause as TableClause

RETAIN_SCHEMA = ...  # type: Any
BLANK_SCHEMA = ...  # type: Any

class SchemaItem(SchemaEventTarget, visitors.Visitable):
    __visit_name__ = ...  # type: str
    def get_children(self, **kwargs): ...
    @property
    def quote(self): ...
    @property
    def info(self): ...

class Table(DialectKWArgs, SchemaItem, TableClause):
    __visit_name__ = ...  # type: str
    def __new__(cls, *args, **kw): ...
    @property
    def quote_schema(self): ...
    def __init__(self, *args, **kw) -> None: ...
    @property
    def foreign_key_constraints(self): ...
    @property
    def key(self): ...
    @property
    def bind(self): ...
    def add_is_dependent_on(self, table): ...
    def append_column(self, column): ...
    def append_constraint(self, constraint): ...
    def append_ddl_listener(self, event_name, listener): ...
    def get_children(self, column_collections: bool = ..., schema_visitor: bool = ..., **kw): ...
    def exists(self, bind: Optional[Any] = ...): ...
    def create(self, bind: Optional[Any] = ..., checkfirst: bool = ...): ...
    def drop(self, bind: Optional[Any] = ..., checkfirst: bool = ...): ...
    def tometadata(self, metadata, schema: Any = ..., referred_schema_fn: Optional[Any] = ..., name: Optional[Any] = ...): ...

class Column(SchemaItem, ColumnClause):
    __visit_name__ = ...  # type: str
    key = ...  # type: Any
    primary_key = ...  # type: Any
    nullable = ...  # type: Any
    default = ...  # type: Any
    server_default = ...  # type: Any
    server_onupdate = ...  # type: Any
    index = ...  # type: Any
    unique = ...  # type: Any
    system = ...  # type: Any
    doc = ...  # type: Any
    onupdate = ...  # type: Any
    autoincrement = ...  # type: Any
    constraints = ...  # type: Any
    foreign_keys = ...  # type: Any
    info = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def references(self, column): ...
    def append_foreign_key(self, fk): ...
    def copy(self, **kw): ...
    def get_children(self, schema_visitor: bool = ..., **kwargs): ...

class ForeignKey(DialectKWArgs, SchemaItem):
    __visit_name__ = ...  # type: str
    constraint = ...  # type: Any
    parent = ...  # type: Any
    use_alter = ...  # type: Any
    name = ...  # type: Any
    onupdate = ...  # type: Any
    ondelete = ...  # type: Any
    deferrable = ...  # type: Any
    initially = ...  # type: Any
    link_to_name = ...  # type: Any
    match = ...  # type: Any
    info = ...  # type: Any
    def __init__(self, column, _constraint: Optional[Any] = ..., use_alter: bool = ..., name: Optional[Any] = ..., onupdate: Optional[Any] = ..., ondelete: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., link_to_name: bool = ..., match: Optional[Any] = ..., info: Optional[Any] = ..., **dialect_kw) -> None: ...
    def copy(self, schema: Optional[Any] = ...): ...
    target_fullname = ...  # type: Any
    def references(self, table): ...
    def get_referent(self, table): ...
    @property
    def column(self): ...

class _NotAColumnExpr(object):
    __clause_element__ = ...  # type: Any
    self_group = ...  # type: Any

class DefaultGenerator(_NotAColumnExpr, SchemaItem):
    __visit_name__ = ...  # type: str
    is_sequence = ...  # type: bool
    is_server_default = ...  # type: bool
    column = ...  # type: Any
    for_update = ...  # type: Any
    def __init__(self, for_update: bool = ...) -> None: ...
    def execute(self, bind: Optional[Any] = ..., **kwargs): ...
    @property
    def bind(self): ...

class ColumnDefault(DefaultGenerator):
    arg = ...  # type: Any
    def __init__(self, arg, **kwargs) -> None: ...
    @property
    def is_callable(self): ...
    @property
    def is_clause_element(self): ...
    @property
    def is_scalar(self): ...
    __visit_name__ = ...  # type: Any

class Sequence(DefaultGenerator):
    __visit_name__ = ...  # type: str
    is_sequence = ...  # type: bool
    name = ...  # type: Any
    start = ...  # type: Any
    increment = ...  # type: Any
    minvalue = ...  # type: Any
    maxvalue = ...  # type: Any
    nominvalue = ...  # type: Any
    nomaxvalue = ...  # type: Any
    cycle = ...  # type: Any
    optional = ...  # type: Any
    schema = ...  # type: Any
    metadata = ...  # type: Any
    def __init__(self, name, start: Optional[Any] = ..., increment: Optional[Any] = ..., minvalue: Optional[Any] = ..., maxvalue: Optional[Any] = ..., nominvalue: Optional[Any] = ..., nomaxvalue: Optional[Any] = ..., cycle: Optional[Any] = ..., schema: Optional[Any] = ..., optional: bool = ..., quote: Optional[Any] = ..., metadata: Optional[Any] = ..., quote_schema: Optional[Any] = ..., for_update: bool = ...) -> None: ...
    @property
    def is_callable(self): ...
    @property
    def is_clause_element(self): ...
    def next_value(self, func): ...
    @property
    def bind(self): ...
    def create(self, bind: Optional[Any] = ..., checkfirst: bool = ...): ...
    def drop(self, bind: Optional[Any] = ..., checkfirst: bool = ...): ...

class FetchedValue(_NotAColumnExpr, SchemaEventTarget):
    is_server_default = ...  # type: bool
    reflected = ...  # type: bool
    has_argument = ...  # type: bool
    for_update = ...  # type: Any
    def __init__(self, for_update: bool = ...) -> None: ...

class DefaultClause(FetchedValue):
    has_argument = ...  # type: bool
    arg = ...  # type: Any
    reflected = ...  # type: Any
    def __init__(self, arg, for_update: bool = ..., _reflected: bool = ...) -> None: ...

class PassiveDefault(DefaultClause):
    def __init__(self, *arg, **kw) -> None: ...

class Constraint(DialectKWArgs, SchemaItem):
    __visit_name__ = ...  # type: str
    name = ...  # type: Any
    deferrable = ...  # type: Any
    initially = ...  # type: Any
    info = ...  # type: Any
    def __init__(self, name: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., _create_rule: Optional[Any] = ..., info: Optional[Any] = ..., _type_bound: bool = ..., **dialect_kw) -> None: ...
    @property
    def table(self): ...
    def copy(self, **kw): ...

class ColumnCollectionMixin(object):
    columns = ...  # type: Any
    def __init__(self, *columns, **kw) -> None: ...

class ColumnCollectionConstraint(ColumnCollectionMixin, Constraint):
    def __init__(self, *columns, **kw) -> None: ...
    def __contains__(self, x): ...
    def copy(self, **kw): ...
    def contains_column(self, col): ...
    def __iter__(self): ...
    def __len__(self): ...

class CheckConstraint(ColumnCollectionConstraint):
    sqltext = ...  # type: Any
    def __init__(self, sqltext, name: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., table: Optional[Any] = ..., info: Optional[Any] = ..., _create_rule: Optional[Any] = ..., _autoattach: bool = ..., _type_bound: bool = ...) -> None: ...
    __visit_name__ = ...  # type: Any
    def copy(self, target_table: Optional[Any] = ..., **kw): ...

class ForeignKeyConstraint(ColumnCollectionConstraint):
    __visit_name__ = ...  # type: str
    onupdate = ...  # type: Any
    ondelete = ...  # type: Any
    link_to_name = ...  # type: Any
    use_alter = ...  # type: Any
    match = ...  # type: Any
    elements = ...  # type: Any
    def __init__(self, columns, refcolumns, name: Optional[Any] = ..., onupdate: Optional[Any] = ..., ondelete: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., use_alter: bool = ..., link_to_name: bool = ..., match: Optional[Any] = ..., table: Optional[Any] = ..., info: Optional[Any] = ..., **dialect_kw) -> None: ...
    @property
    def referred_table(self): ...
    @property
    def column_keys(self): ...
    def copy(self, schema: Optional[Any] = ..., target_table: Optional[Any] = ..., **kw): ...

class PrimaryKeyConstraint(ColumnCollectionConstraint):
    __visit_name__ = ...  # type: str
    def __init__(self, *columns, **kw) -> None: ...
    @property
    def columns_autoinc_first(self): ...

class UniqueConstraint(ColumnCollectionConstraint):
    __visit_name__ = ...  # type: str

class Index(DialectKWArgs, ColumnCollectionMixin, SchemaItem):
    __visit_name__ = ...  # type: str
    table = ...  # type: Any
    expressions = ...  # type: Any
    name = ...  # type: Any
    unique = ...  # type: Any
    info = ...  # type: Any
    def __init__(self, name, *expressions, **kw) -> None: ...
    @property
    def bind(self): ...
    def create(self, bind: Optional[Any] = ...): ...
    def drop(self, bind: Optional[Any] = ...): ...

DEFAULT_NAMING_CONVENTION = ...  # type: Any

class MetaData(SchemaItem):
    __visit_name__ = ...  # type: str
    tables = ...  # type: Any
    schema = ...  # type: Any
    naming_convention = ...  # type: Any
    info = ...  # type: Any
    def __init__(self, bind: Optional[Any] = ..., reflect: bool = ..., schema: Optional[Any] = ..., quote_schema: Optional[Any] = ..., naming_convention: Any = ..., info: Optional[Any] = ...) -> None: ...
    def __contains__(self, table_or_key): ...
    def is_bound(self): ...
    def bind(self): ...
    def clear(self): ...
    def remove(self, table): ...
    @property
    def sorted_tables(self): ...
    def reflect(self, bind: Optional[Any] = ..., schema: Optional[Any] = ..., views: bool = ..., only: Optional[Any] = ..., extend_existing: bool = ..., autoload_replace: bool = ..., **dialect_kwargs): ...
    def append_ddl_listener(self, event_name, listener): ...
    def create_all(self, bind: Optional[Any] = ..., tables: Optional[Any] = ..., checkfirst: bool = ...): ...
    def drop_all(self, bind: Optional[Any] = ..., tables: Optional[Any] = ..., checkfirst: bool = ...): ...

class ThreadLocalMetaData(MetaData):
    __visit_name__ = ...  # type: str
    context = ...  # type: Any
    def __init__(self) -> None: ...
    def bind(self): ...
    def is_bound(self): ...
    def dispose(self): ...

class _SchemaTranslateMap(object):
    map_ = ...  # type: Any
    __call__ = ...  # type: Any
    hash_key = ...  # type: Any
    is_default = ...  # type: bool
    def __init__(self, map_) -> None: ...
