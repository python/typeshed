# Stubs for sqlalchemy.sql.compiler (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from . import visitors
from .. import util

RESERVED_WORDS = ...  # type: Any
LEGAL_CHARACTERS = ...  # type: Any
ILLEGAL_INITIAL_CHARACTERS = ...  # type: Any
BIND_PARAMS = ...  # type: Any
BIND_PARAMS_ESC = ...  # type: Any
BIND_TEMPLATES = ...  # type: Any
OPERATORS = ...  # type: Any
FUNCTIONS = ...  # type: Any
EXTRACT_MAP = ...  # type: Any
COMPOUND_KEYWORDS = ...  # type: Any

class Compiled(object):
    execution_options = ...  # type: Any
    dialect = ...  # type: Any
    bind = ...  # type: Any
    preparer = ...  # type: Any
    statement = ...  # type: Any
    can_execute = ...  # type: Any
    string = ...  # type: Any
    def __init__(self, dialect, statement, bind: Optional[Any] = ..., schema_translate_map: Optional[Any] = ..., compile_kwargs: Any = ...) -> None: ...
    def compile(self): ...
    @property
    def sql_compiler(self): ...
    def process(self, obj, **kwargs): ...
    def construct_params(self, params: Optional[Any] = ...): ...
    @property
    def params(self): ...
    def execute(self, *multiparams, **params): ...
    def scalar(self, *multiparams, **params): ...

class TypeCompiler(metaclass=util.EnsureKWArgType):
    ensure_kwarg = ...  # type: str
    dialect = ...  # type: Any
    def __init__(self, dialect) -> None: ...
    def process(self, type_, **kw): ...

class _CompileLabel(visitors.Visitable):
    __visit_name__ = ...  # type: str
    element = ...  # type: Any
    name = ...  # type: Any
    def __init__(self, col, name, alt_names: Any = ...) -> None: ...
    @property
    def proxy_set(self): ...
    @property
    def type(self): ...
    def self_group(self, **kw): ...

class SQLCompiler(Compiled):
    extract_map = ...  # type: Any
    compound_keywords = ...  # type: Any
    isdelete = ...  # type: bool
    isinsert = ...  # type: bool
    isupdate = ...  # type: bool
    isplaintext = ...  # type: bool
    returning = ...  # type: Any
    returning_precedes_values = ...  # type: bool
    render_table_with_column_in_update_from = ...  # type: bool
    ansi_bind_rules = ...  # type: bool
    insert_prefetch = ...  # type: Any
    update_prefetch = ...  # type: Any
    column_keys = ...  # type: Any
    inline = ...  # type: Any
    binds = ...  # type: Any
    bind_names = ...  # type: Any
    stack = ...  # type: Any
    positional = ...  # type: Any
    positiontup = ...  # type: Any
    bindtemplate = ...  # type: Any
    ctes = ...  # type: Any
    label_length = ...  # type: Any
    anon_map = ...  # type: Any
    truncated_names = ...  # type: Any
    def __init__(self, dialect, statement, column_keys: Optional[Any] = ..., inline: bool = ..., **kwargs) -> None: ...
    @property
    def prefetch(self): ...
    def is_subquery(self): ...
    @property
    def sql_compiler(self): ...
    def construct_params(self, params: Optional[Any] = ..., _group_number: Optional[Any] = ..., _check: bool = ...): ...
    @property
    def params(self): ...
    def default_from(self): ...
    def visit_grouping(self, grouping, asfrom: bool = ..., **kwargs): ...
    def visit_label_reference(self, element, within_columns_clause: bool = ..., **kwargs): ...
    def visit_textual_label_reference(self, element, within_columns_clause: bool = ..., **kwargs): ...
    def visit_label(self, label, add_to_result_map: Optional[Any] = ..., within_label_clause: bool = ..., within_columns_clause: bool = ..., render_label_as_label: Optional[Any] = ..., **kw): ...
    def visit_column(self, column, add_to_result_map: Optional[Any] = ..., include_table: bool = ..., **kwargs): ...
    def escape_literal_column(self, text): ...
    def visit_fromclause(self, fromclause, **kwargs): ...
    def visit_index(self, index, **kwargs): ...
    def visit_typeclause(self, typeclause, **kw): ...
    def post_process_text(self, text): ...
    def visit_textclause(self, textclause, **kw): ...
    def visit_text_as_from(self, taf, compound_index: Optional[Any] = ..., asfrom: bool = ..., parens: bool = ..., **kw): ...
    def visit_null(self, expr, **kw): ...
    def visit_true(self, expr, **kw): ...
    def visit_false(self, expr, **kw): ...
    def visit_clauselist(self, clauselist, **kw): ...
    def visit_case(self, clause, **kwargs): ...
    def visit_type_coerce(self, type_coerce, **kw): ...
    def visit_cast(self, cast, **kwargs): ...
    def visit_over(self, over, **kwargs): ...
    def visit_withingroup(self, withingroup, **kwargs): ...
    def visit_funcfilter(self, funcfilter, **kwargs): ...
    def visit_extract(self, extract, **kwargs): ...
    def visit_function(self, func, add_to_result_map: Optional[Any] = ..., **kwargs): ...
    def visit_next_value_func(self, next_value, **kw): ...
    def visit_sequence(self, sequence): ...
    def function_argspec(self, func, **kwargs): ...
    def visit_compound_select(self, cs, asfrom: bool = ..., parens: bool = ..., compound_index: int = ..., **kwargs): ...
    def visit_unary(self, unary, **kw): ...
    def visit_istrue_unary_operator(self, element, operator, **kw): ...
    def visit_isfalse_unary_operator(self, element, operator, **kw): ...
    def visit_notmatch_op_binary(self, binary, operator, **kw): ...
    def visit_binary(self, binary, override_operator: Optional[Any] = ..., eager_grouping: bool = ..., **kw): ...
    def visit_custom_op_binary(self, element, operator, **kw): ...
    def visit_custom_op_unary_operator(self, element, operator, **kw): ...
    def visit_custom_op_unary_modifier(self, element, operator, **kw): ...
    def visit_contains_op_binary(self, binary, operator, **kw): ...
    def visit_notcontains_op_binary(self, binary, operator, **kw): ...
    def visit_startswith_op_binary(self, binary, operator, **kw): ...
    def visit_notstartswith_op_binary(self, binary, operator, **kw): ...
    def visit_endswith_op_binary(self, binary, operator, **kw): ...
    def visit_notendswith_op_binary(self, binary, operator, **kw): ...
    def visit_like_op_binary(self, binary, operator, **kw): ...
    def visit_notlike_op_binary(self, binary, operator, **kw): ...
    def visit_ilike_op_binary(self, binary, operator, **kw): ...
    def visit_notilike_op_binary(self, binary, operator, **kw): ...
    def visit_between_op_binary(self, binary, operator, **kw): ...
    def visit_notbetween_op_binary(self, binary, operator, **kw): ...
    def visit_bindparam(self, bindparam, within_columns_clause: bool = ..., literal_binds: bool = ..., skip_bind_expression: bool = ..., **kwargs): ...
    def render_literal_bindparam(self, bindparam, **kw): ...
    def render_literal_value(self, value, type_): ...
    def bindparam_string(self, name, positional_names: Optional[Any] = ..., **kw): ...
    execution_options = ...  # type: Any
    ctes_recursive = ...  # type: bool
    def visit_cte(self, cte, asfrom: bool = ..., ashint: bool = ..., fromhints: Optional[Any] = ..., **kwargs): ...
    def visit_alias(self, alias, asfrom: bool = ..., ashint: bool = ..., iscrud: bool = ..., fromhints: Optional[Any] = ..., **kwargs): ...
    def visit_lateral(self, lateral, **kw): ...
    def visit_tablesample(self, tablesample, asfrom: bool = ..., **kw): ...
    def get_render_as_alias_suffix(self, alias_name_text): ...
    def format_from_hint_text(self, sqltext, table, hint, iscrud): ...
    def get_select_hint_text(self, byfroms): ...
    def get_from_hint_text(self, table, text): ...
    def get_crud_hint_text(self, table, text): ...
    def get_statement_hint_text(self, hint_texts): ...
    def visit_select(self, select, asfrom: bool = ..., parens: bool = ..., fromhints: Optional[Any] = ..., compound_index: int = ..., nested_join_translation: bool = ..., select_wraps_for: Optional[Any] = ..., lateral: bool = ..., **kwargs): ...
    def get_cte_preamble(self, recursive): ...
    def get_select_precolumns(self, select, **kw): ...
    def order_by_clause(self, select, **kw): ...
    def for_update_clause(self, select, **kw): ...
    def returning_clause(self, stmt, returning_cols): ...
    def limit_clause(self, select, **kw): ...
    def visit_table(self, table, asfrom: bool = ..., iscrud: bool = ..., ashint: bool = ..., fromhints: Optional[Any] = ..., use_schema: bool = ..., **kwargs): ...
    def visit_join(self, join, asfrom: bool = ..., **kwargs): ...
    def visit_insert(self, insert_stmt, asfrom: bool = ..., **kw): ...
    def update_limit_clause(self, update_stmt): ...
    def update_tables_clause(self, update_stmt, from_table, extra_froms, **kw): ...
    def update_from_clause(self, update_stmt, from_table, extra_froms, from_hints, **kw): ...
    def visit_update(self, update_stmt, asfrom: bool = ..., **kw): ...
    def visit_delete(self, delete_stmt, asfrom: bool = ..., **kw): ...
    def visit_savepoint(self, savepoint_stmt): ...
    def visit_rollback_to_savepoint(self, savepoint_stmt): ...
    def visit_release_savepoint(self, savepoint_stmt): ...

class StrSQLCompiler(SQLCompiler):
    def visit_getitem_binary(self, binary, operator, **kw): ...
    def visit_json_getitem_op_binary(self, binary, operator, **kw): ...
    def visit_json_path_getitem_op_binary(self, binary, operator, **kw): ...
    def returning_clause(self, stmt, returning_cols): ...

class DDLCompiler(Compiled):
    def sql_compiler(self): ...
    def type_compiler(self): ...
    def construct_params(self, params: Optional[Any] = ...): ...
    def visit_ddl(self, ddl, **kwargs): ...
    def visit_create_schema(self, create): ...
    def visit_drop_schema(self, drop): ...
    def visit_create_table(self, create): ...
    def visit_create_column(self, create, first_pk: bool = ...): ...
    def create_table_constraints(self, table, _include_foreign_key_constraints: Optional[Any] = ...): ...
    def visit_drop_table(self, drop): ...
    def visit_drop_view(self, drop): ...
    def visit_create_index(self, create, include_schema: bool = ..., include_table_schema: bool = ...): ...
    def visit_drop_index(self, drop): ...
    def visit_add_constraint(self, create): ...
    def visit_create_sequence(self, create): ...
    def visit_drop_sequence(self, drop): ...
    def visit_drop_constraint(self, drop): ...
    def get_column_specification(self, column, **kwargs): ...
    def create_table_suffix(self, table): ...
    def post_create_table(self, table): ...
    def get_column_default_string(self, column): ...
    def visit_check_constraint(self, constraint): ...
    def visit_column_check_constraint(self, constraint): ...
    def visit_primary_key_constraint(self, constraint): ...
    def visit_foreign_key_constraint(self, constraint): ...
    def define_constraint_remote_table(self, constraint, table, preparer): ...
    def visit_unique_constraint(self, constraint): ...
    def define_constraint_cascades(self, constraint): ...
    def define_constraint_deferrability(self, constraint): ...
    def define_constraint_match(self, constraint): ...

class GenericTypeCompiler(TypeCompiler):
    def visit_FLOAT(self, type_, **kw): ...
    def visit_REAL(self, type_, **kw): ...
    def visit_NUMERIC(self, type_, **kw): ...
    def visit_DECIMAL(self, type_, **kw): ...
    def visit_INTEGER(self, type_, **kw): ...
    def visit_SMALLINT(self, type_, **kw): ...
    def visit_BIGINT(self, type_, **kw): ...
    def visit_TIMESTAMP(self, type_, **kw): ...
    def visit_DATETIME(self, type_, **kw): ...
    def visit_DATE(self, type_, **kw): ...
    def visit_TIME(self, type_, **kw): ...
    def visit_CLOB(self, type_, **kw): ...
    def visit_NCLOB(self, type_, **kw): ...
    def visit_CHAR(self, type_, **kw): ...
    def visit_NCHAR(self, type_, **kw): ...
    def visit_VARCHAR(self, type_, **kw): ...
    def visit_NVARCHAR(self, type_, **kw): ...
    def visit_TEXT(self, type_, **kw): ...
    def visit_BLOB(self, type_, **kw): ...
    def visit_BINARY(self, type_, **kw): ...
    def visit_VARBINARY(self, type_, **kw): ...
    def visit_BOOLEAN(self, type_, **kw): ...
    def visit_large_binary(self, type_, **kw): ...
    def visit_boolean(self, type_, **kw): ...
    def visit_time(self, type_, **kw): ...
    def visit_datetime(self, type_, **kw): ...
    def visit_date(self, type_, **kw): ...
    def visit_big_integer(self, type_, **kw): ...
    def visit_small_integer(self, type_, **kw): ...
    def visit_integer(self, type_, **kw): ...
    def visit_real(self, type_, **kw): ...
    def visit_float(self, type_, **kw): ...
    def visit_numeric(self, type_, **kw): ...
    def visit_string(self, type_, **kw): ...
    def visit_unicode(self, type_, **kw): ...
    def visit_text(self, type_, **kw): ...
    def visit_unicode_text(self, type_, **kw): ...
    def visit_enum(self, type_, **kw): ...
    def visit_null(self, type_, **kw): ...
    def visit_type_decorator(self, type_, **kw): ...
    def visit_user_defined(self, type_, **kw): ...

class StrSQLTypeCompiler(GenericTypeCompiler):
    def __getattr__(self, key): ...

class IdentifierPreparer(object):
    reserved_words = ...  # type: Any
    legal_characters = ...  # type: Any
    illegal_initial_characters = ...  # type: Any
    schema_for_object = ...  # type: Any
    dialect = ...  # type: Any
    initial_quote = ...  # type: Any
    final_quote = ...  # type: Any
    escape_quote = ...  # type: Any
    escape_to_quote = ...  # type: Any
    omit_schema = ...  # type: Any
    def __init__(self, dialect, initial_quote: str = ..., final_quote: Optional[Any] = ..., escape_quote: str = ..., omit_schema: bool = ...) -> None: ...
    def quote_identifier(self, value): ...
    def quote_schema(self, schema, force: Optional[Any] = ...): ...
    def quote(self, ident, force: Optional[Any] = ...): ...
    def format_sequence(self, sequence, use_schema: bool = ...): ...
    def format_label(self, label, name: Optional[Any] = ...): ...
    def format_alias(self, alias, name: Optional[Any] = ...): ...
    def format_savepoint(self, savepoint, name: Optional[Any] = ...): ...
    def format_constraint(self, naming, constraint): ...
    def format_table(self, table, use_schema: bool = ..., name: Optional[Any] = ...): ...
    def format_schema(self, name, quote: Optional[Any] = ...): ...
    def format_column(self, column, use_table: bool = ..., name: Optional[Any] = ..., table_name: Optional[Any] = ...): ...
    def format_table_seq(self, table, use_schema: bool = ...): ...
    def unformat_identifiers(self, identifiers): ...
