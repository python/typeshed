# Stubs for sqlalchemy.sql.type_api (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .. import util
from .visitors import Visitable as Visitable, VisitableType as VisitableType
from .base import SchemaEventTarget as SchemaEventTarget
from . import operators

BOOLEANTYPE = ...  # type: Any
INTEGERTYPE = ...  # type: Any
NULLTYPE = ...  # type: Any
STRINGTYPE = ...  # type: Any
MATCHTYPE = ...  # type: Any
INDEXABLE = ...  # type: Any

class TypeEngine(Visitable):
    class Comparator(operators.ColumnOperators):
        default_comparator = ...  # type: Any
        expr = ...  # type: Any
        type = ...  # type: Any
        def __init__(self, expr) -> None: ...
        def operate(self, op, *other, **kwargs): ...
        def reverse_operate(self, op, other, **kwargs): ...
        def __reduce__(self): ...
    hashable = ...  # type: bool
    comparator_factory = ...  # type: Any
    should_evaluate_none = ...  # type: bool
    def evaluates_none(self): ...
    def copy(self, **kw): ...
    def compare_against_backend(self, dialect, conn_type): ...
    def copy_value(self, value): ...
    def literal_processor(self, dialect): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
    def column_expression(self, colexpr): ...
    def bind_expression(self, bindvalue): ...
    def compare_values(self, x, y): ...
    def get_dbapi_type(self, dbapi): ...
    @property
    def python_type(self): ...
    def with_variant(self, type_, dialect_name): ...
    def dialect_impl(self, dialect): ...
    def adapt(self, *args, **kw): ...
    def coerce_compared_value(self, op, value): ...
    def compile(self, dialect: Optional[Any] = ...): ...

class VisitableCheckKWArg(util.EnsureKWArgType, VisitableType): ...

class UserDefinedType(TypeEngine, metaclass=VisitableCheckKWArg):
    __visit_name__ = ...  # type: str
    ensure_kwarg = ...  # type: str
    class Comparator(TypeEngine.Comparator): ...
    comparator_factory = ...  # type: Any
    def coerce_compared_value(self, op, value): ...

class TypeDecorator(SchemaEventTarget, TypeEngine):
    __visit_name__ = ...  # type: str
    impl = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    coerce_to_is_types = ...  # type: Any
    class Comparator(TypeEngine.Comparator):
        def operate(self, op, *other, **kwargs): ...
        def reverse_operate(self, op, other, **kwargs): ...
    @property
    def comparator_factory(self): ...
    def type_engine(self, dialect): ...
    def load_dialect_impl(self, dialect): ...
    def __getattr__(self, key): ...
    def process_literal_param(self, value, dialect): ...
    def process_bind_param(self, value, dialect): ...
    def process_result_value(self, value, dialect): ...
    def literal_processor(self, dialect): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
    def coerce_compared_value(self, op, value): ...
    def copy(self, **kw): ...
    def get_dbapi_type(self, dbapi): ...
    def compare_values(self, x, y): ...

class Variant(TypeDecorator):
    impl = ...  # type: Any
    mapping = ...  # type: Any
    def __init__(self, base, mapping) -> None: ...
    def coerce_compared_value(self, operator, value): ...
    def load_dialect_impl(self, dialect): ...
    def with_variant(self, type_, dialect_name): ...
    @property
    def comparator_factory(self): ...

def to_instance(typeobj, *arg, **kw): ...
def adapt_type(typeobj, colspecs): ...
