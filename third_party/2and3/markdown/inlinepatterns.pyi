from typing import Any, Optional

def build_inlinepatterns(md: Any, **kwargs: Any): ...

NOIMG: str
BACKTICK_RE: str
ESCAPE_RE: str
EMPHASIS_RE: str
STRONG_RE: str
SMART_STRONG_RE: str
SMART_EMPHASIS_RE: str
SMART_STRONG_EM_RE: str
EM_STRONG_RE: str
EM_STRONG2_RE: str
STRONG_EM_RE: str
STRONG_EM2_RE: str
STRONG_EM3_RE: str
LINK_RE: Any
IMAGE_LINK_RE: str
REFERENCE_RE = LINK_RE
IMAGE_REFERENCE_RE = IMAGE_LINK_RE
NOT_STRONG_RE: str
AUTOLINK_RE: str
AUTOMAIL_RE: str
HTML_RE: str
ENTITY_RE: str
LINE_BREAK_RE: str

def dequote(string: Any): ...

class EmStrongItem: ...

class Pattern:
    ANCESTOR_EXCLUDES: Any = ...
    pattern: Any = ...
    compiled_re: Any = ...
    md: Any = ...
    def __init__(self, pattern: Any, md: Optional[Any] = ...) -> None: ...
    @property
    def markdown(self): ...
    def getCompiledRegExp(self): ...
    def handleMatch(self, m: Any) -> None: ...
    def type(self): ...
    def unescape(self, text: Any): ...

class InlineProcessor(Pattern):
    pattern: Any = ...
    compiled_re: Any = ...
    safe_mode: bool = ...
    md: Any = ...
    def __init__(self, pattern: Any, md: Optional[Any] = ...) -> None: ...
    def handleMatch(self, m: Any, data: Any) -> None: ...

class SimpleTextPattern(Pattern):
    def handleMatch(self, m: Any): ...

class SimpleTextInlineProcessor(InlineProcessor):
    def handleMatch(self, m: Any, data: Any): ...

class EscapeInlineProcessor(InlineProcessor):
    def handleMatch(self, m: Any, data: Any): ...

class SimpleTagPattern(Pattern):
    tag: Any = ...
    def __init__(self, pattern: Any, tag: Any) -> None: ...
    def handleMatch(self, m: Any): ...

class SimpleTagInlineProcessor(InlineProcessor):
    tag: Any = ...
    def __init__(self, pattern: Any, tag: Any) -> None: ...
    def handleMatch(self, m: Any, data: Any): ...

class SubstituteTagPattern(SimpleTagPattern):
    def handleMatch(self, m: Any): ...

class SubstituteTagInlineProcessor(SimpleTagInlineProcessor):
    def handleMatch(self, m: Any, data: Any): ...

class BacktickInlineProcessor(InlineProcessor):
    ESCAPED_BSLASH: Any = ...
    tag: str = ...
    def __init__(self, pattern: Any) -> None: ...
    def handleMatch(self, m: Any, data: Any): ...

class DoubleTagPattern(SimpleTagPattern):
    def handleMatch(self, m: Any): ...

class DoubleTagInlineProcessor(SimpleTagInlineProcessor):
    def handleMatch(self, m: Any, data: Any): ...

class HtmlInlineProcessor(InlineProcessor):
    def handleMatch(self, m: Any, data: Any): ...
    def unescape(self, text: Any): ...

class AsteriskProcessor(InlineProcessor):
    PATTERNS: Any = ...
    def build_single(self, m: Any, tag: Any, idx: Any): ...
    def build_double(self, m: Any, tags: Any, idx: Any): ...
    def build_double2(self, m: Any, tags: Any, idx: Any): ...
    def parse_sub_patterns(self, data: Any, parent: Any, last: Any, idx: Any) -> None: ...
    def build_element(self, m: Any, builder: Any, tags: Any, index: Any): ...
    def handleMatch(self, m: Any, data: Any): ...

class UnderscoreProcessor(AsteriskProcessor):
    PATTERNS: Any = ...

class LinkInlineProcessor(InlineProcessor):
    RE_LINK: Any = ...
    RE_TITLE_CLEAN: Any = ...
    def handleMatch(self, m: Any, data: Any): ...
    def getLink(self, data: Any, index: Any): ...
    def getText(self, data: Any, index: Any): ...

class ImageInlineProcessor(LinkInlineProcessor):
    def handleMatch(self, m: Any, data: Any): ...

class ReferenceInlineProcessor(LinkInlineProcessor):
    NEWLINE_CLEANUP_RE: Any = ...
    RE_LINK: Any = ...
    def handleMatch(self, m: Any, data: Any): ...
    def evalId(self, data: Any, index: Any, text: Any): ...
    def makeTag(self, href: Any, title: Any, text: Any): ...

class ShortReferenceInlineProcessor(ReferenceInlineProcessor):
    def evalId(self, data: Any, index: Any, text: Any): ...

class ImageReferenceInlineProcessor(ReferenceInlineProcessor):
    def makeTag(self, href: Any, title: Any, text: Any): ...

class AutolinkInlineProcessor(InlineProcessor):
    def handleMatch(self, m: Any, data: Any): ...

class AutomailInlineProcessor(InlineProcessor):
    def handleMatch(self, m: Any, data: Any): ...
