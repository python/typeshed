from typing import List, Tuple, Optional, Callable, Union, IO, Any
from datetime import datetime

__all__ = ...  # type: List[str]


class parserinfo(object):
    JUMP = ... # type: List[str]
    WEEKDAYS = ... # type: List[Tuple[str, str]]
    MONTHS = ... # type: List[Tuple[str, str]]
    HMS = ... # type: List[Tuple[str, str, str]]
    AMPM = ... # type: List[Tuple[str, str]]
    UTCZONE = ... # type: List[str]
    PERTAIN = ... # type: List[str]
    TZOFFSET = ... # type: Dict[str, int]

    def __init__(self, dayfirst: bool=..., yearfirst: bool=...) -> None: ...
    def jump(self, name: str) -> bool: ...
    def weekday(self, name: str) -> Union[int, None]: ...
    def month(self, name: str) -> Union[int, None]: ...
    def hms(self, name: str) -> Union[int, None]: ...
    def ampm(self, name: str) -> Union[int, None]: ...
    def pertain(self, name: str) -> bool: ...
    def utczone(self, name: str) -> bool: ...
    def tzoffset(self, name: str) -> Union[int, None]: ...
    def convertyear(self, year: int) -> int: ...
    def validate(self, res: datetime) -> bool: ...

class parser(object):
    def __init__(self, info: Optional['parserinfo']) -> None: ...
    def parse(self, timestr: str, default: Optional[datetime],
              ignoretz: bool, tzinfos: Any,
              **kwargs: Dict[str, Any]) -> datetime: ...

DEFAULTPARSER = ... # type: 'parser'
def parse(timestr: str, parserinfo: Optional['parserinfo'],
          **kwargs: Dict[str, Any]) -> datetime: ...
