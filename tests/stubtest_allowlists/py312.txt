# Uncategorised, from Python 3.12
asyncio.create_eager_task_factory
asyncio.eager_task_factory
asyncio.tasks.__all__
asyncio.tasks.create_eager_task_factory
asyncio.tasks.eager_task_factory
collections.UserDict.get
enum.Enum.__signature__
enum.EnumMeta.__call__
enum.EnumType.__call__
enum.property.member
http.client.HTTPConnection.get_proxy_response_headers
imaplib.IMAP4_SSL.__init__
importlib.abc.Finder
importlib.abc.Loader.module_repr
importlib.abc.MetaPathFinder.find_module
importlib.abc.PathEntryFinder.find_loader
importlib.abc.PathEntryFinder.find_module
importlib.abc.__all__
importlib.find_loader
importlib.machinery.BuiltinImporter.find_module
importlib.machinery.BuiltinImporter.module_repr
importlib.machinery.FrozenImporter.find_module
importlib.machinery.FrozenImporter.module_repr
importlib.machinery.PathFinder.find_module
importlib.machinery.WindowsRegistryFinder.find_module
importlib.metadata.PackageMetadata.get
importlib.metadata.SelectableGroups
importlib.metadata._meta.PackageMetadata.get
importlib.metadata._meta.SimplePath.__truediv__
importlib.metadata._meta.SimplePath.parent
importlib.resources.files
importlib.util.module_for_loader
importlib.util.set_loader
importlib.util.set_package
pathlib.Path.__init__
pathlib.PurePath.__init__
pathlib.PurePath.is_relative_to
pathlib.PurePath.relative_to
poplib.POP3_SSL.__init__
smtplib.SMTP.starttls
smtplib.SMTP_SSL.__init__
typing.ParamSpec.__mro_entries__
typing.ParamSpecArgs.__mro_entries__
typing.ParamSpecKwargs.__mro_entries__
typing.SupportsAbs.__type_params__
typing.SupportsRound.__type_params__
typing.TypeVar.__mro_entries__
typing.TypeVarTuple.__mro_entries__
typing._ProtocolMeta.__init__
typing.__all__
typing.override
typing_extensions.Protocol
typing_extensions.SupportsAbs.__type_params__
typing_extensions.SupportsRound.__type_params__
unittest.mock.NonCallableMock.__new__
urllib.request.AbstractHTTPHandler.__init__
urllib.request.HTTPSHandler.__init__
zipfile.Path.glob
zipfile.Path.is_symlink
zipfile.Path.match
zipfile.Path.relative_to
zipfile.Path.rglob

# TODO: remove after rc2 release
turtle.__all__
turtle.teleport

# Errors that also existed on Python 3.11
_collections_abc.AsyncIterable.__class_getitem__
_collections_abc.Awaitable.__class_getitem__
_collections_abc.Container.__class_getitem__
_collections_abc.Iterable.__class_getitem__
_collections_abc.MappingView.__class_getitem__
_csv.Reader
_csv.Writer
configparser.LegacyInterpolation.__init__
enum.Enum.__init__
tkinter._VersionInfoType.__doc__
typing.NewType.__call__
typing.NewType.__mro_entries__

# ==========
# Related to positional-only arguments
# ==========

# These are not positional-only at runtime, but we treat them
# as positional-only to match dict.
_collections_abc.MutableMapping.pop
_collections_abc.MutableMapping.setdefault

# typing.IO uses positional-or-keyword arguments, but in the stubs we prefer
# to mark these as positional-only for compatibility with existing sub-classes.
typing(_extensions)?\.BinaryIO\.write
typing(_extensions)?\.IO\.read
typing(_extensions)?\.IO\.readline
typing(_extensions)?\.IO\.readlines
typing(_extensions)?\.IO\.seek
typing(_extensions)?\.IO\.truncate
typing(_extensions)?\.IO\.write
typing(_extensions)?\.IO\.writelines

# positional-only complaints caused by differences between typing aliases and the "real" classes in the stdlib
_collections_abc.Coroutine.send
_collections_abc.Coroutine.throw
_collections_abc.Generator.send
_collections_abc.Generator.throw

# typing.SupportsRound.__round__  # pos-or-kw at runtime, but we pretend it's pos-only in the stub so that e.g. float.__round__ satisfies the interface
types.DynamicClassAttribute..*  # In the stub we pretend it's an alias for property, but it has positional-only differences

# These three have a pos-or-keyword first parameter at runtime, but deliberately have a pos-only first parameter in the stub. #6812
posixpath.join
ntpath.join
os.path.join

# Pos-only parameters had different "names" in different Python versions:
zoneinfo.ZoneInfo.from_file

# ==========
# Allowlist entries that cannot or should not be fixed
# ==========

_ast.ImportFrom.level  # None on the class, but never None on instances
_collections_abc.AsyncGenerator.athrow  # async at runtime, deliberately not in the stub, see #7491. Pos-only differences also.
_weakref.ProxyType.__reversed__  # Doesn't really exist
argparse._MutuallyExclusiveGroup.add_mutually_exclusive_group  # deprecated, forwards arguments to super
ast.ImportFrom.level  # None on the class, but never None on instances
builtins.property.__set_name__  # Doesn't actually exist
dataclasses.KW_ONLY  # white lies around defaults
enum.auto.__init__  # The stub for enum.auto is nothing like the implementation
enum.auto.value  # The stub for enum.auto is nothing like the implementation
functools._lru_cache_wrapper.cache_parameters  # Cannot be detected statically
http.HTTPMethod.description  # mutable instance attribute at runtime but we pretend it's a property
inspect._ParameterKind.description  # Still exists, but stubtest can't see it
os.PathLike.__class_getitem__  # PathLike is a protocol; we don't expect all PathLike classes to implement class_getitem
types.GenericAlias.__call__  # Would be complicated to fix properly, Any could silence problems. #6392
types.GenericAlias.__getattr__
types.GenericAlias.__mro_entries__
weakref.ProxyType.__reversed__  # Doesn't really exist

# C signature is broader than what is actually accepted
ast.ExtSlice.__new__
ast.Index.__new__
contextvars.Context.__init__

# Treated an alias of a typing class in the stubs,
# they are generic to type checkers anyway.
contextlib.AbstractAsyncContextManager.__class_getitem__
contextlib.AbstractContextManager.__class_getitem__

# platform.uname_result's processor field is now dynamically made to exist
platform.uname_result.__match_args__
platform.uname_result.__new__
platform.uname_result.processor

# Runtime has *args, **kwargs, but will error if any are supplied
unittest.TestCase.__init_subclass__
unittest.case.TestCase.__init_subclass__

# Super-special typing primitives
typing\._SpecialForm.*
typing\.NamedTuple
typing\.LiteralString
typing\.Annotated

# These two should be removable after 3.12rc2 is released:
types.CodeType.replace  # stubtest thinks default values are None but None doesn't work at runtime
os.lseek  # a pos-only parameter name changed in py311/py312
